/*!
 * Biblioteca JavaScript jQuery v3.7.1
 * https://jquery.com/
 *
 * Copyright OpenJS Foundation y otros contribuyentes
 * Publicado bajo la licencia MIT
 * https://jquery.org/license
 *
 * Fecha: 2023-08-28T13:37Z
 */
(función(global, fábrica) {

	"uso estricto";

	if (tipo de módulo === "objeto" && tipo de módulo.exportaciones === "objeto") {

		// Para entornos CommonJS y similares a CommonJS donde hay una "ventana" adecuada
		// está presente, ejecuta la fábrica y obtén jQuery.
		// Para entornos que no tienen una `ventana` con un `documento`
		// (como Node.js), expone una fábrica como module.exports.
		// Esto acentúa la necesidad de crear una "ventana" real.
		// por ejemplo, var jQuery = require("jquery")(ventana);
		// Consulte el ticket trac-14549 para obtener más información.
		módulo.exportaciones = global.documento?
			fábrica (global, verdadero):
			función (w) {
				si (!w.documento) {
					arrojar un nuevo error ("jQuery requiere una ventana con un documento");
				}
				devolver fábrica (w);
			};
	} demás {
		fábrica (global);
	}

// Pasa esto si la ventana aún no está definida
} )( tipo de ventana !== "indefinido" ? ventana: esta, función (ventana, noGlobal) {

// Borde <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// lanza excepciones cuando el código no estricto (por ejemplo, ASP.NET 4.5) accede al modo estricto
// argumentos.callee.caller (trac-13335). Pero a partir de jQuery 3.0 (2016), el modo estricto debería ser común
// suficiente para que todos esos intentos estén protegidos en un bloque de prueba.
"uso estricto";

vararr = [];

var getProto = Object.getPrototypeOf;

var sector = arr.slice;

var plano = arr.plano? función (matriz) {
	devolver arr.plano.call (matriz);
}: función (matriz) {
	return arr.concat.apply( [], matriz);
};


var empujar = arr.push;

var indexOf = arr.indexOf;

var clase2tipo = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Objeto );

soporte var = {};

var esFunción = función esFunción( obj ) {

		// Soporte: Chrome <=57, Firefox <=52
		// En algunos navegadores, typeof devuelve "función" para elementos <objeto> HTML
		// (es decir, `tipo de documento.createElement( "objeto") === "función"`).
		// No queremos clasificar *ningún* nodo DOM como una función.
		// Soporte: QtWeb <=3.8.5, WebKit <=534.34, herramienta wkhtmltopdf <=0.12.5
		// Además, para WebKit antiguo, typeof devuelve "función" para colecciones HTML
		// (por ejemplo, `tipo de documento.getElementsByTagName("div") === "función"`). (gh-4756)
		tipo de retorno de obj === "función" && tipo de obj.nodeType! == "número" &&
			tipo de obj.item! == "función";
	};


var esVentana = función esVentana( obj ) {
		devolver obj! = nulo && obj === obj.window;
	};


var documento = ventana.documento;



	var atributos de script preservados = {
		tipo: verdadero,
		fuente: cierto,
		nonce: cierto,
		noModule: verdadero
	};

	función DOMEval(código, nodo, doc) {
		documento = documento || documento;

		var i, val,
			guión = doc.createElement( "guión" );

		script.text = código;
		si (nodo) {
			para (yo en atributos de script conservados) {

				// Soporte: Firefox 64+, Edge 18+
				// Algunos navegadores no admiten la propiedad "nonce" en los scripts.
				// Por otro lado, simplemente usar `getAttribute` no es suficiente ya que
				// el atributo `nonce` se restablece a una cadena vacía cada vez que
				// se conecta al contexto de navegación.
				// Ver https://github.com/whatwg/html/issues/2369
				// Ver https://html.spec.whatwg.org/#nonce-attributes
				// La verificación `node.getAttribute` se agregó por el bien de
				// `jQuery.globalEval` para que pueda falsificar un nodo que no contiene
				// a través de un objeto.
				val = nodo[ i ] || nodo.getAttribute && nodo.getAttribute(yo);
				si (valor) {
					script.setAttribute(i, val);
				}
			}
		}
		doc.head.appendChild( guión ).parentNode.removeChild( guión );
	}


función toType (obj) {
	si (obj == nulo) {
		devolver objeto + "";
	}

	// Soporte: Android <= 2.3 solamente (RegExp funcional)
	tipo de retorno de obj === "objeto" || tipo de obj === "función"?
		tipo2clase[ toString.call( obj ) ] || "objeto" :
		tipo de objeto;
}
/* Símbolo global */
// Definir este global en .eslintrc.json crearía el peligro de usar el global
// no protegido en otro lugar, parece más seguro definir global solo para este módulo



versión var = "3.7.1",

	rhtmlSufijo = /HTML$/i,

	// Definir una copia local de jQuery
	jQuery = función (selector, contexto) {

		// El objeto jQuery es en realidad sólo el constructor init 'mejorado'
		// Necesita init si se llama a jQuery (solo permita que se genere un error si no se incluye)
		devolver nuevo jQuery.fn.init (selector, contexto);
	};

jQuery.fn = jQuery.prototipo = {

	// La versión actual de jQuery que se está utilizando
	jquery: versión,

	constructor: jQuery,

	// La longitud predeterminada de un objeto jQuery es 0
	longitud: 0,

	toArray: función() {
		devolver segmento.call (esto);
	},

	// Obtener el enésimo elemento en el conjunto de elementos coincidentes O
	// Obtiene todo el conjunto de elementos coincidentes como una matriz limpia
	obtener: función (núm) {

		// Devuelve todos los elementos en una matriz limpia
		si (núm == nulo) {
			devolver segmento.call (esto);
		}

		// Devuelve sólo un elemento del conjunto
		devolver número <0? este[ número + esta.longitud ] : este[ número ];
	},

	// Toma una serie de elementos y empújalos hacia la pila
	// (devolviendo el nuevo conjunto de elementos coincidentes)
	pushStack: función (elementos) {

		// Construye un nuevo conjunto de elementos jQuery coincidentes
		var ret = jQuery.merge( this.constructor(), elems );

		// Agrega el objeto antiguo a la pila (como referencia)
		ret.prevObject = esto;

		// Devuelve el conjunto de elementos recién formado
		volver atrás;
	},

	// Ejecutar una devolución de llamada para cada elemento del conjunto coincidente.
	cada uno: función (devolución de llamada) {
		devolver jQuery.each (esto, devolución de llamada);
	},

	mapa: función (devolución de llamada) {
		devolver this.pushStack( jQuery.map( this, function( elem, i ) {
			devolver callback.call( elem, i, elem );
		} ) );
	},

	rebanada: función() {
		devolver this.pushStack (slice.apply (esto, argumentos));
	},

	primero: función() {
		devolver this.eq( 0 );
	},

	último: función() {
		devolver this.eq(-1);
	},

	incluso: función() {
		devolver this.pushStack( jQuery.grep( this, function( _elem, i ) {
			devolver (yo + 1) % 2;
		} ) );
	},

	Función impar() {
		devolver this.pushStack( jQuery.grep( this, function( _elem, i ) {
			devolver yo % 2;
		} ) );
	},

	ecuación: función (yo) {
		var len = esta.longitud,
			j = +i + (i < 0? len: 0);
		devolver this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	fin: función() {
		devolver this.prevObject || this.constructor();
	},

	// Sólo para uso interno.
	// Se comporta como un método de Array, no como un método jQuery.
	empuja empuja,
	ordenar: ordenar.ordenar,
	empalme: arr.splice
};

jQuery.extend = jQuery.fn.extend = función() {
	opciones var, nombre, src, copiar, copyIsArray, clonar,
		objetivo = argumentos[ 0 ] || {},
		yo = 1,
		longitud = argumentos.longitud,
		profundo = falso;

	// Manejar una situación de copia profunda
	if (tipo de objetivo === "booleano") {
		profundo = objetivo;

		// Saltamos el booleano y el objetivo
		objetivo = argumentos[ i ] || {};
		yo ++;
	}

	// Manejar mayúsculas y minúsculas cuando el objetivo es una cadena o algo así (posible en copia profunda)
	if (tipo de objetivo! == "objeto" &&! isFunction (destino)) {
		objetivo = {};
	}

	// Extiende jQuery si solo se pasa un argumento
	si (yo === longitud) {
		objetivo = esto;
		i--;
	}

	para (; i < longitud; i++) {

		// Sólo tratamos con valores no nulos/indefinidos
		si ((opciones = argumentos [i])! = nulo) {

			// Extender el objeto base
			para (nombre en opciones) {
				copiar = opciones [nombre];

				// Prevenir la contaminación de Object.prototype
				// Evitar un bucle sin fin
				if (nombre === "__proto__" || destino === copiar) {
					continuar;
				}

				// Recurre si estamos fusionando objetos simples o matrices
				if (profundo && copia && (jQuery.isPlainObject(copia) ||
					(copiarIsArray = Array.isArray(copiar))))) {
					src = objetivo[ nombre ];

					// Garantizar el tipo adecuado para el valor fuente
					si (copiarIsArray &&! Array.isArray (src)) {
						clonar = [];
					} else if (!copyIsArray &&!jQuery.isPlainObject(src)) {
						clon = {};
					} demás {
						clon = origen;
					}
					copyIsArray = falso;

					// Nunca muevas objetos originales, clonalos
					objetivo[nombre] = jQuery.extend(profundo, clonar, copiar);

				// No introduzcas valores indefinidos
				} más si (copiar! == indefinido) {
					destino[ nombre ] = copiar;
				}
			}
		}
	}

	// Devuelve el objeto modificado
	objetivo de retorno;
};

jQuery.extender ({

	// Único para cada copia de jQuery en la página
	expando: "jQuery" + ( versión + Math.random() ).replace( /\D/g, "" ),

	// Suponemos que jQuery está listo sin el módulo listo
	está listo: verdadero,

	error: función (mensaje) {
		lanzar un nuevo error (mensaje);
	},

	noop: función() {},

	isPlainObject: función (obj) {
		var proto, director;

		// Detectar negativos obvios
		// Usa toString en lugar de jQuery.type para capturar objetos del host
		if (!obj || toString.call(obj)!== "[objeto Objeto]") {
			falso retorno;
		}

		proto = obtenerProto(obj);

		// Los objetos sin prototipo (por ejemplo, `Object.create( null )`) son simples
		si (!proto) {
			devolver verdadero;
		}

		// Los objetos con prototipo son simples si fueron construidos por una función de objeto global
		Ctor = hasOwn.call( proto, "constructor") && proto.constructor;
		tipo de retorno de Ctor === "función" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: función (obj) {
		nombre de la variable;

		para (nombre en obj) {
			falso retorno;
		}
		devolver verdadero;
	},

	// Evalúa un script en un contexto proporcionado; vuelve al global
	// si no se especifica.
	globalEval: función (código, opciones, documento) {
		DOMEval(código, {nonce: opciones && opciones.nonce}, doc);
	},

	cada uno: función (obj, devolución de llamada) {
		longitud var, i = 0;

		si (isArrayLike (obj)) {
			longitud = longitud obj;
			para (; i < longitud; i++) {
				si (devolución de llamada.llamada (obj[i], yo, obj[i]) === falso) {
					romper;
				}
			}
		} demás {
			para (yo en obj) {
				si (devolución de llamada.llamada (obj[i], yo, obj[i]) === falso) {
					romper;
				}
			}
		}

		objeto de retorno;
	},


	// Recupera el valor de texto de una matriz de nodos DOM
	texto: función (elemento) {
		nodo var,
			retiro = "",
			yo = 0,
			tipo de nodo = elem.tipo de nodo;

		si (! tipo de nodo) {

			// Si no hay ningún tipo de nodo, se espera que sea una matriz
			mientras ((nodo = elemento[i++])) {

				// No atravesar nodos de comentarios
				ret += jQuery.text(nodo);
			}
		}
		if (tipo de nodo === 1 || tipo de nodo === 11) {
			devolver elem.textContent;
		}
		si (tipo de nodo === 9) {
			devolver elem.documentElement.textContent;
		}
		if (tipo de nodo === 3 || tipo de nodo === 4) {
			devolver elem.nodeValue;
		}

		// No incluir nodos de comentarios o instrucciones de procesamiento

		volver atrás;
	},

	// los resultados son sólo para uso interno
	makeArray: función (arr, resultados) {
		var ret = resultados || [];

		si (arr! = nulo) {
			si (isArrayLike( Objeto( arr ) ) ) {
				jQuery.merge(ret,
					tipo de arr === "cadena"?
						[arr] :arr
				);
			} demás {
				push.call(ret, arr);
			}
		}

		volver atrás;
	},

	inArray: función (elem, arr, i) {
		devolver arreglo == nulo? -1: indexOf.call(arr, elem, i);
	},

	isXMLDoc: función (elemento) {
		var espacio de nombres = elem && elem.namespaceURI,
			docElem = elem && ( elem.ownerDocument || elem ).documentElement;

		// Asumimos HTML cuando documentElement aún no existe, como en el interior
		// fragmentos de documentos.
		return !rhtmlSuffix.test( espacio de nombres || docElem && docElem.nodeName || "HTML" );
	},

	// Soporte: Android <=4.0 únicamente, PhantomJS 1 únicamente
	// push.apply(_, arraylike) lanza el antiguo WebKit
	fusionar: función (primero, segundo) {
		var len = +segundo.longitud,
			j = 0,
			i = primera.longitud;

		para (; j < len; j++) {
			primero[ i++ ] = segundo[ j ];
		}

		primera.longitud = i;

		regresar primero;
	},

	grep: función (elementos, devolución de llamada, invertir) {
		var callbackInverse,
			coincidencias = [],
			yo = 0,
			longitud = elementos.longitud,
			devolución de llamadaExpect = !invertir;

		//Recorre la matriz, guardando solo los elementos
		// que pasa la función de validación
		para (; i < longitud; i++) {
			callbackInverse = !callback( elems[ i ], i );
			if (callbackInverse! == callbackExpect) {
				coincidencias.push(elementos[i]);
			}
		}

		partidos de vuelta;
	},

	//arg es sólo para uso interno
	mapa: función (elementos, devolución de llamada, arg) {
		longitud var, valor,
			yo = 0,
			retiro = [];

		// Revisa la matriz, traduciendo cada uno de los elementos a sus nuevos valores
		si (isArrayLike (elementos)) {
			longitud = elementos.longitud;
			para (; i < longitud; i++) {
				valor = devolución de llamada (elementos [i], i, arg);

				si (valor! = nulo) {
					ret.push( valor );
				}
			}

		// Revisa cada clave del objeto,
		} demás {
			para (yo en elementos) {
				valor = devolución de llamada (elementos [i], i, arg);

				si (valor! = nulo) {
					ret.push( valor );
				}
			}
		}

		// Aplana cualquier matriz anidada
		volver plano(ret);
	},

	// Un contador GUID global para objetos
	guía: 1,

	// jQuery.support no se usa en Core pero otros proyectos adjuntan sus
	// propiedades para que tenga que existir.
	soporte soporte
} );

if (tipo de símbolo === "función") {
	jQuery.fn[ Símbolo.iterador ] = arr[ Símbolo.iterador ];
}

// Completa el mapa class2type
jQuery.each( "Número booleano Cadena Función Matriz Fecha RegExp Objeto Error Símbolo".split( " " ),
	función (_i, nombre) {
		class2type[ "[objeto " + nombre + "]" ] = nombre.toLowerCase();
	} );

función esArrayLike (obj) {

	// Soporte: iOS 8.2 real únicamente (no reproducible en el simulador)
	// verificación `in` utilizada para evitar el error JIT (gh-2145)
	// hasOwn no se usa aquí debido a falsos negativos
	// con respecto a la longitud de la lista de nodos en IE
	var longitud = !!obj && "longitud" en obj && obj.longitud,
		tipo = toType( obj );

	si (isFunction( obj ) || isWindow( obj ) ) {
		falso retorno;
	}

	tipo de retorno === "matriz" || longitud === 0 ||
		tipo de longitud === "número" && longitud > 0 && (longitud - 1) en obj;
}


función nombrenodo(elem, nombre) {

	return elem.nodeName && elem.nodeName.toLowerCase() === nombre.toLowerCase();

}
var pop = arr.pop;


var ordenar = arr.ordenar;


var empalme = arr.empalme;


var espacio en blanco = "[\\x20\\t\\r\\n\\f]";


var rtrimCSS = nueva expresión regular (
	"^" + espacio en blanco + "+|((?:^|[^\\\\])(?:\\\\.)*)" + espacio en blanco + "+$",
	"gramo"
);




// Nota: un elemento no se contiene a sí mismo
jQuery.contiene = función (a, b) {
	var bup = b && b.parentNode;

	devolver un === bup || !!( bup && bup.tipodenodo === 1 && (

		// Soporte: IE 9 - 11+
		// IE no tiene "contiene" en SVG.
		a.contiene?
			a.contiene(bup):
			a.compareDocumentPosition && a.compareDocumentPosition (bup) & 16
	) );
};




// serialización de identificador/cadena CSS
// https://drafts.csswg.org/cssom/#common-serializing-idioms
var rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;

función fcssescape(ch, asCodePoint) {
	si (asCodePoint) {

		// U+0000 NULL se convierte en U+FFFD CARÁCTER DE REEMPLAZO
		si (ch === "\0") {
			devolver "\uFFFD";
		}

		// Los caracteres de control y (dependiendo de la posición) los números se escapan como puntos de código
		return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
	}

	// Se evita la barra invertida de otros caracteres ASCII potencialmente especiales
	devolver "\\" + canal;
}

jQuery.escapeSelector = función (sel) {
	return (sel + "" ).reemplazar (rcssescape, fcssescape);
};




var preferidoDoc = documento,
	empujarNativo = empujar;

( función() {

var i,
	expr,
	contexto más externo,
	ordenar entrada,
	tiene duplicado,
	empujar = empujarNativo,

	// variables de documentos locales
	documento,
	elemento de documento,
	documentoEsHTML,
	rbuggyQSA,
	partidos,

	// datos específicos de la instancia
	expando=jQuery.expando,
	sucios = 0,
	hecho = 0,
	classCache = crearCache(),
	tokenCache = crearCache(),
	compiladorCache = crearCache(),
	nonativeSelectorCache = createCache(),
	ordenarOrden = función (a, b) {
		si (a === b) {
			tieneDuplicate = verdadero;
		}
		devolver 0;
	},

	booleanos = "marcado|seleccionado|async|autofocus|autoplay|controles|aplazar|deshabilitado|oculto|ismap|" +
		"bucle|múltiple|abierto|solo lectura|obligatorio|alcance",

	// Expresiones regulares

	// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
	identificador = "(?:\\\\[\\da-fA-F]{1,6}" + espacio en blanco +
		"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",

	// Selectores de atributos: https://www.w3.org/TR/selectors/#attribute-selectors
	atributos = "\\[" + espacios en blanco + "*(" + identificador + ")(?:" + espacios en blanco +

		// Operador (captura 2)
		"*([*^$|!~]?=)" + espacio en blanco +

		// "Los valores de los atributos deben ser identificadores CSS [captura 5] o cadenas [captura 3 o captura 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"] )*)\"|(" + identificador + "))|)" +
		espacio en blanco + "*\\]",

	pseudos = ":(" + identificador + ")(?:\\((" +

		// Para reducir la cantidad de selectores que necesitan tokenizar en el prefiltro, prefiera los argumentos:
		// 1. citado (captura 3; captura 4 o captura 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*) \")|" +

		// 2. simple (captura 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + atributos + ")*)|" +

		// 3. cualquier otra cosa (captura 2)
		".*" +
		")\\)|)",

	// Espacios en blanco iniciales y finales sin escape, capturando algunos caracteres que no son espacios en blanco antes de este último
	rwhitespace = nueva RegExp(espacio en blanco + "+", "g"),

	rcomma = nueva RegExp( "^" + espacios en blanco + "*," + espacios en blanco + "*" ),
	rleadingCombinator = new RegExp( "^" + espacios en blanco + "*([>+~]|" + espacios en blanco + ")" +
		espacio en blanco + "*" ),
	rdescend = nueva expresión regular (espacio en blanco + "|>"),

	rpseudo = nueva expresión regular (pseudos),
	identificador = nueva RegExp( "^" + identificador + "$"),

	coincidenciaExpr = {
		ID: nueva expresión regular ("^#(" + identificador + ")" ),
		CLASE: nueva RegExp( "^\\.(" + identificador + ")" ),
		ETIQUETA: nueva RegExp( "^(" + identificador + "|[*])" ),
		ATTR: nueva RegExp( "^" + atributos ),
		PSEUDO: nueva RegExp( "^" + pseudos ),
		NIÑO: nueva RegExp(
			"^:(solo|primero|último|enésimo|enésimo-último)-(secundario|de-tipo)(?:\\(" +
				espacios en blanco + "*(par|impar|(([+-]|)(\\d*)n|)" + espacios en blanco + "*(?:([+-]|)" +
				espacios en blanco + "*(\\d+)|))" + espacios en blanco + "*\\)|)", "i" ),
		bool: nueva expresión regular ("^(?:" + booleanos + ")$", "i"),

		// Para uso en bibliotecas que implementan .is()
		// Usamos esto para comparar POS en `select`
		needContext: nueva expresión regular ("^" + espacios en blanco +
			"*[>+~]|:(par|impar|eq|gt|lt|nésimo|primero|último)(?:\\(" + espacios en blanco +
			"*((?:-\\d)?\\d*)" + espacio en blanco + "*\\)|)(?=[^-]|$)", "i" )
	},

	entradas = /^(?:entrada|seleccionar|área de texto|botón)$/i,
	encabezado = /^h\d$/i,

	// Selectores de ID o TAG o CLASE fácilmente analizables/recuperables
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	r hermano = /[+~]/,

	// CSS escapa
	// https://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = nueva expresión regular ("\\\\[\\da-fA-F]{1,6}" + espacios en blanco +
		"?|\\\\([^\\r\\n\\f])", "g"),
	funescape = función (escape, no hexadecimal) {
		var alto = "0x" + escape.slice( 1 ) - 0x10000;

		si (no hexadecimal) {

			// Elimina el prefijo de barra invertida de una secuencia de escape no hexadecimal
			devolver no hexadecimal;
		}

		// Reemplazar una secuencia de escape hexadecimal con el punto de código Unicode codificado
		// Soporte: IE <=11+
		// Para valores fuera del plano multilingüe básico (BMP), construya manualmente un
		// par sustituto
		devolver alto <0?
			String.fromCharCode (alto + 0x10000):
			String.fromCharCode( alto >> 10 | 0xD800, alto & 0x3FF | 0xDC00 );
	},

	// Usado para iframes; consulte `setDocument`.
	// Soporte: IE 9 - 11+, Edge 12 - 18+
	// Eliminar el contenedor de funciones provoca un "Permiso denegado"
	// error en IE/Edge.
	descargarHandler = función() {
		setDocumento();
	},

	inDisabledFieldset = addCombinator(
		función (elemento) {
			return elem.disabled === true && nodeName( elem, "fieldset" );
		},
		{ dir: "parentNode", siguiente: "leyenda" }
	);

// Soporte: IE <=9 solamente
// Acceder a document.activeElement puede generar resultados inesperados
// https://bugs.jquery.com/ticket/13393
función safeActiveElement() {
	intentar {
		devolver documento.activeElement;
	} atrapar (errar) { }
}

// Optimizar para push.apply( _, NodeList )
intentar {
	empujar.aplicar(
		(arr = segmento.call(preferidoDoc.childNodes)),
		preferidoDoc.childNodes
	);

	// Soporte: Android <=4.0
	// Detecta push.apply que falla silenciosamente
	// eslint-deshabilitar-siguiente-línea sin expresiones-no utilizadas
	arr[preferidoDoc.childNodes.length].nodeType;
} atrapar (e) {
	empujar = {
		aplicar: función (objetivo, els) {
			pushNative.apply(destino, segmento.call(els));
		},
		llamada: función (objetivo) {
			pushNative.apply(destino, segmento.call(argumentos, 1));
		}
	};
}

función buscar (selector, contexto, resultados, semilla) {
	var m, i, elem, nid, match, grupos, newSelector,
		newContext = contexto && contexto.ownerDocument,

		// nodeType por defecto es 9, ya que el contexto por defecto es document
		tipo de nodo = contexto? contexto.nodeType: 9;

	resultados = resultados || [];

	// Regresar temprano de llamadas con selector o contexto no válido
	if ( tipo de selector !== "cadena" || !selector ||
		tipo de nodo! == 1 && tipo de nodo! == 9 && tipo de nodo! == 11) {

		devolver resultados;
	}

	// Intenta utilizar atajos para operaciones de búsqueda (a diferencia de filtros) en documentos HTML
	si (! semilla) {
		establecerDocumento( contexto );
		contexto = contexto || documento;

		si (documentoEsHTML) {

			// Si el selector es lo suficientemente simple, intenta usar un método DOM "get*By*"
			// (excepto el contexto DocumentFragment, donde los métodos no existen)
			if ( tipo de nodo ! == 11 && ( partido = rquickExpr.exec ( selector ) ) ) {

				//selector de ID
				si (( m = partido [ 1 ] ) ) {

					// contexto del documento
					si (tipo de nodo === 9) {
						si (( elem = contexto.getElementById( m ) ) ) {

							// Soporte: IE 9 solamente
							// getElementById puede hacer coincidir elementos por nombre en lugar de ID
							si (elem.id === m) {
								push.call(resultados, elemento);
								devolver resultados;
							}
						} demás {
							devolver resultados;
						}

					// contexto del elemento
					} demás {

						// Soporte: IE 9 solamente
						// getElementById puede hacer coincidir elementos por nombre en lugar de ID
						si ( nuevoContexto && ( elem = nuevoContexto.getElementById( m ) ) &&
							buscar.contiene (contexto, elemento) &&
							elemento.id === m ) {

							push.call(resultados, elemento);
							devolver resultados;
						}
					}

				// selector de tipo
				} más si (coincide [2]) {
					push.apply(resultados, context.getElementsByTagName(selector));
					devolver resultados;

				// selector de clase
				} else if ( ( m = match[ 3 ] ) && contexto.getElementsByClassName ) {
					push.apply(resultados, contexto.getElementsByClassName( m ) );
					devolver resultados;
				}
			}

			// Aprovecha querySelectorAll
			if (!nonnativeSelectorCache[ selector + " " ] &&
				( !rbuggyQSA || !rbuggyQSA.test( selector ) ) ) {

				nuevoSelector = selector;
				nuevoContexto = contexto;

				// qSA considera elementos fuera de una raíz de alcance al evaluar elementos secundarios o
				// combinadores descendientes, que no es lo que queremos.
				// En tales casos, solucionamos el comportamiento anteponiendo cada selector en el
				// lista con un selector de ID que hace referencia al contexto del alcance.
				// La técnica también debe usarse cuando se usa un combinador principal
				// ya que querySelectorAll no reconoce dichos selectores.
				// Gracias a Andrew Dupont por esta técnica.
				si (tipo de nodo === 1 &&
					(rdescend.test(selector) || rleadingCombinator.test(selector))) {

					// Ampliar contexto para selectores hermanos
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						contexto;

					// Podemos usar :scope en lugar del hack de ID si el navegador
					// lo admite & si no cambiamos el contexto.
					// Soporte: IE 11+, Edge 17 - 18+
					// IE/Edge a veces arroja un error de "Permiso denegado" cuando
					// comparación estricta de dos documentos; Las comparaciones superficiales funcionan.
					// eslint-deshabilitar-siguiente-línea eqeqeq
					if (nuevoContexto!= contexto ||!support.scope) {

						// Capture el ID de contexto, configurándolo primero si es necesario
						si ((nid = contexto.getAttribute( "id") ) ) {
							nid = jQuery.escapeSelector (nid);
						} demás {
							context.setAttribute( "id", (nid = expando) );
						}
					}

					// Prefija cada selector en la lista
					grupos = tokenizar (selector);
					i = grupos.longitud;
					mientras yo-- ) {
						grupos[i] = (nid? "#" + nid: ":alcance") + " " +
							toSelector(grupos[i]);
					}
					nuevoSelector = grupos.join( "," );
				}

				intentar {
					push.apply(resultados,
						nuevoContext.querySelectorAll( nuevoSelector )
					);
					devolver resultados;
				} captura (qsaError) {
					nonativeSelectorCache(selector, verdadero);
				} finalmente {
					si (nid === expando) {
						contexto.removeAttribute( "id" );
					}
				}
			}
		}
	}

	// Todos los otros
	return select(selector.replace(rtrimCSS, "$1"), contexto, resultados, semilla);
}

/**
 * Crear cachés de valores clave de tamaño limitado
 * @returns {función(cadena, objeto)} Devuelve los datos del Objeto después de almacenarlos en sí mismo con
 * nombre de la propiedad la cadena (con sufijo de espacio) y (si el caché es mayor que Expr.cacheLength)
 * eliminar la entrada más antigua
 */
función crearCache() {
	claves var = [];

	caché de función (clave, valor) {

		// Utilice (tecla + " ") para evitar colisiones con las propiedades del prototipo nativo
		// (ver https://github.com/jquery/sizzle/issues/157)
		if (keys.push(key + " " ) > Expr.cacheLength ) {

			// Conserva solo las entradas más recientes
			eliminar caché [keys.shift()];
		}
		retorno (caché [clave + " " ] = valor);
	}
	devolver caché;
}

/**
 * Marcar una función para uso especial del módulo selector jQuery
 * @param {Función} fn La función a marcar
 */
función marcaFunción( fn ) {
	fn[ expando ] = verdadero;
	devolver fn;
}

/**
 * Soporte de pruebas usando un elemento.
 * @param {Función} fn Pasó el elemento creado y devuelve un resultado booleano
 */
función afirmar (fn) {
	var el = document.createElement( "conjunto de campos" );

	intentar {
		retorno !!fn( el );
	} atrapar (e) {
		falso retorno;
	} finalmente {

		// Eliminar de su padre por defecto
		si (el.parentNode) {
			el.parentNode.removeChild( el );
		}

		//liberar memoria en IE
		el = nulo;
	}
}

/**
 * Devuelve una función para usar en pseudos para tipos de entrada
 * @param {Cadena} tipo
 */
función crearInputPseudo(tipo) {
	función de retorno (elemento) {
		return nodeName( elem, "entrada") && elem.type === tipo;
	};
}

/**
 * Devuelve una función para usar en pseudos para botones
 * @param {Cadena} tipo
 */
función crearBotónPseudo(tipo) {
	función de retorno (elemento) {
		return (nombrenodo( elem, "entrada") || nombrenodo( elem, "botón") ) &&
			elem.tipo === tipo;
	};
}

/**
 * Devuelve una función para usar en pseudos para :enabled/:disabled
 * @param {Boolean} deshabilitado verdadero para :disabled; falso para: habilitado
 */
función createDisabledPseudo (deshabilitado) {

	// Conocido: falsos positivos deshabilitados: conjunto de campos[deshabilitado] > leyenda: enésimo tipo (n+2): can-disable
	función de retorno (elemento) {

		// Sólo ciertos elementos pueden coincidir con :enabled o :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		si ("forma" en elem) {

			// Verifica la discapacidad heredada en elementos relevantes no deshabilitados:
			// * elementos enumerados asociados al formulario en un conjunto de campos deshabilitado
			// https://html.spec.whatwg.org/multipage/forms.html#category-listed
			// https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * elementos de opción en un grupo de opciones deshabilitado
			// https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// Todos estos elementos tienen una propiedad "formulario".
			si (elem.parentNode && elem.disabled === falso) {

				// Los elementos de opción se remiten a un grupo de opción principal si está presente
				si ("etiqueta" en elem) {
					if ( "etiqueta" en elem.parentNode ) {
						return elem.parentNode.disabled === deshabilitado;
					} demás {
						return elem.disabled === discapacitado;
					}
				}

				// Soporte: IE 6 - 11+
				// Utilice la propiedad de acceso directo isDisabled para comprobar si hay ancestros del conjunto de campos deshabilitados
				devolver elem.isDisabled === deshabilitado ||

					// Donde no hay isDisabled, verifique manualmente
					elem.isDisabled !== !disabled &&
						inDisabledFieldset( elem ) === deshabilitado;
			}

			return elem.disabled === discapacitado;

		// Intente eliminar los elementos que no se pueden deshabilitar antes de confiar en la propiedad deshabilitada.
		// Algunas víctimas quedan atrapadas en nuestra red (etiqueta, leyenda, menú, pista), pero no debería ser así
		// incluso existir en ellos, y mucho menos tener un valor booleano.
		} else if ("etiqueta" en elem) {
			return elem.disabled === discapacitado;
		}

		// Los elementos restantes no están ni :enabled ni :disabled
		falso retorno;
	};
}

/**
 * Devuelve una función para usar en pseudos para posicionales
 * @param {Función} fn
 */
función crearPseudoPosicional( fn ) {
	devolver función de marca (función (argumento) {
		argumento = +argumento;
		return markFunction( función( semilla, coincidencias ) {
			varj,
				matchIndexes = fn( [], semilla.longitud, argumento),
				i = matchIndexes.length;

			// Coincidir con los elementos encontrados en los índices especificados
			mientras yo-- ) {
				if ( semilla [ ( j = matchIndexes [ i ] ) ] ) {
					semilla[ j ] = !( coincide[ j ] = semilla[ j ] );
				}
			}
		} );
	} );
}

/**
 * Comprueba la validez de un nodo como contexto del selector jQuery
 * @param {Elemento|Objeto=} contexto
 * @returns {Elemento|Objeto|Booleano} El nodo de entrada si es aceptable, de lo contrario es un valor falso
 */
función testContext( contexto ) {
	devolver contexto && tipo de contexto.getElementsByTagName!== "indefinido" && contexto;
}

/**
 * Establece variables relacionadas con el documento una vez según el documento actual
 * @param {Elemento|Objeto} [nodo] Un elemento u objeto de documento que se utilizará para configurar el documento
 * @returns {Objeto} Devuelve el documento actual
 */
función establecerDocumento (nodo) {
	subventana var,
		doc = nodo? nodo.propietarioDocumento || nodo: Doc preferido;

	// Regresar temprano si el documento no es válido o ya está seleccionado
	// Soporte: IE 11+, Edge 17 - 18+
	// IE/Edge a veces arroja un error de "Permiso denegado" al realizar una comparación estricta
	// dos documentos; Las comparaciones superficiales funcionan.
	// eslint-deshabilitar-siguiente-línea eqeqeq
	if (doc == documento || doc.nodeType !== 9 || !doc.documentElement ) {
		documento de devolución;
	}

	// Actualizar variables globales
	documento = documento;
	documentElement = documento.documentElement;
	documentIsHTML = !jQuery.isXMLDoc( documento );

	// Soporte: iOS 7 solamente, IE 9 - 11+
	// Los navegadores más antiguos no admitían "coincidencias" sin prefijo.
	coincidencias = documentElement.matches ||
		documentElement.webkitMatchesSelector ||
		documentElement.msMatchesSelector;

	// Soporte: IE 9 - 11+, Edge 12 - 18+
	// El acceso a documentos iframe después de la descarga arroja errores de "permiso denegado"
	// (ver trac-13936).
	// Limitar la solución a IE y Edge Legacy; a pesar de que Edge 15+ implementa "coincidencias",
	// todas las versiones de IE 9+ y Edge Legacy también implementan `msMatchesSelector`.
	si (documentElement.msMatchesSelector &&

		// Soporte: IE 11+, Edge 17 - 18+
		// IE/Edge a veces arroja un error de "Permiso denegado" al realizar una comparación estricta
		// dos documentos; Las comparaciones superficiales funcionan.
		// eslint-deshabilitar-siguiente-línea eqeqeq
		documentopreferido != documento &&
		( subventana = document.defaultView ) && subventana.top !== subventana ) {

		// Soporte: IE 9 - 11+, Edge 12 - 18+
		subWindow.addEventListener ("descargar", descargarHandler);
	}

	// Soporte: IE <10
	// Comprobar si getElementById devuelve elementos por nombre
	// Los métodos getElementById rotos no seleccionan nombres establecidos mediante programación,
	// entonces usa una prueba indirecta getElementsByName
	support.getById = afirmar (función (el) {
		documentElement.appendChild( el ).id = jQuery.expando;
		devolver !document.getElementsByName ||
			!document.getElementsByName( jQuery.expando ).length;
	} );

	// Soporte: IE 9 solamente
	// Comprueba si es posible hacer coincidenciasSelector
	// en un nodo desconectado.
	support.disconnectedMatch = afirmar (función (el) {
		return coincidencias.call( el, "*" );
	} );

	// Soporte: IE 9 - 11+, Edge 12 - 18+
	// IE/Edge no admite la pseudoclase :scope.
	soporte.alcance = afirmar (función() {
		devolver document.querySelectorAll( ":alcance" );
	} );

	// Soporte: solo Chrome 105 - 111, solo Safari 15.4 - 16.3
	// Asegúrese de que el argumento `:has()` se analice implacablemente.
	// Incluimos `*` en la prueba para detectar implementaciones con errores que son
	// indulgente _selectivamente_ (específicamente cuando la lista incluye al menos
	// un selector válido).
	// Tenga en cuenta que tratamos la falta total de soporte para `:has()` como si lo fuera
	// soporte compatible con especificaciones, lo cual está bien porque el uso de `:has()` en tales
	// los entornos fallarán en la ruta qSA y recurrirán al recorrido de jQuery
	// de todos modos.
	support.cssHas = afirmar (función() {
		intentar {
			document.querySelector( ":has(*,:jqfake)" );
			falso retorno;
		} atrapar (e) {
			devolver verdadero;
		}
	} );

	// Filtrar ID y buscar
	si (soporte.getById) {
		Expr.filtro.ID = función (identificación) {
			var attrId = id.replace(runescape, funescape);
			función de retorno (elemento) {
				return elem.getAttribute( "id" ) === attrId;
			};
		};
		Expr.find.ID = función (id, contexto) {
			if (tipo de contexto.getElementById! == "indefinido" && documentIsHTML) {
				var elem = contexto.getElementById( identificación );
				elemento de retorno? [elemento]: [];
			}
		};
	} demás {
		Expr.filtro.ID = función (identificación) {
			var attrId = id.replace(runescape, funescape);
			función de retorno (elemento) {
				var nodo = tipo de elem.getAttributeNode! == "indefinido" &&
					elem.getAttributeNode( "identificación" );
				devolver nodo && node.value === attrId;
			};
		};

		// Soporte: IE 6 - 7 solamente
		// getElementById no es confiable como acceso directo de búsqueda
		Expr.find.ID = función (id, contexto) {
			if (tipo de contexto.getElementById! == "indefinido" && documentIsHTML) {
				nodo var, i, elems,
					elem = contexto.getElementById( identificación );

				si (elemento) {

					// Verifica el atributo de identificación
					nodo = elem.getAttributeNode( "id" );
					if (nodo && nodo.valor === id) {
						devolver [elemento];
					}

					// Recurrir a getElementsByName
					elementos = contexto.getElementsByName( identificación );
					yo = 0;
					mientras ((elem = elems[i++])) {
						nodo = elem.getAttributeNode( "id" );
						if (nodo && nodo.valor === id) {
							devolver [elemento];
						}
					}
				}

				devolver [];
			}
		};
	}

	// Etiqueta
	Expr.find.TAG = función (etiqueta, contexto) {
		if (tipo de contexto.getElementsByTagName! == "indefinido") {
			devolver contexto.getElementsByTagName (etiqueta);

		// Los nodos DocumentFragment no tienen gEBTN
		} demás {
			devolver contexto.querySelectorAll(etiqueta);
		}
	};

	// Clase
	Expr.find.CLASS = función (nombre de clase, contexto) {
		if (tipo de contexto.getElementsByClassName! == "indefinido" && documentIsHTML) {
			devolver contexto.getElementsByClassName (nombre de clase);
		}
	};

	/* QSA/Selector de coincidencias
	-------------------------------------------------- -------------------- */

	// Soporte QSA y MatchSelector

	rbuggyQSA = [];

	// Construye expresiones regulares QSA
	// Estrategia Regex adoptada de Diego Perini
	afirmar (función (el) {

		entrada var;

		documentElement.appendChild( el ).innerHTML =
			"<a id='" + expando + "' href='' disabled='disabled'></a>" +
			"<seleccionar id='" + expando + "-\r\\' deshabilitado='deshabilitado'>" +
			"<opción seleccionada=''></option></select>";

		// Soporte: iOS <=7 - 8 solamente
		// Los atributos booleanos y el "valor" no se tratan correctamente en algunos documentos XML
		if (!el.querySelectorAll( "[seleccionado]").length) {
			rbuggyQSA.push( "\\[" + espacios en blanco + "*(?:valor|" + booleanos + ")" );
		}

		// Soporte: iOS <=7 - 8 solamente
		if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
			rbuggyQSA.push( "~=" );
		}

		// Soporte: iOS 8 solamente
		// https://bugs.webkit.org/show_bug.cgi?id=136851
		// El `selector#id selector-combinador de hermanos` en la página falla
		if (!el.querySelectorAll( "a#" + expando + "+*").length ) {
			rbuggyQSA.push( ".#.+[+~]" );
		}

		// Soporte: Chrome <=105+, Firefox <=104+, Safari <=15.4+
		// En algunos tipos de documentos, estos selectores no funcionarían de forma nativa.
		// Probablemente esto esté bien, pero por compatibilidad con versiones anteriores queremos mantener
		// manejándolos a través del recorrido de jQuery en jQuery 3.x.
		if (!el.querySelectorAll( ":marcado").length) {
			rbuggyQSA.push( ":marcado" );
		}

		// Soporte: Aplicaciones nativas de Windows 8
		// Los atributos de tipo y nombre están restringidos durante la asignación .innerHTML
		entrada = document.createElement ("entrada");
		input.setAttribute( "tipo", "oculto");
		el.appendChild(entrada).setAttribute("nombre", "D");

		// Soporte: IE 9 - 11+
		// El selector :disabled de IE no selecciona los elementos secundarios de los conjuntos de campos deshabilitados
		// Soporte: Chrome <=105+, Firefox <=104+, Safari <=15.4+
		// En algunos tipos de documentos, estos selectores no funcionarían de forma nativa.
		// Probablemente esto esté bien, pero por compatibilidad con versiones anteriores queremos mantener
		// manejándolos a través del recorrido de jQuery en jQuery 3.x.
		documentElement.appendChild( el ).disabled = verdadero;
		if ( el.querySelectorAll( ":disabled").length !== 2 ) {
			rbuggyQSA.push( ":habilitado", ":deshabilitado" );
		}

		// Soporte: IE 11+, Edge 15 - 18+
		// IE 11/Edge no encuentra elementos en una consulta `[name='']` en algunos casos.
		// Agregar un atributo temporal al documento antes de que funcione la selección
		// en torno al tema.
		// Curiosamente, IE 10 y versiones anteriores no parecen tener el problema.
		entrada = document.createElement ("entrada");
		input.setAttribute( "nombre", "" );
		el.appendChild(entrada);
		if (!el.querySelectorAll( "[nombre='']").length) {
			rbuggyQSA.push( "\\[" + espacios en blanco + "*nombre" + espacios en blanco + "*=" +
				espacios en blanco + "*(?:''|\"\")" );
		}
	} );

	si (!support.cssHas) {

		// Soporte: Chrome 105 - 110+, Safari 15.4 - 16.3+
		// Nuestro mecanismo habitual `try-catch` no detecta archivos no compatibles de forma nativa
		// pseudoclases dentro de `:has()` (como `:has(:contains("Foo"))`)
		// en navegadores que analizan el argumento `:has()` como una lista de selección indulgente.
		// https://drafts.csswg.org/selectors/#relational ahora requiere el argumento
		// debe analizarse sin piedad, pero los navegadores aún no se han adaptado por completo.
		rbuggyQSA.push( ":tiene" );
	}

	rbuggyQSA = rbuggyQSA.length && nueva expresión regular (rbuggyQSA.join( "|" ));

	/* Ordenando
	-------------------------------------------------- -------------------- */

	// Ordenación de documentos
	ordenarOrden = función (a, b) {

		// Marcar para eliminación de duplicados
		si (a === b) {
			tieneDuplicate = verdadero;
			devolver 0;
		}

		// Ordenar según la existencia del método si solo una entrada tiene compareDocumentPosition
		var comparar = !a.compareDocumentPosition - !b.compareDocumentPosition;
		si ( comparar ) {
			comparación de retorno;
		}

		// Calcular posición si ambas entradas pertenecen al mismo documento
		// Soporte: IE 11+, Edge 17 - 18+
		// IE/Edge a veces arroja un error de "Permiso denegado" al realizar una comparación estricta
		// dos documentos; Las comparaciones superficiales funcionan.
		// eslint-deshabilitar-siguiente-línea eqeqeq
		comparar = (a.ownerDocument || a) == (b.ownerDocument || b)?
			a.compareDocumentPosition(b):

			// De lo contrario sabemos que están desconectados
			1;

		// Nodos desconectados
		si ( comparar & 1 ||
			( !support.sortDetached && b.compareDocumentPosition( a ) === comparar ) ) {

			//Elegimos el primer elemento que esté relacionado con nuestro documento preferido
			// Soporte: IE 11+, Edge 17 - 18+
			// IE/Edge a veces arroja un error de "Permiso denegado" al realizar una comparación estricta
			// dos documentos; Las comparaciones superficiales funcionan.
			// eslint-deshabilitar-siguiente-línea eqeqeq
			if ( a === documento || a.ownerDocument == documento preferido &&
				find.contains(Docpreferido, a) ) {
				devolver -1;
			}

			// Soporte: IE 11+, Edge 17 - 18+
			// IE/Edge a veces arroja un error de "Permiso denegado" al realizar una comparación estricta
			// dos documentos; Las comparaciones superficiales funcionan.
			// eslint-deshabilitar-siguiente-línea eqeqeq
			if ( b === documento || b.ownerDocument == documento preferido &&
				find.contains (Doc preferido, b)) {
				devolver 1;
			}

			// Mantener el orden original
			devolver ordenarEntrada?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;
		}

		volver comparar y 4? -1: 1;
	};

	documento de devolución;
}

buscar.coincidencias = función (expr, elementos) {
	devolver buscar (expr, nulo, nulo, elementos);
};

find.matchesSelector = función (elem, expr) {
	setDocumento(elem);

	si (documentoEsHTML &&
		!nonnativeSelectorCache[ expr + " " ] &&
		( !rbuggyQSA || !rbuggyQSA.prueba( expr ) ) ) {

		intentar {
			var ret = coincidencias.call( elem, expr );

			// MatchSelector de IE 9 devuelve falso en nodos desconectados
			if ( ret || soporte.disconnectedMatch ||

					// Además, se dice que los nodos desconectados están en un documento
					// fragmento en IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				volver atrás;
			}
		} atrapar (e) {
			nonativeSelectorCache( expr, verdadero );
		}
	}

	return buscar (expr, documento, nulo, [elem]). Longitud > 0;
};

buscar.contiene = función (contexto, elemento) {

	// Establece las variables del documento si es necesario
	// Soporte: IE 11+, Edge 17 - 18+
	// IE/Edge a veces arroja un error de "Permiso denegado" al realizar una comparación estricta
	// dos documentos; Las comparaciones superficiales funcionan.
	// eslint-deshabilitar-siguiente-línea eqeqeq
	if ((contexto.propietarioDocumento || contexto)!= documento) {
		establecerDocumento( contexto );
	}
	devolver jQuery.contains (contexto, elemento);
};


buscar.attr = función (elemento, nombre) {

	// Establece las variables del documento si es necesario
	// Soporte: IE 11+, Edge 17 - 18+
	// IE/Edge a veces arroja un error de "Permiso denegado" al realizar una comparación estricta
	// dos documentos; Las comparaciones superficiales funcionan.
	// eslint-deshabilitar-siguiente-línea eqeqeq
	if (( elem.ownerDocument || elem ) != documento ) {
		setDocumento(elem);
	}

	var fn = Expr.attrHandle[ nombre.toLowerCase() ],

		// No te dejes engañar por las propiedades de Object.prototype (ver trac-13807)
		val = fn && hasOwn.call( Expr.attrHandle, nombre.toLowerCase() )?
			fn(elem, nombre,!documentIsHTML):
			indefinido;

	si (val! == indefinido) {
		valor de retorno;
	}

	devolver elem.getAttribute (nombre);
};

encontrar.error = función (mensaje) {
	throw new Error( "Error de sintaxis, expresión no reconocida: " + msg );
};

/**
 * Clasificación de documentos y eliminación de duplicados.
 * @param {ArrayLike} resultados
 */
jQuery.uniqueSort = función (resultados) {
	elemento var,
		duplicados = [],
		j = 0,
		yo = 0;

	// A menos que *sepamos* que podemos detectar duplicados, asumimos su presencia
	//
	// Soporte: Android <=4.0+
	// Las pruebas para detectar duplicados son impredecibles, por lo que suponemos que no podemos
	// depende de la detección de duplicados en todos los navegadores sin una clasificación estable.
	hasDuplicate = !support.sortStable;
	sortInput = !support.sortStable && slice.call( resultados, 0 );
	sort.call(resultados, sortOrder);

	si (tiene Duplicado) {
		mientras ((elem = resultados[i++])) {
			si (elem === resultados [i]) {
				j = duplicados.push(i);
			}
		}
		mientras (j--) {
			empalme.call (resultados, duplicados [j], 1);
		}
	}

	// Borrar entrada después de ordenar para liberar objetos
	// Ver https://github.com/jquery/sizzle/pull/225
	ordenarEntrada = nulo;

	devolver resultados;
};

jQuery.fn.uniqueSort = función() {
	devolver this.pushStack (jQuery.uniqueSort (slice.apply (esto)));
};

Expr = jQuery.expr = {

	// Puede ser ajustado por el usuario
	cachéLongitud: 50,

	crearPseudo: marcarFunción,

	coincidencia: coincidenciaExpr,

	mango de atributo: {},

	encontrar: {},

	relativo: {
		">": { dir: "parentNode", primero: verdadero },
		" ": {dir: "parentNode" },
		"+": { dir: "anteriorSibling", primero: verdadero },
		"~": { dir: "anteriorSibling" }
	},

	prefiltro: {
		ATTR: función (coincidencia) {
			coincidir[ 1 ] = coincidir[ 1 ].reemplazar( runescape, funescape );

			// Mueve el valor dado para que coincida con [3] ya sea entre comillas o sin comillas
			coincidir[ 3 ] = ( coincidir[ 3 ] || coincidir[ 4 ] || coincidir[ 5 ] || "" )
				.reemplazar (runescape, funescape);

			si (coincidencia[ 2 ] === "~=" ) {
				coincidir[ 3 ] = " " + coincidir[ 3 ] + " ";
			}

			devolver partido.slice( 0, 4 );
		},

		NIÑO: función (coincidencia) {

			/* coincidencias de matchExpr["NIÑO"]
				1 tipo (solo|nésimo|...)
				2 qué (niño|de tipo)
				3 argumento (par|impar|\d*|\d*n([+-]\d+)?|...)
				4 componente xn del argumento xn+y ([+-]?\d*n|)
				5 signo del componente xn
				6 x de componente xn
				7 signo del componente y
				8 y del componente y
			*/
			coincidir[ 1 ] = coincidir[ 1 ].toLowerCase();

			if (coincidencia[ 1 ].slice( 0, 3 ) === "enésima") {

				// nth-* requiere argumento
				si (!partido[ 3 ] ) {
					encontrar.error(coincidencia[0]);
				}

				// parámetros numéricos xey para Expr.filter.CHILD
				// recuerda que falso/verdadero se convierte respectivamente en 0/1
				coincidir[ 4 ] = +( coincidir[ 4 ] ?
					coincidir[ 5 ] + ( coincidir[ 6 ] || 1 ) :
					2 * (coincidencia[ 3 ] === "par" || coincidencia[ 3 ] === "impar" )
				);
				coincidir[ 5 ] = +( ( coincidir[ 7 ] + coincidir[ 8 ] ) || coincidir[ 3 ] === "impar" );

			// otros tipos prohíben argumentos
			} más si (coincide [3]) {
				encontrar.error(coincidencia[0]);
			}

			partido de vuelta;
		},

		PSEUDO: función (coincidencia) {
			exceso de var,
				sin comillas = !coincidencia[ 6 ] && coincidencia[ 2 ];

			if (partidoExpr.CHILD.test(partido[ 0 ] ) ) {
				devolver nulo;
			}

			// Acepta los argumentos citados tal cual
			si (coincidencia[ 3 ] ) {
				coincidir[ 2 ] = coincidir[ 4 ] || coincidencia[ 5 ] || "";

			// Elimina los caracteres sobrantes de los argumentos sin comillas
			} más si (sin comillas && rpseudo.test (sin comillas) &&

				// Obtener el exceso de tokenize (recursivamente)
				(exceso = tokenize(sin comillas, verdadero)) &&

				// avanza al siguiente paréntesis de cierre
				(exceso = sin comillas.indexOf( ")", longitud sin comillas - exceso) - longitud sin comillas)) {

				// el exceso es un índice negativo
				coincidencia[ 0 ] = coincidencia[ 0 ].slice( 0, exceso );
				partido[ 2 ] = sin comillas.slice( 0, exceso );
			}

			// Devuelve sólo las capturas necesarias para el método de pseudofiltro (tipo y argumento)
			devolver partido.slice( 0, 3 );
		}
	},

	filtro: {

		ETIQUETA: función (nodeNameSelector) {
			var esperadoNodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			devolver nodoNameSelector === "*"?
				función() {
					devolver verdadero;
				} :
				función (elemento) {
					devolver nombredenodo( elem, nombredenodo esperado );
				};
		},

		CLASE: función (nombre de clase) {
			patrón var = classCache[ nombre de clase + " " ];

			patrón de retorno ||
				(patrón = nueva expresión regular ("(^|" + espacios en blanco + ")" + nombre de clase +
					"(" + espacios en blanco + "|$)" ) ) &&
				classCache (nombre de clase, función (elem) {
					devolver patrón.prueba(
						tipo de elem.className === "cadena" && elem.className ||
							tipo de elem.getAttribute! == "indefinido" &&
								elem.getAttribute( "clase") ||
							""
					);
				} );
		},

		ATTR: función (nombre, operador, verificación) {
			función de retorno (elemento) {
				var resultado = find.attr(elem, nombre);

				si (resultado == nulo) {
					operador de retorno === "!=";
				}
				si (! operador) {
					devolver verdadero;
				}

				resultado += "";

				si (operador === "=") {
					resultado de devolución === comprobar;
				}
				si (operador === "!=") {
					devolver resultado! == comprobar;
				}
				si (operador === "^=") {
					devolver cheque && result.indexOf(verificar) === 0;
				}
				si (operador === "*=") {
					devolver cheque && result.indexOf(verificar) > -1;
				}
				si (operador === "$=") {
					devolver cheque && resultado.slice( -check.length ) === cheque;
				}
				si (operador === "~=") {
					retorno ( " " + resultado.reemplazar (respacio en blanco, " " ) + " " )
						.indexOf(verificar) > -1;
				}
				si (operador === "|=") {
					resultado devuelto === comprobar || resultado.slice( 0, check.length + 1 ) === check + "-";
				}

				falso retorno;
			};
		},

		NIÑO: función (tipo, qué, _argumento, primero, último) {
			var simple = tipo.slice( 0, 3 ) !== "enésimo",
				adelante = tipo.slice( -4 ) !== "último",
				deTipo = qué === "de tipo";

			devolver primero === 1 && último === 0?

				// Acceso directo para :nth-*(n)
				función (elemento) {
					retorno !!elem.parentNode;
				} :

				función (elemento, _context, xml) {
					var cache, externalCache, nodo, nodeIndex, inicio,
						dir = simple! == adelante? "nextSibling": "anteriorSibling",
						padre = elem.parentNode,
						nombre = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diferencia = falso;

					si (padre) {

						// :(primero|último|solo)-(secundario|de-tipo)
						si (simple) {
							mientras (dir) {
								nodo = elem;
								mientras ((nodo = nodo[dir])) {
									si (de tipo?
										nombrenodo(nodo, nombre):
										nodo.tipodenodo === 1 ) {

										falso retorno;
									}
								}

								// Invertir dirección para :only-* (si aún no lo hemos hecho)
								inicio = dir = tipo === "solo" && !inicio && "nextSibling";
							}
							devolver verdadero;
						}

						inicio = [adelante? padre.primer hijo: padre.último hijo];

						// no xml :nth-child(...) almacena datos de caché en `parent`
						si (reenviar && useCache) {

							// Busca `elem` de un índice previamente almacenado en caché
							externalCache = padre[ expando ] || ( padre[ expando ] = {} );
							caché = caché exterior[ tipo ] || [];
							nodeIndex = caché[ 0 ] === dirruns && caché[ 1 ];
							diff = nodeIndex && caché[ 2 ];
							nodo = índicenodo && parent.childNodes[ índicenodo ];

							while ( ( nodo = ++nodeIndex && nodo && nodo[ dir ] ||

								// Volver a buscar `elem` desde el principio
								( diferencia = índice de nodo = 0 ) || inicio.pop() ) ) {

								// Cuando se encuentra, almacena en caché los índices en `parent` y los rompe
								if (nodo.nodeType === 1 && ++diff && nodo === elem) {
									externalCache[ tipo ] = [ dirruns, nodeIndex, diff ];
									romper;
								}
							}

						} demás {

							// Utilice el índice de elementos previamente almacenado en caché si está disponible
							si (useCache) {
								externalCache = elem[ expando ] || ( elemento[ expando ] = {} );
								caché = caché exterior[ tipo ] || [];
								nodeIndex = caché[ 0 ] === dirruns && caché[ 1 ];
								diferencia = índice de nodo;
							}

							// xml :nésimo-niño(...)
							// o :nésimo-último-hijo(...) o :nésimo(-último)?-de-tipo(...)
							si (diferencia === falso) {

								// Usa el mismo bucle que el anterior para buscar `elem` desde el principio
								while ( ( nodo = ++nodeIndex && nodo && nodo[ dir ] ||
									( diferencia = índice de nodo = 0 ) || inicio.pop() ) ) {

									si ((deTipo?
										nombrenodo(nodo, nombre):
										nodo.tipodenodo === 1 ) &&
										++ diferencia ) {

										// Almacenar en caché el índice de cada elemento encontrado
										si (useCache) {
											externalCache = nodo[ expando ] ||
												( nodo[ expando ] = {} );
											externalCache[ tipo ] = [ dirruns, diff ];
										}

										si (nodo === elem) {
											romper;
										}
									}
								}
							}
						}

						// Incorporamos el desplazamiento y luego lo comparamos con el tamaño del ciclo.
						diferencia -= último;
						devolver diferencia === primero || ( diferencia % primero === 0 && diferencia / primero >= 0 );
					}
				};
		},

		PSEUDO: función (pseudo, argumento) {

			// los nombres de pseudoclases no distinguen entre mayúsculas y minúsculas
			// https://www.w3.org/TR/selectores/#pseudo-clases
			// Priorizar por distinción entre mayúsculas y minúsculas en caso de que se agreguen pseudos personalizados con letras mayúsculas
			// Recuerda que setFilters hereda de pseudos
			argumentos var,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					find.error( "pseudo no admitido: " + pseudo );

			// El usuario puede utilizar createPseudo para indicar que
			// se necesitan argumentos para crear la función de filtro
			// tal como lo hace jQuery
			si ( fn[ expando ] ) {
				devolver fn(argumento);
			}

			// Pero mantenemos el soporte para firmas antiguas
			si (fn.longitud > 1) {
				args = [pseudo, pseudo, "", argumento];
				devolver Expr.setFilters.hasOwnProperty (pseudo.toLowerCase())?
					markFunction( función( semilla, coincidencias ) {
						var idx,
							emparejado = fn (semilla, argumento),
							i = longitud.coincidente;
						mientras yo-- ) {
							idx = indexOf.call (semilla, coincidente [i]);
							semilla[ idx ] = !( coincidencias [ idx ] = coincidente [ i ] );
						}
					} ):
					función (elemento) {
						devolver fn(elem, 0, argumentos);
					};
			}

			devolver fn;
		}
	},

	pseudos: {

		// pseudos potencialmente complejos
		no: markFunction( función( selector ) {

			// Recorta el selector pasado para compilar
			// para evitar tratar el principio y el final
			// espacios como combinadores
			entrada var = [],
				resultados = [],
				comparador = compilar (selector.reemplazar (rtrimCSS, "$1"));

			¿Devuelve el comparador[ expando ]?
				markFunction( función( semilla, coincidencias, _context, xml ) {
					elemento var,
						inigualable = comparador (semilla, nulo, xml, []),
						i = longitud.semilla;

					// Empareja elementos que no coinciden con `matcher`
					mientras yo-- ) {
						si ((elem = no coincidente [i])) {
							semilla[ i ] = !( coincide [ i ] = elem );
						}
					}
				} ):
				función (elemento, _context, xml) {
					entrada[ 0 ] = elemento;
					comparador (entrada, nulo, xml, resultados);

					// No conservar el elemento
					// (ver https://github.com/jquery/sizzle/issues/299)
					entrada[ 0 ] = nulo;
					return !resultados.pop();
				};
		} ),

		tiene: markFunction( función( selector ) {
			función de retorno (elemento) {
				devolver buscar (selector, elemento). longitud > 0;
			};
		} ),

		contiene: markFunction( función( texto ) {
			texto = texto.reemplazar (runescape, funescape);
			función de retorno (elemento) {
				return ( elem.textContent || jQuery.text( elem ) ).indexOf( texto ) > -1;
			};
		} ),

		// "Si un elemento está representado por un selector :lang()
		// se basa únicamente en el valor del idioma del elemento
		// siendo igual al identificador C,
		// o comenzando con el identificador C seguido inmediatamente de "-".
		// La comparación de C con el valor de idioma del elemento se realiza sin distinguir entre mayúsculas y minúsculas.
		// El identificador C no tiene por qué ser un nombre de idioma válido."
		// https://www.w3.org/TR/selectores/#lang-pseudo
		idioma: markFunction( función( idioma ) {

			// el valor de idioma debe ser un identificador válido
			if (!ridentificador.prueba(lang || "")) {
				find.error( "idioma no admitido: " + idioma );
			}
			idioma = idioma.replace( runescape, funescape ).toLowerCase();
			función de retorno (elemento) {
				var elemLang;
				hacer {
					if (( elemLang = documentIsHTML ?
						elem.lang:
						elem.getAttribute( "xml:lang") || elem.getAttribute( "idioma") ) ) {

						elemLang = elemLang.toLowerCase();
						devolver elemLang === idioma || elemLang.indexOf( idioma + "-" ) === 0;
					}
				} mientras (( elem = elem.parentNode ) && elem.nodeType === 1 );
				falso retorno;
			};
		} ),

		// Misceláneas
		objetivo: función (elemento) {
			var hash = ventana.ubicación && ventana.ubicación.hash;
			devolver hash && hash.slice( 1 ) === elem.id;
		},

		raíz: función (elemento) {
			devolver elemento === documentElement;
		},

		foco: función (elemento) {
			elemento de retorno === safeActiveElement() &&
				documento.hasFocus() &&
				!!( elem.tipo || elem.href || ~elem.tabIndex );
		},

		// propiedades booleanas
		habilitado: createDisabledPseudo(falso),
		deshabilitado: createDisabledPseudo (verdadero),

		marcado: función (elemento) {

			// En CSS3, :checked debería devolver tanto los elementos marcados como los seleccionados
			// https://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			return ( nombrenodo( elem, "entrada") && !!elem.checked ) ||
				( nombrenodo( elem, "opción" ) && !!elem.selected );
		},

		seleccionado: función (elemento) {

			// Soporte: IE <=11+
			// Accediendo a la propiedad selectedIndex
			// obliga al navegador a tratar la opción predeterminada como
			// seleccionado cuando está en un grupo de opciones.
			si (elem.parentNode) {
				// eslint-deshabilitar-siguiente-línea sin expresiones-no utilizadas
				elem.parentNode.selectedIndex;
			}

			devolver elem.seleccionado === verdadero;
		},

		// Contenidos
		vacío: función (elemento) {

			// https://www.w3.org/TR/selectores/#empty-pseudo
			// :empty es negado por el elemento (1) o los nodos de contenido (texto: 3; cdata: 4; entidad ref: 5),
			// pero no por otros (comentario: 8; instrucción de procesamiento: 7; etc.)
			// nodeType < 6 funciona porque los atributos (2) no aparecen como hijos
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				si (elem.nodeType <6) {
					falso retorno;
				}
			}
			devolver verdadero;
		},

		padre: función (elemento) {
			return !Expr.pseudos.empty( elem );
		},

		// Tipos de elemento/entrada
		encabezado: función (elemento) {
			return rheader.test( elem.nodeName );
		},

		entrada: función (elemento) {
			return rinputs.test( elem.nodeName );
		},

		botón: función (elemento) {
			return nodeName( elem, "entrada") && elem.type === "botón" ||
				nombrenodo( elem, "botón" );
		},

		texto: función (elemento) {
			atributo var;
			devolver nombredenodo( elem, "entrada") && elem.tipo === "texto" &&

				// Soporte: IE <10 solamente
				// Aparecen nuevos valores de atributos HTML5 (por ejemplo, "buscar")
				// con elem.type === "texto"
				( ( attr = elem.getAttribute( "tipo") ) == nulo ||
					attr.toLowerCase() === "texto");
		},

		// Posición en colección
		primero: crearPseudoPosicional( función() {
			devolver [0];
		} ),

		último: createPositionalPseudo( función( _matchIndexes, longitud ) {
			retorno [longitud - 1];
		} ),

		eq: createPositionalPseudo( función( _matchIndexes, longitud, argumento ) {
			devolver [argumento <0? argumento + longitud: argumento ];
		} ),

		incluso: createPositionalPseudo( función( matchIndexes, longitud ) {
			var i = 0;
			para (; yo < longitud; yo += 2 ) {
				matchIndexes.push(yo);
			}
			devolver índices de coincidencia;
		} ),

		impar: createPositionalPseudo (función (matchIndexes, longitud) {
			var i = 1;
			para (; yo < longitud; yo += 2 ) {
				matchIndexes.push(yo);
			}
			devolver índices de coincidencia;
		} ),

		lt: createPositionalPseudo( función( matchIndexes, longitud, argumento ) {
			var i;

			si (argumento < 0) {
				i = argumento + longitud;
			} más si (argumento > longitud) {
				yo = longitud;
			} demás {
				yo = argumento;
			}

			para ( ; --i >= 0; ) {
				matchIndexes.push(yo);
			}
			devolver índices de coincidencia;
		} ),

		gt: createPositionalPseudo( función( matchIndexes, longitud, argumento ) {
			var i = argumento < 0? argumento + longitud: argumento;
			para (; ++i < longitud;) {
				matchIndexes.push(yo);
			}
			devolver índices de coincidencia;
		} )
	}
};

Expr.pseudos.nth = Expr.pseudos.eq;

// Agregar pseudos de tipo botón/entrada
for (i en {radio: verdadero, casilla de verificación: verdadero, archivo: verdadero, contraseña: verdadero, imagen: verdadero}) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
para (yo en {enviar: verdadero, restablecer: verdadero}) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// API sencilla para crear nuevos setFilters
función setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = nuevos setFilters();

función tokenize (selector, parseOnly) {
	var coincidente, coincidencia, tokens, tipo,
		hasta ahora, grupos, prefiltros,
		almacenado en caché = tokenCache[ selector + " " ];

	si (en caché) {
		devolver solo análisis? 0: caché.slice( 0 );
	}

	hasta ahora = selector;
	grupos = [];
	preFilters = Expr.preFilter;

	mientras (hasta ahora) {

		// Coma y primera ejecución
		if (! Matched || (match = rcomma.exec (hasta ahora))) {
			si (coincide) {

				// No consumir comas finales como válidas
				hasta ahora = hasta ahora.slice( partido[ 0 ].longitud ) || hasta ahora;
			}
			grupos.push((tokens = []) );
		}

		coincidente = falso;

		// Combinadores
		if ((partido = rleadingCombinator.exec(hasta ahora))) {
			coincidente = match.shift();
			fichas.push( {
				valor: emparejado,

				// Lanzar combinadores descendientes al espacio
				tipo: coincidencia[ 0 ].reemplazar( rtrimCSS, " " )
			} );
			hasta ahora = hasta ahora.slice( longitud.coincidente );
		}

		// Filtros
		para (escriba Expr.filter) {
			if ((match = matchExpr[ tipo ].exec( hasta ahora ) ) && ( !preFilters[ tipo ] ||
				(coincidencia = preFilters[ tipo ]( coincidencia ) ) ) ) {
				coincidente = match.shift();
				fichas.push( {
					valor: emparejado,
					tipo: tipo,
					partidos: partido
				} );
				hasta ahora = hasta ahora.slice( longitud.coincidente );
			}
		}

		si (! coincide) {
			romper;
		}
	}

	// Devuelve la longitud del exceso no válido
	// si solo estamos analizando
	// De lo contrario, arroja un error o devuelve tokens
	si (sólo análisis) {
		volver hasta ahora.longitud;
	}

	¿Regresar hasta ahora?
		encontrar.error (selector):

		// Almacenar en caché los tokens
		tokenCache( selector, grupos ).slice( 0 );
}

función toSelector (tokens) {
	var i = 0,
		len = tokens.longitud,
		selector = "";
	para (; yo < len; yo++) {
		selector += tokens[ i ].valor;
	}
	selector de retorno;
}

función addCombinator( emparejador, combinador, base ) {
	var dir = combinador.dir,
		saltar = combinador.siguiente,
		tecla = saltar || directorio,
		checkNonElements = base && clave === "parentNode",
		hechoNombre = hecho++;

	devolver combinador.primero?

		// Comprobar con el ancestro más cercano/elemento anterior
		función (elemento, contexto, xml) {
			mientras ((elem = elem[dir])) {
				if (elem.nodeType === 1 || checkNonElements) {
					comparador de retorno (elem, contexto, xml);
				}
			}
			falso retorno;
		} :

		// Comprobar con todos los elementos ancestros/precedentes
		función (elemento, contexto, xml) {
			var oldCache, externalCache,
				newCache = [ dirruns, doneName ];

			// No podemos establecer datos arbitrarios en nodos XML, por lo que no se benefician del almacenamiento en caché del combinador
			si (xml) {
				mientras ((elem = elem[dir])) {
					if (elem.nodeType === 1 || checkNonElements) {
						si (matcher(elem, contexto, xml)) {
							devolver verdadero;
						}
					}
				}
			} demás {
				mientras ((elem = elem[dir])) {
					if (elem.nodeType === 1 || checkNonElements) {
						externalCache = elem[ expando ] || ( elemento[ expando ] = {} );

						if (omitir && nombrenodo(elem, omitir)) {
							elem = elem[dir] || elemento;
						} else if (( oldCache = externalCache[ clave ] ) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Asignar a newCache para que los resultados se propaguen a elementos anteriores
							return (newCache[ 2 ] = oldCache[ 2 ] );
						} demás {

							// Reutilizar newcache para que los resultados se propaguen hacia atrás a elementos anteriores
							externalCache[ clave ] = newCache;

							// Una coincidencia significa que hemos terminado; un fallo significa que tenemos que seguir comprobando
							if (( newCache[ 2 ] = matcher( elem, contexto, xml ) ) ) {
								devolver verdadero;
							}
						}
					}
				}
			}
			falso retorno;
		};
}

función elementMatcher( coincidencias ) {
	devolver coincidencias.longitud> 1?
		función (elemento, contexto, xml) {
			var i = coincidencias.longitud;
			mientras yo-- ) {
				if (!matchers[ i]( elem, contexto, xml ) ) {
					falso retorno;
				}
			}
			devolver verdadero;
		} :
		emparejadores[ 0 ];
}

función múltiplesContextos (selector, contextos, resultados) {
	var i = 0,
		len = contextos.longitud;
	para (; yo < len; yo++) {
		buscar (selector, contextos [i], resultados);
	}
	devolver resultados;
}

función condensar (incomparable, mapa, filtro, contexto, xml) {
	elemento var,
		nuevoIncomparable = [],
		yo = 0,
		len = longitud.inigualable,
		mapeado = mapa! = nulo;

	para (; yo < len; yo++) {
		si ((elem = no coincidente [i])) {
			if (!filtro || filtro(elem, contexto, xml)) {
				nuevoUnmatched.push( elem );
				si (mapeado) {
					mapa.push(i);
				}
			}
		}
	}

	devolver nuevoIncomparable;
}

función setMatcher (prefiltro, selector, comparador, postfiltro, postFinder, postSelector) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction( función( semilla, resultados, contexto, xml ) {
		var temp, i, elem, matcherOut,
			preMapa = [],
			postMap = [],
			preexistente = resultados.longitud,

			// Obtener elementos iniciales de la semilla o contexto
			elems = semilla ||
				contextos múltiples (selector || "*",
					contexto.tipo de nodo? [contexto]: contexto, []),

			// Prefiltro para obtener entradas del comparador, preservando un mapa para la sincronización de resultados iniciales
			matcherIn = prefiltro && (semilla ||!selector)?
				condensar (elementos, preMap, preFilter, contexto, xml):
				elementos;

		si (igualador) {

			// Si tenemos un postFinder, o una semilla filtrada, o un postFilter sin semilla
			// o resultados preexistentes,
			matcherOut = postFinder || (semilla? preFilter: preexistente || postFilter)?

				// ...es necesario un procesamiento intermedio
				[] :

				// ...de lo contrario usaremos los resultados directamente
				resultados;

			// Encuentra coincidencias primarias
			emparejador( emparejadorIn, emparejadorOut, contexto, xml);
		} demás {
			emparejadorOut = emparejadorIn;
		}

		// Aplicar postFilter
		si (postfiltro) {
			temp = condensar (matcherOut, postMap);
			postFilter(temp, [], contexto, xml);

			// Elimina la coincidencia de elementos defectuosos moviéndolos de nuevo a matcherIn
			i = longitud temp.;
			mientras yo-- ) {
				si ((elem = temp[i])) {
					matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );
				}
			}
		}

		si (semilla) {
			si (postFinder || prefiltro) {
				si (postFinder) {

					// Obtenga el matcherOut final condensando este intermedio en contextos postFinder
					temperatura = [];
					i = matcherOut.longitud;
					mientras yo-- ) {
						si (( elem = matcherOut[ i ] ) ) {

							// Restaurar matcherIn ya que elem aún no es una coincidencia final
							temp.push((matcherIn[i] = elem));
						}
					}
					postFinder(nulo, (matcherOut = []), temporal, xml);
				}

				// Mueve elementos coincidentes desde la semilla a los resultados para mantenerlos sincronizados
				i = matcherOut.longitud;
				mientras yo-- ) {
					si (( elem = matcherOut[ i ] ) &&
						(temp = postFinder? indexOf.call (semilla, elem): preMap [i])> -1) {

						semilla[temp] =!(resultados[temp] = elem);
					}
				}
			}

		// Agregar elementos a los resultados, a través de postFinder si está definido
		} demás {
			matcherOut = condensar(
				matcherOut === resultados?
					matcherOut.splice (preexistente, matcherOut.length):
					emparejadorFuera
			);
			si (postFinder) {
				postFinder(nulo, resultados, matcherOut, xml);
			} demás {
				push.apply(resultados, matcherOut);
			}
		}
	} );
}

función matcherFromTokens (tokens) {
	var checkContext, comparador, j,
		len = tokens.longitud,
		líderRelativo = Expr.relativo[ tokens[ 0 ].tipo ],
		Relativo implícito = Relativo principal || Expr.relativa[ " " ],
		i = relativo principal? 1: 0,

		// El comparador fundamental garantiza que se pueda acceder a los elementos desde contextos de nivel superior
		matchContext = addCombinator (función (elem) {
			devolver elemento === checkContext;
		}, implícitoRelativo, verdadero),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call(checkContext, elem) > -1;
		}, implícitoRelativo, verdadero),
		coincidencias = [ función (elem, contexto, xml) {

			// Soporte: IE 11+, Edge 17 - 18+
			// IE/Edge a veces arroja un error de "Permiso denegado" al realizar una comparación estricta
			// dos documentos; Las comparaciones superficiales funcionan.
			// eslint-deshabilitar-siguiente-línea eqeqeq
			var ret = ( !leadingRelative && ( xml || contexto != contextoexterno ) ) || (
				(checkContext = contexto).nodeType?
					matchContext(elem, contexto, xml):
					matchAnyContext(elem, contexto, xml));

			// Evite colgarse del elemento
			// (ver https://github.com/jquery/sizzle/issues/299)
			comprobarContexto = nulo;
			volver atrás;
		} ];

	para (; yo < len; yo++) {
		if ((matcher = Expr.relative[tokens[i].tipo])) {
			emparejadores = [ addCombinator( elementMatcher( emparejadores ), emparejador ) ];
		} demás {
			matcher = Expr.filter[ tokens[ i ].tipo ].apply( null, tokens[ i ].matches );

			// Devolución especial al ver un comparador posicional
			if ( igualador[ expando ] ) {

				// Encuentra el siguiente operador relativo (si lo hay) para un manejo adecuado
				j = ++yo;
				para (; j < len; j++) {
					if ( Expr.relative[ tokens[ j ].tipo ] ) {
						romper;
					}
				}
				devolver setMatcher(
					i > 1 && elementoMatcher( coincidencias ),
					i > 1 && alSelector(

						// Si el token anterior era un combinador descendiente, inserta un elemento implícito `*`
						tokens.slice( 0, i - 1 )
							.concat( { valor: tokens[ i - 2 ].tipo === " " ? "*" : "" } )
					).reemplazar( rtrimCSS, "$1" ),
					igualador,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),
					j < len && toSelector( tokens )
				);
			}
			emparejadores.push( emparejador );
		}
	}

	devolver elementMatcher( coincidencias );
}

función matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		porElement = elementMatchers.length > 0,
		superMatcher = función (semilla, contexto, xml, resultados, más externo) {
			var elem, j, igualador,
				recuento coincidente = 0,
				yo = "0",
				inigualable = semilla && [],
				setMatched = [],
				contextoBackup = contextoexterno,

				// Siempre debemos tener elementos semilla o contexto más externo
				elems = semilla || porElement && Expr.find.TAG( "*", más externo),

				// Utilice dirruns enteros si este es el comparador más externo
				dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),
				len = elems.longitud;

			si (más externo) {

				// Soporte: IE 11+, Edge 17 - 18+
				// IE/Edge a veces arroja un error de "Permiso denegado" al realizar una comparación estricta
				// dos documentos; Las comparaciones superficiales funcionan.
				// eslint-deshabilitar-siguiente-línea eqeqeq
				contextomásexterno = contexto == documento || contexto || más exterior;
			}

			// Agregar elementos pasando elementMatchers directamente a los resultados
			// Soporte: iOS <=7 - 9 solamente
			// Tolera la coincidencia de propiedades de NodeList (IE: "longitud"; Safari: <número>)
			// elementos por id. (ver trac-14142)
			for ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {
				si (porElemento && elem) {
					j = 0;

					// Soporte: IE 11+, Edge 17 - 18+
					// IE/Edge a veces arroja un error de "Permiso denegado" al realizar una comparación estricta
					// dos documentos; Las comparaciones superficiales funcionan.
					// eslint-deshabilitar-siguiente-línea eqeqeq
					if (!context && elem.ownerDocument!= documento) {
						setDocumento(elem);
						xml = !documentIsHTML;
					}
					while ((matcher = elementosMatchers[j++])) {
						if (matcher(elem, contexto || documento, xml)) {
							push.call(resultados, elemento);
							romper;
						}
					}
					si (más externo) {
						dirruns = dirrunsUnique;
					}
				}

				// Seguimiento de elementos no coincidentes para filtros establecidos
				si (porConjunto) {

					// Habrán pasado por todos los posibles matchers
					si ((elem =! Matcher && elem)) {
						MatchedCount--;
					}

					// Alarga la matriz para cada elemento, coincida o no
					si (semilla) {
						inigualable.push( elem );
					}
				}
			}

			// `i` es ahora el recuento de elementos visitados anteriormente y se agrega a `matchedCount`
			// hace que este último no sea negativo.
			cuenta emparejada += i;

			// Aplicar filtros establecidos a elementos no coincidentes
			// NOTA: Esto se puede omitir si no hay elementos no coincidentes (es decir, `matchedCount`
			// es igual a `i`), a menos que no hayamos visitado _ningún_ elemento en el bucle anterior porque tenemos
			// sin coincidencias de elementos ni semillas.
			// Incrementar una cadena inicial "0" `i` permite que `i` siga siendo una cadena solo en ese
			// caso, lo que dará como resultado un "00" `matchedCount` que difiere de `i` pero que también es
			// numéricamente cero.
			if (porSet && i! == matchedCount) {
				j = 0;
				mientras (( emparejador = setMatchers[ j++ ] ) ) {
					comparador (no coincidente, setMatched, contexto, xml);
				}

				si (semilla) {

					// Reintegrar coincidencias de elementos para eliminar la necesidad de ordenar
					si (cuenta coincidente > 0) {
						mientras yo-- ) {
							if ( !( no coincidente[ i ] || setMatched[ i ] ) ) {
								setMatched[ i ] = pop.call( resultados );
							}
						}
					}

					// Descarta los valores del marcador de posición del índice para obtener solo coincidencias reales
					setMatched = condensar( setMatched );
				}

				// Agregar coincidencias a los resultados
				push.apply(resultados, setMatched);

				// Las coincidencias de conjuntos sin semillas posteriores a múltiples coincidencias exitosas estipulan la clasificación
				if (más externo && !seed && setMatched.length > 0 &&
					(matchedCount + setMatchers.length) > 1) {

					jQuery.uniqueSort(resultados);
				}
			}

			// Anula la manipulación de globales por parte de comparadores anidados
			si (más externo) {
				dirruns = dirrunsUnique;
				contextomásexterno = contexto de copia de seguridad;
			}

			retorno inigualable;
		};

	¿volver por Set?
		marcaFunción(superMatcher):
		superMatcher;
}

función compilar (selector, coincidencia /* Solo uso interno */) {
	var i,
		setMatchers = [],
		elementosMatchers = [],
		almacenado en caché = compiladorCache[selector + " " ];

	si (! almacenado en caché) {

		// Genera una función de funciones recursivas que se pueden usar para verificar cada elemento.
		si (!partido) {
			partido = tokenizar (selector);
		}
		i = coincidencia.longitud;
		mientras yo-- ) {
			en caché = matcherFromTokens (coincidencia [i]);
			if (en caché[ expando ] ) {
				setMatchers.push(en caché);
			} demás {
				elementMatchers.push(en caché);
			}
		}

		// Almacenar en caché la función compilada
		almacenado en caché = compiladorCache(selector,
			matcherFromGroupMatchers (elementoMatchers, setMatchers));

		// Guardar selector y tokenización
		caché.selector = selector;
	}
	devolver en caché;
}

/**
 * Una función de selección de bajo nivel que funciona con el compilado de jQuery.
 * funciones selectoras
 * @param {String|Function} selector Un selector o un precompilado
 * función selectora construida con la compilación del selector jQuery
 * @param {Elemento} contexto
 * @param {Matriz} [resultados]
 * @param {Array} [seed] Un conjunto de elementos con los que comparar
 */
función seleccionar (selector, contexto, resultados, semilla) {
	var i, tokens, token, tipo, buscar,
		compilado = tipo de selector === "función" && selector,
		match = !seed && tokenize( ( selector = compilado.selector || selector ) );

	resultados = resultados || [];

	// Intenta minimizar las operaciones si solo hay un selector en la lista y no hay semilla
	// (el último de los cuales nos garantiza el contexto)
	si (coincidencia.longitud === 1) {

		// Reducir el contexto si el selector compuesto principal es un ID
		fichas = coincidencia[ 0 ] = coincidencia[ 0 ].slice( 0 );
		if (tokens.length > 2 && (token = tokens[ 0 ] ).tipo === "ID" &&
				contexto.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].tipo ] ) {

			contexto = ( Expr.find.ID(
				token.matches[ 0 ].replace( runescape, funescape ),
				contexto
			) || [] )[ 0 ];
			si (! contexto) {
				devolver resultados;

			// Los comparadores precompilados seguirán verificando la ascendencia, así que sube un nivel
			} más si (compilado) {
				contexto = contexto.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Obtener un conjunto de semillas para hacer coincidir de derecha a izquierda
		i = matchExpr.needsContext.test(selector)? 0: tokens.longitud;
		mientras yo-- ) {
			token = tokens[i];

			// Abortar si llegamos a un combinador
			if ( Expr.relativa[ ( tipo = token.tipo ) ] ) {
				romper;
			}
			if ((buscar = Expr.buscar[ tipo ] ) ) {

				// Búsqueda, contexto en expansión para los principales combinadores de hermanos
				si (( semilla = encontrar (
					token.matches[ 0 ].replace( runescape, funescape ),
					rsibling.test( tokens[ 0 ].tipo ) &&
						testContext( contexto.parentNode ) || contexto
				) ) ) {

					// Si la semilla está vacía o no quedan tokens, podemos regresar temprano
					tokens.splice(i, 1);
					selector = semilla.longitud && toSelector(tokens);
					si (!selector) {
						push.apply(resultados, semilla);
						devolver resultados;
					}

					romper;
				}
			}
		}
	}

	// Compile y ejecute una función de filtrado si no se proporciona ninguna
	// Proporcionar `match` para evitar la retokenización si modificamos el selector anterior
	(compilado || compilar (selector, coincidir)) (
		semilla,
		contexto,
		!documentIsHTML,
		resultados,
		!contexto || rsibling.test( selector ) && testContext( contexto.parentNode ) || contexto
	);
	devolver resultados;
}

// Asignaciones únicas

// Soporte: Android <=4.0 - 4.1+
// Ordenar estabilidad
support.sortStable = expando.split( "" ).sort( sortOrder ).join( "" ) === expando;

// Inicializar contra el documento predeterminado
setDocumento();

// Soporte: Android <=4.0 - 4.1+
// Los nodos separados se siguen *entre sí* de manera confusa
support.sortDetached = afirmar (función (el) {

	// Debería devolver 1, pero devuelve 4 (siguiente)
	devolver el.compareDocumentPosition( document.createElement( "conjunto de campos") ) & 1;
} );

jQuery.find = buscar;

// Obsoleto
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.unique = jQuery.uniqueSort;

// Estos siempre han sido privados, pero solían estar documentados como parte de
// Chisporrotea, así que mantengámoslos por ahora por motivos de compatibilidad con versiones anteriores.
buscar.compile = compilar;
buscar.select = seleccionar;
buscar.setDocument = setDocument;
find.tokenize = tokenizar;

buscar.escape = jQuery.escapeSelector;
buscar.getText = jQuery.text;
buscar.isXML = jQuery.isXMLDoc;
buscar.selectores = jQuery.expr;
encontrar.soporte = jQuery.soporte;
encontrar.uniqueSort = jQuery.uniqueSort;

	/* eslint-enable */

} )();


var dir = función (elem, dir, hasta) {
	var coincidente = [],
		truncar = hasta! == indefinido;

	mientras (( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		si (elem.nodeType === 1) {
			if (truncar && jQuery (elem). Es (hasta)) {
				romper;
			}
			emparejado.push(elem);
		}
	}
	retorno igualado;
};


var hermanos = función (n, elem) {
	var coincidente = [];

	para (; n; n = n.siguienteHermano) {
		si (n.nodeType === 1 && n!== elem) {
			emparejado.push( n );
		}
	}

	retorno igualado;
};


var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = ( /^<([az][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>( ?:<\/\1>|)$/i );



// Implementar la misma funcionalidad para filtro y no
función winnow (elementos, calificador, no) {
	si (isFunction(calificador)) {
		return jQuery.grep( elementos, función( elemento, i ) {
			return !!calificador.call( elem, i, elem ) !== no;
		} );
	}

	// elemento único
	if (calificador.tipodenodo) {
		devolver jQuery.grep(elementos, función(elem) {
			return ( elem === calificador ) !== no;
		} );
	}

	// Arraylike de elementos (jQuery, argumentos, Array)
	if (tipo de calificador! == "cadena") {
		devolver jQuery.grep(elementos, función(elem) {
			return ( indexOf.call( calificador, elem ) > -1 ) !== no;
		} );
	}

	// Filtrado directamente para selectores simples y complejos
	devolver jQuery.filter (calificador, elementos, no);
}

jQuery.filter = función (expr, elementos, no) {
	var elem = elementos[ 0 ];

	si no ) {
		expr = ":no(" + expr + ")";
	}

	si (elems.length === 1 && elem.nodeType === 1) {
		devolver jQuery.find.matchesSelector( elem, expr )? [elemento]: [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		devolver elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend({
	buscar: función (selector) {
		var i, ret,
			len = esta.longitud,
			yo = esto;

		if (tipo de selector! == "cadena") {
			devolver this.pushStack (jQuery (selector). Filtro (función () {
				para (i = 0; i < len; i++) {
					if (jQuery.contains(self[i], esto)) {
						devolver verdadero;
					}
				}
			} ) );
		}

		ret = this.pushStack ([]);

		para (i = 0; i < len; i++) {
			jQuery.find(selector, self[i], ret);
		}

		longitud de retorno > 1? jQuery.uniqueSort(ret): ret;
	},
	filtro: función (selector) {
		devuelve this.pushStack( winnow( this, selector || [], false ) );
	},
	no: función (selector) {
		devuelve this.pushStack( winnow( this, selector || [], true ) );
	},
	es: función (selector) {
		regresar !! aventar (
			este,

			// Si se trata de un selector posicional/relativo, comprueba la pertenencia al conjunto devuelto
			// entonces $("p:first").is("p:last") no devolverá verdadero para un documento con dos "p".
			tipo de selector === "cadena" && rneedsContext.test(selector)?
				jQuery(selector):
				seleccionador || [],
			FALSO
		).longitud;
	}
} );


// Inicializa un objeto jQuery


// Una referencia central a la raíz jQuery(documento)
var raízjQuery,

	// Una forma sencilla de comprobar cadenas HTML
	// Prioriza #id sobre <tag> para evitar XSS a través de location.hash (trac-9521)
	// Reconocimiento HTML estricto (trac-11290: debe comenzar con <)
	// Atajo simple #id mayúscula para velocidad
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = función (selector, contexto, raíz) {
		coincidencia de var, elem;

		// MANEJAR: $(""), $(nulo), $(indefinido), $(falso)
		si (!selector) {
			devolver esto;
		}

		// El método init() acepta un rootjQuery alternativo
		// entonces migrar puede soportar jQuery.sub (gh-2101)
		raíz = raíz || raízjQuery;

		// Manejar cadenas HTML
		if (tipo de selector === "cadena") {
			si (selector[ 0 ] === "<" &&
				selector[ selector.longitud - 1 ] === ">" &&
				selector.longitud >= 3 ) {

				// Suponemos que las cadenas que comienzan y terminan con <> son HTML y omiten la verificación de expresiones regulares
				partido = [nulo, selector, nulo];

			} demás {
				partido = rquickExpr.exec (selector);
			}

			// Haga coincidir html o asegúrese de que no se especifique ningún contexto para #id
			if (coincidencia && (coincidencia[ 1 ] || !context ) ) {

				// MANEJAR: $(html) -> $(matriz)
				si (coincidencia[ 1 ] ) {
					contexto = contexto instancia de jQuery? contexto[ 0 ] : contexto;

					// La opción para ejecutar scripts es verdadera para la compatibilidad con versiones anteriores
					// Permitir intencionalmente que se genere el error si parseHTML no está presente
					jQuery.merge( esto, jQuery.parseHTML(
						partido [1],
						contexto && contexto.nodeType? contexto.propietarioDocumento || contexto: documento,
						verdadero
					) );

					// MANEJAR: $(html, accesorios)
					if (rsingleTag.test(coincidencia[1]) && jQuery.isPlainObject(contexto)) {
						para (coincidencia en contexto) {

							// Las propiedades del contexto se llaman como métodos si es posible
							if (isFunction(este[partido])) {
								this[ coincidencia ]( contexto[ coincidencia ] );

							// ...y de lo contrario establecer como atributos
							} demás {
								this.attr(coincidencia, contexto[coincidencia]);
							}
						}
					}

					devolver esto;

				// MANEJAR: $(#id)
				} demás {
					elem = document.getElementById(coincidencia[ 2 ] );

					si (elemento) {

						// Inyecta el elemento directamente en el objeto jQuery
						esto[ 0 ] = elemento;
						esta.longitud = 1;
					}
					devolver esto;
				}

			// MANEJAR: $(expr, $(...))
			} más si (! contexto || contexto.jquery) {
				retorno (contexto || raíz). Buscar (selector);

			// MANEJAR: $(expr, contexto)
			// (que es equivalente a: $(context).find(expr)
			} demás {
				devolver this.constructor( contexto ).find( selector );
			}

		// MANEJAR: $(DOMElement)
		} más si (selector.tiponodo) {
			esto[ 0 ] = selector;
			esta.longitud = 1;
			devolver esto;

		// MANEJAR: $(función)
		// Acceso directo para documento listo
		} más si (isFunction(selector)) {
			devolver root.ready! == indefinido?
				raíz.listo (selector):

				// Ejecutar inmediatamente si listo no está presente
				selector(jQuery);
		}

		devolver jQuery.makeArray (selector, esto);
	};

// Da a la función init el prototipo jQuery para su posterior creación de instancias
init.prototipo = jQuery.fn;

// Inicializa la referencia central
rootjQuery = jQuery( documento );


var rparentsprev = /^(?:padres|prev(?:Hasta|Todos))/,

	// Métodos garantizados para producir un conjunto único al partir de un conjunto único
	garantizadoÚnico = {
		niños: cierto,
		contenido: verdadero,
		siguiente: cierto,
		anterior: verdadero
	};

jQuery.fn.extend({
	tiene: función (objetivo) {
		var objetivos = jQuery (objetivo, este),
			l = objetivos.longitud;

		devolver this.filter( función() {
			var i = 0;
			para (; yo < l; yo++) {
				if ( jQuery.contains (esto, objetivos [i])) {
					devolver verdadero;
				}
			}
		} );
	},

	más cercano: función (selectores, contexto) {
		var cur,
			yo = 0,
			l = esta.longitud,
			coincidente = [],
			objetivos = tipo de selectores! == "cadena" && jQuery (selectores);

		// Los selectores posicionales nunca coinciden, ya que no hay contexto de _selección_
		if (!rneedsContext.test(selectores)) {
			para (; yo < l; yo++) {
				for ( cur = this[ i ]; cur && cur !== contexto; cur = cur.parentNode ) {

					// Omitir siempre fragmentos de documentos
					if (cur.nodeType < 11 && (objetivos?
						objetivos.index( cur ) > -1 :

						// No pasar elementos que no sean a jQuery#find
						cur.tipodenodo === 1 &&
							jQuery.find.matchesSelector( cur, selectores ) ) ) {

						emparejado.push( cur );
						romper;
					}
				}
			}
		}

		devolver this.pushStack(matched.length > 1? jQuery.uniqueSort(matched): matched);
	},

	// Determinar la posición de un elemento dentro del conjunto.
	índice: función (elemento) {

		// Sin argumento, devuelve el índice en el padre
		si (!elem) {
			return (este[0] && este[0].parentNode)? this.first().prevAll().length : -1;
		}

		// Índice en el selector
		si (tipo de elemento === "cadena") {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Ubica la posición del elemento deseado
		devolver indexOf.call (esto,

			// Si recibe un objeto jQuery, se utiliza el primer elemento
			elem.jquery? elemento[ 0 ] : elemento
		);
	},

	agregar: función (selector, contexto) {
		devolver this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge (this.get(), jQuery (selector, contexto))
			)
		);
	},

	agregarBack: función (selector) {
		devolver this.add(selector == nulo?
			this.prevObject: this.prevObject.filter (selector)
		);
	}
} );

función hermano( cur, dir ) {
	mientras (( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	devolver cur;
}

jQuery.cada uno ({
	padre: función (elemento) {
		var padre = elem.parentNode;
		devolver padre && parent.nodeType! == 11? padre: nulo;
	},
	padres: función (elemento) {
		return dir(elem, "parentNode");
	},
	padresHasta: función (elem, _i, hasta) {
		return dir( elem, "parentNode", hasta);
	},
	siguiente: función (elemento) {
		devolver hermano( elem, "nextSibling" );
	},
	anterior: función (elemento) {
		devolver hermano( elem, "hermanoanterior");
	},
	siguienteTodos: función(elem) {
		return dir(elem, "siguienteHermano");
	},
	prevAll: función (elemento) {
		return dir( elem, "hermanoanterior");
	},
	siguienteHasta: función( elem, _i, hasta ) {
		return dir( elem, "nextSibling", hasta);
	},
	prevHasta: función (elem, _i, hasta) {
		return dir( elem, "hermanoanterior", hasta);
	},
	hermanos: función (elem) {
		devolver hermanos ((elem.parentNode || {}).firstChild, elem);
	},
	hijos: función (elemento) {
		devolver hermanos (elem.firstChild);
	},
	contenido: función (elemento) {
		si (elem.contentDocument! = nulo &&

			// Soporte: IE 11+
			// los elementos <objeto> sin atributo `datos` tienen un objeto
			// `contentDocument` con un prototipo `nulo`.
			getProto( elem.contentDocument ) ) {

			devolver elem.contentDocument;
		}

		// Compatibilidad: solo IE 9 - 11, solo iOS 7, solo navegador Android <= 4.3
		// Trata el elemento de plantilla como uno normal en navegadores que
		// no lo apoyo.
		if (nombrenodo(elem, "plantilla")) {
			elem = elem.content || elemento;
		}

		devolver jQuery.merge( [], elem.childNodes);
	}
}, función (nombre, fn) {
	jQuery.fn[nombre] = función(hasta, selector) {
		var coincidente = jQuery.map (esto, fn, hasta);

		if (nombre.slice(-5)!== "Hasta") {
			selector = hasta;
		}

		if (selector && tipo de selector === "cadena") {
			coincidente = jQuery.filter (selector, coincidente);
		}

		si (esta.longitud > 1) {

			// Eliminar duplicados
			if (! garantizadoUnico[ nombre ] ) {
				jQuery.uniqueSort(coincidente);
			}

			// Orden inverso para padres* y derivados anteriores
			si (rparentsprev.test(nombre)) {
				coincidente.reverse();
			}
		}

		devolver this.pushStack (coincidente);
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convertir opciones con formato de cadena en opciones con formato de objeto
función crearOpciones (opciones) {
	objeto var = {};
	jQuery.each( opciones.match( rnothtmlwhite ) || [], función( _, bandera ) {
		objeto[bandera] = verdadero;
	} );
	objeto de retorno;
}

/*
 * Cree una lista de devolución de llamadas utilizando los siguientes parámetros:
 *
 * opciones: una lista opcional de opciones separadas por espacios que cambiarán la forma
 * la lista de devolución de llamada se comporta como un objeto de opción más tradicional
 *
 * De forma predeterminada, una lista de devolución de llamadas actuará como una lista de devolución de llamadas de eventos y se puede
 * "despedido" varias veces.
 *
 * Posibles opciones:
 *
 * una vez: garantizará que la lista de devolución de llamadas solo se pueda activar una vez (como un Diferido)
 *
 * memoria: realizará un seguimiento de los valores anteriores y llamará a cualquier devolución de llamada agregada
 * después de que la lista se haya despedido inmediatamente con los últimos "memorizados"
 * valores (como un Diferido)
 *
 * único: garantizará que una devolución de llamada solo se pueda agregar una vez (sin duplicados en la lista)
 *
 * stopOnFalse: interrumpe las llamadas cuando una devolución de llamada devuelve falso
 *
 */
jQuery.Callbacks = función (opciones) {

	// Convierte opciones de formato de cadena a formato de objeto si es necesario
	// (primero verificamos el caché)
	opciones = tipo de opciones === "cadena"?
		crearOpciones(opciones):
		jQuery.extend ({}, opciones);

	var // Bandera para saber si la lista se está activando actualmente
		disparo,

		// Valor del último disparo para listas no olvidables
		memoria,

		// Marcar para saber si la lista ya fue activada
		despedido,

		// Bandera para evitar disparos
		bloqueado,

		// Lista de devolución de llamadas real
		lista = [],

		// Cola de datos de ejecución para listas repetibles
		cola = [],

		// Índice de devolución de llamada activa actualmente (modificado agregando/eliminando según sea necesario)
		índice de disparo = -1,

		// devoluciones de llamada de fuego
		fuego = función() {

			// Imponer un solo disparo
			bloqueado = bloqueado || opciones.una vez;

			// Ejecutar devoluciones de llamada para todas las ejecuciones pendientes,
			// respetando las anulaciones de triggerIndex y los cambios en el tiempo de ejecución
			despedido = despido = verdadero;
			para (; cola.longitud; índice de disparo = -1) {
				memoria = cola.shift();
				while ( ++firingIndex < lista.longitud ) {

					// Ejecutar devolución de llamada y comprobar si hay terminación anticipada
					if (lista[Índice de disparo].Aplicar(memoria[0], memoria[1]) === falso &&
						opciones.stopOnFalse) {

						// Salta al final y olvida los datos para que .add no se vuelva a activar
						índice de disparo = lista.longitud;
						memoria = falso;
					}
				}
			}

			// Olvidar los datos si hemos terminado con ellos
			si (!opciones.memoria) {
				memoria = falso;
			}

			despido = falso;

			// Limpiar si terminamos de disparar para siempre
			si (bloqueado) {

				// Mantener una lista vacía si tenemos datos para futuras llamadas de adición
				si (memoria) {
					lista = [];

				// De lo contrario, este objeto se gasta
				} demás {
					lista = "";
				}
			}
		},

		// Objeto de devoluciones de llamada reales
		yo = {

			// Agrega una devolución de llamada o una colección de devoluciones de llamada a la lista
			agregar: función() {
				si (lista) {

					// Si tenemos memoria de una ejecución anterior, debemos disparar después de agregar
					si (memoria &&! disparando) {
						índice de disparo = lista.longitud - 1;
						cola.push( memoria );
					}

					(función agregar(argumentos) {
						jQuery.cada uno (argumentos, función (_, arg) {
							si (isFunction( arg ) ) {
								if (!opciones.unique ||!self.tiene(arg)) {
									lista.push(arg);
								}
							} else if (arg && arg.length && toType(arg)!== "cadena") {

								// Inspeccionar recursivamente
								agregar(arg);
							}
						} );
					} )( argumentos );

					si (memoria &&! disparando) {
						fuego();
					}
				}
				devolver esto;
			},

			// Eliminar una devolución de llamada de la lista
			eliminar: función() {
				jQuery.each( argumentos, función( _, arg ) {
					índice var;
					mientras ((índice = jQuery.inArray(arg, lista, índice)) > -1) {
						lista.splice(índice, 1);

						// Manejar índices de disparo
						if (índice <= índice de disparo) {
							índice de disparo--;
						}
					}
				} );
				devolver esto;
			},

			// Comprobar si una devolución de llamada determinada está en la lista.
			// Si no se proporciona ningún argumento, devuelve si la lista tiene devoluciones de llamada adjuntas o no.
			tiene: función (fn) {
				devolver fn?
					jQuery.inArray( fn, lista ) > -1 :
					lista.longitud > 0;
			},

			// Elimina todas las devoluciones de llamada de la lista
			vacío: función() {
				si (lista) {
					lista = [];
				}
				devolver esto;
			},

			// Deshabilitar .fire y .add
			// Cancelar cualquier ejecución actual/pendiente
			// Borrar todas las devoluciones de llamada y valores
			desactivar: función() {
				bloqueado = cola = [];
				lista = memoria = "";
				devolver esto;
			},
			deshabilitado: función() {
				devolver! lista;
			},

			// Deshabilitar .fire
			// También deshabilitamos .add a menos que tengamos memoria (ya que no tendría ningún efecto)
			// Cancelar cualquier ejecución pendiente
			bloquear: función() {
				bloqueado = cola = [];
				if (!memoria &&!disparando) {
					lista = memoria = "";
				}
				devolver esto;
			},
			bloqueado: función() {
				volver!! bloqueado;
			},

			// Llama a todas las devoluciones de llamada con el contexto y los argumentos dados
			fireWith: función (contexto, argumentos) {
				si (! bloqueado) {
					argumentos = argumentos || [];
					args = [contexto, args.slice? args.slice() : argumentos ];
					cola.push( argumentos );
					si (!disparando) {
						fuego();
					}
				}
				devolver esto;
			},

			// Llama a todas las devoluciones de llamada con los argumentos dados.
			fuego: función() {
				self.fireWith (esto, argumentos);
				devolver esto;
			},

			//Para saber si los callbacks ya han sido llamados al menos una vez
			despedido: función() {
				volver!! despedido;
			}
		};

	regresar a uno mismo;
};


función Identidad( v ) {
	volver v;
}
función Lanzador( ex ) {
	tirar ex;
}

función adoptarValor (valor, resolver, rechazar, noValor) {
	método var;

	intentar {

		// Comprobar primero el aspecto de la promesa para privilegiar el comportamiento sincrónico
		if (valor && esFunción((método = valor.promesa))) {
			método.llamada (valor). Hecho (resolver). Fallo (rechazar);

		// Otros posibles
		} else if (valor && esFunción((método = valor.entonces))) {
			método.llamada (valor, resolver, rechazar);

		// Otros no-entonables
		} demás {

			// Controla los argumentos de `resolve` permitiendo que Array#slice convierta el valor booleano `noValue` a un número entero:
			// * falso: [ valor ].slice( 0 ) => resolver( valor )
			// * verdadero: [ valor ].slice( 1 ) => resolver()
			resolver.apply(indefinido, [valor].slice(noValue));
		}

	// Para Promesas/A+, convierte excepciones en rechazos
	// Dado que jQuery.when no desenvuelve los elementos, podemos omitir las comprobaciones adicionales que aparecen en
	// Diferido#luego para suprimir condicionalmente el rechazo.
	} captura (valor) {

		// Soporte: Android 4.0 solamente
		// Las funciones en modo estricto invocadas sin .call/.apply obtienen el contexto del objeto global
		rechazar.aplicar (indefinido, [valor]);
	}
}

jQuery.extender ({

	Diferido: función (func) {
		var tuplas = [

				// acción, agregar oyente, devoluciones de llamada,
				// ... .luego manejadores, índice de argumentos, [estado final]
				[ "notificar", "progreso", jQuery.Callbacks( "memoria"),
					jQuery.Callbacks ("memoria"), 2],
				[ "resolver", "hecho", jQuery.Callbacks ("una vez en la memoria"),
					jQuery.Callbacks( "una vez en memoria"), 0, "resuelto" ],
				[ "rechazar", "fallar", jQuery.Callbacks ("una vez en la memoria"),
					jQuery.Callbacks ("una vez en la memoria"), 1, "rechazado"]
			],
			estado = "pendiente",
			promesa = {
				función estatal() {
					estado de retorno;
				},
				siempre: función() {
					diferido.hecho (argumentos). Fail (argumentos);
					devolver esto;
				},
				"captura": función (función) {
					devolver promesa.entonces (nulo, fn);
				},

				// Mantener la tubería para compatibilidad con versiones anteriores
				tubería: función( /* fnDone, fnFail, fnProgress */ ) {
					var fns = argumentos;

					devolver jQuery.Deferred( función( nuevoDefer ) {
						jQuery.each( tuplas, función( _i, tupla ) {

							// Asigna tuplas (progreso, hecho, falla) a argumentos (hecho, falla, progreso)
							var fn = isFunction( fns[ tupla[ 4 ] ] ) && fns[ tupla[ 4 ] ];

							// deferred.progress(function() { enlazar a newDefer o newDefer.notify })
							// deferred.done(function() { enlazar a newDefer o newDefer.resolve })
							// deferred.fail(function() { enlazar a newDefer o newDefer.reject })
							diferido[ tupla[ 1 ] ]( función() {
								var devuelto = fn && fn.apply (esto, argumentos);
								si (devuelto && esFunción (devuelto.promesa)) {
									promesa devuelta ()
										.progreso( nuevoAplazar.notificar )
										.hecho (nuevoDefer.resolve)
										.fail( nuevoDefer.reject );
								} demás {
									nuevoAplazar[ tupla[ 0 ] + "Con" ](
										este,
										¿fn? [devuelto]: argumentos
									);
								}
							} );
						} );
						fns = nulo;
					} ).promesa();
				},
				entonces: función (onFulfilled, onRejected, onProgress) {
					var profundidadmáx = 0;
					función resolver (profundidad, diferido, controlador, especial) {
						función de retorno() {
							var eso = esto,
								argumentos = argumentos,
								podríaTirar = función() {
									var regresó, entonces;

									// Soporte: Promesas/A+ sección 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignora los intentos de doble resolución
									si (profundidad <maxProfundidad) {
										devolver;
									}

									devuelto = handler.apply (eso, argumentos);

									// Soporte: Promesas/A+ sección 2.3.1
									// https://promisesaplus.com/#point-48
									si (devuelto === promesa.diferida()) {
										throw new TypeError( "Autoresolución entoncesable");
									}

									// Soporte: Promesas/A+ secciones 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Recupera `entonces` solo una vez
									entonces = devuelto &&

										// Soporte: Promesas/A+ sección 2.3.4
										// https://promisesaplus.com/#point-64
										// Solo verifica la capacidad de los objetos y funciones
										( tipo de retorno === "objeto" ||
											tipo de retorno === "función") &&
										regresó.luego;

									// Maneja un entoncesable devuelto
									si (esFunción (entonces)) {

										// Los procesadores especiales (notificar) solo esperan la resolución
										si (especial) {
											luego llame(
												regresó,
												resolver (maxDepth, diferido, Identidad, especial),
												resolver (maxDepth, diferido, lanzador, especial)
											);

										// Los procesadores normales (resolver) también se conectan al progreso
										} demás {

											// ...e ignorar los valores de resolución anteriores
											profundidad máxima++;

											luego llame(
												regresó,
												resolver (maxDepth, diferido, Identidad, especial),
												resolver (maxDepth, diferido, lanzador, especial),
												resolver( maxDepth, diferido, Identidad,
													diferido.notificar con)
											);
										}

									// Maneja todos los demás valores devueltos
									} demás {

										// Sólo los controladores sustitutos pasan el contexto
										// y múltiples valores (comportamiento no especificado)
										if (controlador! == Identidad) {
											eso = indefinido;
											argumentos = [devuelto];
										}

										// Procesar los valores
										// El proceso predeterminado es resolver
										( especial || diferido.resolveWith )( eso, args );
									}
								},

								// Sólo los procesadores normales (resolver) detectan y rechazan excepciones
								proceso = especial?
									podría tirar:
									función() {
										intentar {
											podríaThrow();
										} atrapar (e) {

											si (jQuery.Deferred.exceptionHook) {
												jQuery.Deferred.exceptionHook( e,
													proceso.error);
											}

											// Soporte: Promesas/A+ sección 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignorar las excepciones posteriores a la resolución
											si (profundidad + 1 >= maxProfundidad) {

												// Sólo los controladores sustitutos pasan el contexto
												// y múltiples valores (comportamiento no especificado)
												if (controlador! == Lanzador) {
													eso = indefinido;
													argumentos = [ e ];
												}

												diferido.rejectWith (eso, argumentos);
											}
										}
									};

							// Soporte: Promesas/A+ sección 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Resolver las promesas inmediatamente para evitar el falso rechazo de
							// errores posteriores
							si (profundidad) {
								proceso();
							} demás {

								// Llama a un enlace opcional para registrar el error, en caso de excepción
								// ya que de lo contrario se pierde cuando la ejecución se vuelve asíncrona
								si (jQuery.Deferred.getErrorHook) {
									proceso.error = jQuery.Deferred.getErrorHook();

								// El alias obsoleto de lo anterior. Si bien el nombre sugiere
								// devolviendo la pila, no una instancia de error, jQuery simplemente pasa
								// directamente a `console.warn` para que ambos funcionen; una instancia
								// simplemente coopera mejor con los mapas fuente.
								} más si (jQuery.Deferred.getStackHook) {
									proceso.error = jQuery.Deferred.getStackHook();
								}
								ventana.setTimeout(proceso);
							}
						};
					}

					devolver jQuery.Deferred( función( nuevoDefer ) {

						// progreso_handlers.add(...)
						tuplas[ 0 ][ 3 ].add(
							resolver(
								0,
								nuevoaplazar,
								isFunction(onProgress)?
									en progreso :
									Identidad,
								nuevoDefer.notifyWith
							)
						);

						// cumplido_handlers.add(...)
						tuplas[ 1 ][ 3 ].add(
							resolver(
								0,
								nuevoaplazar,
								isFunction(onFulfilled)?
									en cumplimiento:
									Identidad
							)
						);

						// manejadores_rechazados.add(...)
						tuplas[ 2 ][ 3 ].add(
							resolver(
								0,
								nuevoaplazar,
								isFunction(onRejected)?
									enRechazado:
									Lanzador
							)
						);
					} ).promesa();
				},

				// Obtener una promesa para este diferido
				// Si se proporciona obj, el aspecto de promesa se agrega al objeto
				promesa: función (obj) {
					devolver objeto! = nulo? jQuery.extend(obj, promesa): promesa;
				}
			},
			diferido = {};

		// Agregar métodos específicos de la lista
		jQuery.each( tuplas, función( i, tupla ) {
			lista var = tupla[ 2 ],
				cadenaestado = tupla[ 5 ];

			// promesa.progreso = lista.agregar
			// promesa.hecho = lista.agregar
			// promesa.fallo = lista.agregar
			promesa[ tupla[ 1 ] ] = lista.add;

			// Manejar el estado
			si (cadena de estado) {
				lista.add(
					función() {

						// estado = "resuelto" (es decir, cumplido)
						// estado = "rechazado"
						estado = cadena de estado;
					},

					// devoluciones de llamada_rechazadas.disable
					// devoluciones de llamadas cumplidas.disable
					tuplas[ 3 - i ][ 2 ].disable,

					// manejadores_rechazados.disable
					// cumplido_handlers.disable
					tuplas[ 3 - i ][ 3 ].disable,

					// progreso_callbacks.lock
					tuplas[ 0 ][ 2 ].bloqueo,

					// progreso_handlers.lock
					tuplas[ 0 ][ 3 ].bloquear
				);
			}

			// progreso_handlers.fire
			// cumplido_handlers.fire
			// rechazados_handlers.fire
			lista.add(tupla[ 3 ].fuego );

			// diferido.notificar = función() { diferido.notificarCon(...) }
			// diferido.resolve = función() { diferido.resolveWith(...) }
			// rechazo.diferido = función() { rechazo.diferidoCon(...) }
			diferido[ tupla[ 0 ] ] = función() {
				diferido[ tupla[ 0 ] + "Con" ]( esto === diferido ? indefinido: esto, argumentos );
				devolver esto;
			};

			// diferido.notifyWith = lista.fireWith
			// diferido.resolveWith = lista.fireWith
			// diferido.rejectWith = lista.fireWith
			diferido[ tupla[ 0 ] + "Con" ] = list.fireWith;
		} );

		//Hacer una promesa del diferido
		promesa.promesa(diferida);

		// Llama a la función dada si la hay
		si (función) {
			func.call(diferido, diferido);
		}

		// ¡Todo listo!
		devolución diferida;
	},

	// ayudante diferido
	cuando: función (valor único) {
		var

			// recuento de subordinados incompletos
			restante = argumentos.longitud,

			// recuento de argumentos no procesados
			yo = restante,

			// datos de cumplimiento subordinados
			resolverContexts = Matriz(i),
			resolverValues ​​= segmento.call (argumentos),

			// el primario Diferido
			primario = jQuery.Deferred(),

			// fábrica de devolución de llamada subordinada
			actualizarFunc = función (i) {
				función de retorno (valor) {
					resolverContexts[i] = esto;
					resolverValues[ i ] = argumentos.longitud > 1 ? rebanada.call (argumentos): valor;
					si (!(-restante)) {
						primario.resolveWith(resolveContexts, resolveValues);
					}
				};
			};

		// Se adoptan argumentos únicos y vacíos como Promise.resolve
		si (restante <= 1) {
			adoptarValue (valor único, primario.hecho (actualizarFunc (i)). resolver, primario.rechazar,
				!restante );

			// Utilice .then() para desenvolver los elementos secundarios (cf. gh-3000)
			if (primario.estado() === "pendiente" ||
				isFunction( resolverValues[ i ] && resolverValues[ i ].luego ) ) {

				devolver primario.entonces();
			}
		}

		// Se agregan múltiples argumentos como los elementos de la matriz Promise.all
		mientras yo-- ) {
			adoptarValue( resolverValues[ i ], updateFunc( i ), primario.reject );
		}

		devolver primaria.promesa();
	}
} );


// Generalmente indican un error del programador durante el desarrollo,
// advertir sobre ellos lo antes posible en lugar de tragarlos de forma predeterminada.
var rerrorNames = /^(Eval|Interno|Rango|Referencia|Sintaxis|Tipo|URI)Error$/;

// Si se define `jQuery.Deferred.getErrorHook`, `asyncError` es un error
// capturado antes de la barrera asíncrona para obtener la causa del error original
// que de otro modo podría estar oculto.
jQuery.Deferred.exceptionHook = función (error, asyncError) {

	// Soporte: IE 8 - 9 solamente
	// La consola existe cuando las herramientas de desarrollo están abiertas, lo que puede ocurrir en cualquier momento
	if (ventana.console && ventana.console.warn && error && rerrorNames.test(error.nombre)) {
		window.console.warn( "jQuery.Excepción diferida: " + error.message,
			error.stack, asyncError);
	}
};




jQuery.readyException = función (error) {
	ventana.setTimeout( función() {
		error de lanzamiento;
	} );
};




// El diferido usado en DOM listo
var readyList = jQuery.Deferred();

jQuery.fn.ready = función( fn ) {

	lista lista
		.entonces( fn )

		// Envuelve jQuery.readyException en una función para que la búsqueda
		// ocurre en el momento del manejo de errores en lugar de la devolución de llamada
		// registro.
		.catch( función( error ) {
			jQuery.readyException (error);
		} );

	devolver esto;
};

jQuery.extender ({

	// ¿Está el DOM listo para usarse? Se establece en verdadero una vez que ocurre.
	está listo: falso,

	// Un contador para rastrear cuántos elementos esperar antes
	// se activa el evento listo. Ver trac-6781
	listoEspera: 1,

	// Manejar cuando el DOM esté listo
	listo: función (espera) {

		// Cancelar si hay retenciones pendientes o ya estamos listos
		si (esperar === verdadero? --jQuery.readyWait: jQuery.isReady) {
			devolver;
		}

		//Recuerda que el DOM está listo
		jQuery.isReady = verdadero;

		// Si se activa un evento DOM Ready normal, disminuye y espera si es necesario
		si (espera! == verdadero && --jQuery.readyWait > 0) {
			devolver;
		}

		// Si hay funciones vinculadas, ejecutar
		readyList.resolveWith( documento, [ jQuery ] );
	}
} );

jQuery.ready.then = listalista.entonces;

// El controlador de eventos listo y el método de autolimpieza
función completada() {
	document.removeEventListener ("DOMContentLoaded", completado);
	window.removeEventListener ("cargar", completado);
	jQuery.listo();
}

// Captura casos donde se llama a $(document).ready()
// después de que ya haya ocurrido el evento del navegador.
// Soporte: IE <=9 - 10 solamente
// El IE antiguo a veces indica "interactivo" demasiado pronto
if ( document.readyState === "completo" ||
	(document.readyState!== "cargando" &&!document.documentElement.doScroll)) {

	// Manéjelo de forma asincrónica para permitir que los scripts tengan la oportunidad de retrasar la preparación
	ventana.setTimeout(jQuery.ready);

} demás {

	// Usa la práctica devolución de llamada de evento
	document.addEventListener ("DOMContentLoaded", completado);

	// Una alternativa a window.onload, que siempre funcionará
	window.addEventListener ("cargar", completado);
}




// Método multifuncional para obtener y establecer valores de una colección
// El/los valor/es se pueden ejecutar opcionalmente si es una función
var acceso = función (elementos, fn, clave, valor, encadenable, vacíoGet, sin formato) {
	var i = 0,
		len = elementos.longitud,
		masivo = clave == nulo;

	// Establece muchos valores
	if (toType(clave) === "objeto") {
		encadenable = verdadero;
		para (yo en clave) {
			acceso (elems, fn, i, clave [i], verdadero, vacíoGet, raw);
		}

	// Establece un valor
	} más si (valor! == indefinido) {
		encadenable = verdadero;

		si (! esFunción (valor)) {
			crudo = verdadero;
		}

		si (a granel) {

			// Las operaciones masivas se ejecutan en todo el conjunto
			si (crudo) {
				fn.call(elementos, valor);
				fn = nulo;

			// ...excepto cuando se ejecutan valores de función
			} demás {
				a granel = fn;
				fn = función (elem, _clave, valor) {
					devolver Bulk.call (jQuery (elem), valor);
				};
			}
		}

		si ( fn ) {
			para (; yo < len; yo++) {
				fn(
					elementos [i], clave, sin formato?
						valor :
						valor.call( elementos[ i ], i, fn( elementos[ i ], clave ) )
				);
			}
		}
	}

	si (encadenable) {
		elementos de retorno;
	}

	// Obtiene
	si (a granel) {
		return fn.call(elementos);
	}

	devolver len? fn(elementos[ 0 ], clave ): vacíoObtener;
};


// Coincide con la cadena discontinua para camelizar
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([az])/g;

// Usado por camelCase como devolución de llamada para reemplazar()
función fcamelCase( _todos, letra ) {
	devolver letra.toUpperCase();
}

// Convertir guiones a camelCase; utilizado por el css y los módulos de datos
// Soporte: IE <=9 - 11, Edge 12 - 15
// Microsoft olvidó aumentar su prefijo de proveedor (trac-9572)
función camelCase (cadena) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var aceptarDatos = función (propietario) {

	// Acepta sólo:
	// - Nodo
	// - Nodo.ELEMENT_NODE
	// - Nodo.DOCUMENT_NODE
	// - Objeto
	// - Cualquier
	devolver propietario.nodeType === 1 || propietario.tipodenodo === 9 || !( +propietario.tipodenodo );
};




función Datos() {
	this.expando = jQuery.expando + Datos.uid++;
}

Datos.uid = 1;

Datos.prototipo = {

	caché: función (propietario) {

		// Comprobar si el objeto propietario ya tiene un caché
		valor var = propietario[ this.expando ];

		// Si no, crea uno
		si (! valor) {
			valor = {};

			// Podemos aceptar datos para nodos que no son elementos en navegadores modernos,
			// pero no deberíamos, ver trac-8335.
			// Siempre devuelve un objeto vacío.
			if (aceptar datos (propietario)) {

				// Si es un nodo que es poco probable que se encadene o se realice un bucle
				// usar asignación simple
				si (propietario.tipodenodo) {
					propietario[ this.expando ] = valor;

				// De lo contrario, asegúrelo en una propiedad no enumerable
				// configurable debe ser verdadero para permitir que la propiedad sea
				// eliminado cuando se eliminan los datos
				} demás {
					Object.defineProperty( propietario, this.expando, {
						valor: valor,
						configurable: verdadero
					} );
				}
			}
		}

		valor de retorno;
	},
	conjunto: función (propietario, datos, valor) {
		apoyo var,
			caché = this.cache (propietario);

		// Identificador: [propietario, clave, valor] args
		// Utilice siempre la clave camelCase (gh-2257)
		if (tipo de datos === "cadena") {
			caché[ camelCase( datos ) ] = valor;

		// Identificador: [propietario, {propiedades}] args
		} demás {

			// Copia las propiedades una por una al objeto de caché
			para (apoyo en datos) {
				caché[ camelCase( prop ) ] = datos [ prop ];
			}
		}
		devolver caché;
	},
	obtener: función (propietario, clave) {
		tecla de retorno === indefinida?
			this.cache (propietario):

			// Utilice siempre la clave camelCase (gh-2257)
			propietario[ this.expando ] && propietario[ this.expando ][ camelCase( clave ) ];
	},
	acceso: función (propietario, clave, valor) {

		// En los casos en que:
		//
		// 1. No se especificó ninguna clave
		// 2. Se especificó una clave de cadena, pero no se proporcionó ningún valor
		//
		// Toma la ruta de "lectura" y permite que el método get determine
		// qué valor devolver, respectivamente:
		//
		// 1. Todo el objeto de caché
		// 2. Los datos almacenados en la clave.
		//
		si (clave === indefinido ||
				((clave && tipo de clave === "cadena") && valor === indefinido)) {

			devolver this.get (propietario, clave);
		}

		// Cuando la clave no es una cadena, o es tanto una clave como un valor
		// se especifican, establecen o amplían (objetos existentes) con:
		//
		// 1. Un objeto de propiedades
		// 2. Una clave y un valor
		//
		this.set (propietario, clave, valor);

		// Dado que la ruta "establecida" puede tener dos posibles puntos de entrada
		// devuelve los datos esperados según la ruta que se tomó[*]
		valor de retorno! == indefinido? valor: clave;
	},
	eliminar: función (propietario, clave) {
		var i,
			caché = propietario[ this.expando ];

		si (caché === indefinido) {
			devolver;
		}

		si (clave! == indefinido) {

			// Admite una matriz o una cadena de claves separadas por espacios
			si (Array.isArray (clave)) {

				// Si la clave es una matriz de claves...
				// Siempre configuramos claves camelCase, así que elimínelas.
				clave = clave.map( camelCase );
			} demás {
				clave = camelCase (clave);

				// Si existe una clave con espacios, úsala.
				// De lo contrario, crea una matriz haciendo coincidir espacios que no sean en blanco
				clave = clave en caché?
					[ llave ] :
					(key.match(rnothtmlwhite) || []);
			}

			i = clave.longitud;

			mientras yo-- ) {
				eliminar caché [clave [i]];
			}
		}

		// Elimina el expando si no hay más datos
		if (clave === indefinido || jQuery.isEmptyObject(caché)) {

			// Soporte: Chrome <=35 - 45
			// El rendimiento de Webkit y Blink se ve afectado al eliminar propiedades
			// desde nodos DOM, por lo que se establece en indefinido en su lugar
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (error restringido)
			si (propietario.tipodenodo) {
				propietario[ this.expando ] = indefinido;
			} demás {
				eliminar propietario[ this.expando ];
			}
		}
	},
	hasData: función (propietario) {
		var cache = propietario[ this.expando ];
		devolver caché! == indefinido &&! jQuery.isEmptyObject (caché);
	}
};
var datosPriv = nuevos datos();

var dataUser = nuevos datos();



// Resumen de implementación
//
// 1. Aplicar la superficie API y la compatibilidad semántica con la rama 1.9.x
// 2. Mejorar la mantenibilidad del módulo reduciendo el almacenamiento
// caminos a un solo mecanismo.
// 3. Utilice el mismo mecanismo único para admitir datos "privados" y de "usuario".
// 4. _Nunca_ exponga datos "privados" al código de usuario (TODO: Drop _data, _removeData)
// 5. Evite exponer detalles de implementación en objetos de usuario (por ejemplo, propiedades expando)
// 6. Proporcionar una ruta clara para la actualización de la implementación a WeakMap en 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[AZ]/g;

función obtenerDatos(datos) {
	si (datos === "verdadero") {
		devolver verdadero;
	}

	si (datos === "falso") {
		falso retorno;
	}

	si (datos === "nulo") {
		devolver nulo;
	}

	// Sólo convierte a un número si no cambia la cadena
	si (datos === +datos + "") {
		devolver +datos;
	}

	si (rbrace.test(datos)) {
		devolver JSON.parse (datos);
	}

	datos de devolución;
}

función dataAttr (elemento, clave, datos) {
	nombre de la variable;

	// Si no se encontró nada internamente, intenta recuperarlo
	// datos del atributo HTML5 data-*
	if (datos === indefinido && elem.nodeType === 1) {
		nombre = "datos-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		datos = elem.getAttribute( nombre );

		if (tipo de datos === "cadena") {
			intentar {
				datos = obtenerDatos(datos);
			} atrapar (e) {}

			//Asegúrate de configurar los datos para que no se cambien más tarde
			dataUser.set (elem, clave, datos);
		} demás {
			datos = indefinido;
		}
	}
	datos de devolución;
}

jQuery.extender ({
	tieneDatos: función (elemento) {
		devolver datosUser.hasData( elem ) || datosPriv.hasData(elem);
	},

	datos: función (elemento, nombre, datos) {
		devolver datosUsuario.acceso(elem, nombre, datos);
	},

	eliminarDatos: función (elemento, nombre) {
		dataUser.remove(elem, nombre);
	},

	// TODO: Ahora que todas las llamadas a _data y _removeData han sido reemplazadas
	// con llamadas directas a métodos dataPriv, estos pueden quedar obsoletos.
	_data: función (elemento, nombre, datos) {
		devolver datosPriv.access(elem, nombre, datos);
	},

	_removeData: función (elemento, nombre) {
		dataPriv.remove(elem, nombre);
	}
} );

jQuery.fn.extend({
	datos: función (clave, valor) {
		var i, nombre, datos,
			elemento = esto [0],
			atributos = elem && elem.attributes;

		// Obtiene todos los valores
		si (clave === indefinido) {
			si (esta.longitud) {
				datos = usuario de datos.get (elem);

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs") ) {
					i = atributos.longitud;
					mientras yo-- ) {

						// Soporte: IE 11 solamente
						// Los elementos attrs pueden ser nulos (trac-14894)
						si (atributos[i]) {
							nombre = atributos[ i ].nombre;
							if (nombre.indexOf("datos-") === 0) {
								nombre = camelCase( nombre.slice( 5 ) );
								dataAttr( elemento, nombre, datos[ nombre ] );
							}
						}
					}
					dataPriv.set (elem, "hasDataAttrs", verdadero);
				}
			}

			datos de devolución;
		}

		// Establece múltiples valores
		if (tipo de clave === "objeto") {
			devolver esto.cada uno (función() {
				dataUser.set (esto, clave);
			} );
		}

		devolver acceso (esto, función (valor) {
			datos variables;

			// El objeto jQuery que llama (coincidencias de elementos) no está vacío
			// (y por lo tanto tiene un elemento que aparece en este [0]) y el
			// El parámetro `value` no estaba indefinido. Un objeto jQuery vacío
			// resultará en `indefinido` para elem = this[ 0 ] que
			// lanza una excepción si se intenta leer un caché de datos.
			if (elemento && valor === indefinido) {

				//Intento obtener datos del caché
				// La clave siempre será camelCased en Datos
				datos = dataUser.get (elem, clave);
				si (datos! == indefinido) {
					datos de devolución;
				}

				// Intenta "descubrir" los datos en
				// datos personalizados HTML5-* atributos
				datos = dataAttr( elem, clave );
				si (datos! == indefinido) {
					datos de devolución;
				}

				// Lo intentamos mucho, pero los datos no existen.
				devolver;
			}

			// Establece los datos...
			this.each( función() {

				// Siempre guardamos la clave camelCased
				dataUser.set (esto, clave, valor);
			} );
		}, nulo, valor, argumentos.longitud > 1, nulo, verdadero);
	},

	eliminarDatos: función (tecla) {
		devolver esto.cada uno (función() {
			dataUser.remove(esto, clave);
		} );
	}
} );


jQuery.extender ({
	cola: función (elemento, tipo, datos) {
		cola var;

		si (elemento) {
			tipo = (tipo || "fx" ) + "cola";
			cola = dataPriv.get (elem, tipo);

			// Acelera la salida de la cola saliendo rápidamente si esto es solo una búsqueda
			si (datos) {
				si (! cola || Array.isArray (datos)) {
					cola = dataPriv.access (elem, tipo, jQuery.makeArray (datos));
				} demás {
					cola.push(datos);
				}
			}
			cola de retorno || [];
		}
	},

	quitar de la cola: función (elemento, tipo) {
		tipo = tipo || "fx";

		cola var = jQuery.queue (elem, tipo),
			startLength = cola.longitud,
			fn = cola.shift(),
			ganchos = jQuery._queueHooks (elem, tipo),
			siguiente = función() {
				jQuery.dequeue(elem, tipo);
			};

		// Si la cola FX está fuera de la cola, elimina siempre el centinela de progreso
		si (fn === "en progreso") {
			fn = cola.shift();
			inicioLongitud--;
		}

		si ( fn ) {

			// Agrega un centinela de progreso para evitar que la cola fx sea
			// quitado automáticamente de la cola
			si (escriba === "fx") {
				cola.unshift( "en progreso" );
			}

			// Borrar la última función de parada de cola
			eliminar ganchos.stop;
			fn.call(elem, siguiente, ganchos);
		}

		if (! longitud inicial && ganchos) {
			ganchos.empty.fire();
		}
	},

	// No público: genera un objeto queueHooks o devuelve el actual
	_queueHooks: función (elemento, tipo) {
		var clave = tipo + "queueHooks";
		devolver datosPriv.get (elem, clave) || datosPriv.acceso (elem, clave, {
			vacío: jQuery.Callbacks ("una vez en la memoria").add( function() {
				dataPriv.remove( elem, [tipo + "cola", clave]);
			} )
		} );
	}
} );

jQuery.fn.extend({
	cola: función (tipo, datos) {
		establecidor var = 2;

		if (tipo de tipo! == "cadena") {
			datos = tipo;
			tipo = "fx";
			setter--;
		}

		si (argumentos.longitud <setter) {
			devolver jQuery.queue (este [0], tipo);
		}

		datos de retorno === indefinidos?
			este :
			this.each( función() {
				var cola = jQuery.queue (esto, tipo, datos);

				// Asegurar un enlace para esta cola
				jQuery._queueHooks (esto, escriba);

				if (tipo === "fx" && cola[ 0 ] !== "en progreso") {
					jQuery.dequeue (esto, tipo);
				}
			} );
	},
	quitar de la cola: función (tipo) {
		devolver esto.cada uno (función() {
			jQuery.dequeue (esto, tipo);
		} );
	},
	clearQueue: función (tipo) {
		devolver this.queue( tipo || "fx", [] );
	},

	// Obtener una promesa resuelta cuando colas de cierto tipo
	// se vacían (fx es el tipo por defecto)
	promesa: función (tipo, obj) {
		var tmp,
			contar = 1,
			aplazar = jQuery.Deferred(),
			elementos = esto,
			i = esta.longitud,
			resolver = función() {
				si (!(-count)) {
					aplazar.resolveWith(elementos, [elementos]);
				}
			};

		if (tipo de tipo! == "cadena") {
			objeto = tipo;
			tipo = indefinido;
		}
		tipo = tipo || "fx";

		mientras yo-- ) {
			tmp = dataPriv.get(elementos[i], tipo + "queueHooks");
			si (tmp && tmp.vacío) {
				contar++;
				tmp.empty.add( resolver );
			}
		}
		resolver();
		devolver aplazar.promesa (obj);
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).fuente;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([az%]*)$", "i" );


var cssExpand = [ "Arriba", "Derecha", "Abajo", "Izquierda" ];

var documentElement = document.documentElement;



	var está adjunto = función (elem) {
			return jQuery.contains( elem.ownerDocument, elem );
		},
		compuesto = {compuesto: verdadero};

	// Soporte: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 solamente
	// Verifica el archivo adjunto a través de los límites del DOM oculto cuando sea posible (gh-3504)
	// Soporte: iOS 10.0-10.2 solamente
	// Las primeras versiones de iOS 10 admiten `attachShadow` pero no `getRootNode`,
	// lo que lleva a errores. Necesitamos verificar "getRootNode".
	si (documentElement.getRootNode) {
		está adjunto = función (elemento) {
			devolver jQuery.contains( elem.ownerDocument, elem ) ||
				elem.getRootNode(compuesto) === elem.ownerDocument;
		};
	}
var está oculto dentro del árbol = función (elem, el) {

		// isHiddenWithinTree podría llamarse desde la función jQuery#filter;
		// en ese caso, el elemento será el segundo argumento
		elemento = el || elemento;

		// El estilo en línea triunfa sobre todo
		devolver elem.style.display === "ninguno" ||
			elem.estilo.display === "" &&

			// De lo contrario, verifica el estilo calculado
			// Soporte: Firefox <=43 - 45
			// Los elementos desconectados pueden tener visualización calculada: ninguna, así que primero confirme que el elemento está
			// en el documento.
			está adjunto (elemento) &&

			jQuery.css( elem, "pantalla") === "ninguno";
	};



función ajustarCSS(elem, prop, valueParts, interpolación) {
	var ajustado, escala,
		iteraciones máximas = 20,
		valoractual = interpolación?
			función() {
				devolver interpolación.cur();
			} :
			función() {
				devolver jQuery.css(elem, prop, "");
			},
		inicial = valoractual(),
		unidad = valorPartes && valorPartes[ 3 ] || (jQuery.cssNumber[prop]? "": "px"),

		// Se requiere calcular el valor inicial para posibles discrepancias de unidades
		unidadIninicial = elem.tiponodo &&
			( jQuery.cssNumber[ prop ] || unidad !== "px" && +inicial ) &&
			rcssNum.exec(jQuery.css(elem, prop));

	if (unidadEnInicial && UnidadInicial[3]!== unidad) {

		// Soporte: Firefox <=54
		// Reducir a la mitad el valor objetivo de la iteración para evitar interferencias de los límites superiores de CSS (gh-2144)
		inicial = inicial / 2;

		// Unidades de confianza reportadas por jQuery.css
		unidad = unidad || inicialEnUnidad[ 3 ];

		// Aproximación iterativa desde un punto de partida distinto de cero
		inicialEnUnidad = +inicial || 1;

		mientras (maxIterations--) {

			// Evaluar y actualizar nuestra mejor suposición (duplicar las suposiciones que se ponen a cero).
			// Finaliza si la escala es igual o cruza 1 (haciendo que el producto antiguo*nuevo no sea positivo).
			jQuery.style (elem, prop, inicialInUnit + unidad);
			if ((1 - escala) * (1 - (escala = valoractual() / inicial || 0.5) ) <= 0 ) {
				iteraciones máximas = 0;
			}
			inicialInUnit = inicialInUnit / escala;

		}

		UnidadEnInicial = UnidadEnInicial * 2;
		jQuery.style (elem, prop, inicialInUnit + unidad);

		// Asegúrate de actualizar las propiedades de interpolación más adelante
		valorPartes = valorPartes || [];
	}

	si (valorPartes) {
		UnidadEnInicial = +UnidadEnInicial || +inicial || 0;

		// Aplicar desplazamiento relativo (+=/-=) si se especifica
		ajustado = valorPartes[ 1 ] ?
			unidadEnInicial + (partesvalor[1] + 1) * partesvalor[2]:
			+valorPartes[ 2 ];
		si (entre) {
			interpolación.unidad = unidad;
			interpolación.start = inicialEnUnidad;
			tween.end = ajustado;
		}
	}
	retorno ajustado;
}


var defaultDisplayMap = {};

función getDefaultDisplay(elem) {
	temperatura variable,
		doc = elem.propietarioDocumento,
		nombrenodo = elem.nombrenodo,
		display = defaultDisplayMap[ nombre de nodo ];

	si (mostrar) {
		pantalla de retorno;
	}

	temp = doc.body.appendChild (doc.createElement (nombre de nodo));
	mostrar = jQuery.css(temp, "mostrar");

	temp.parentNode.removeChild(temp);

	si (mostrar === "ninguno") {
		mostrar = "bloque";
	}
	defaultDisplayMap[ nodeName ] = visualización;

	pantalla de retorno;
}

función mostrarOcultar( elementos, mostrar ) {
	visualización var, elemento,
		valores = [],
		índice = 0,
		longitud = elementos.longitud;

	// Determinar el nuevo valor de visualización para los elementos que necesitan cambiar
	para (; índice < longitud; índice++) {
		elem = elementos[índice];
		si (!elem.estilo) {
			continuar;
		}

		mostrar = elem.style.display;
		si (mostrar) {

			// Dado que forzamos la visibilidad sobre elementos ocultos en cascada, una inmediata (y lenta)
			// se requiere verificación en este primer ciclo a menos que tengamos un valor de visualización no vacío (ya sea
			// en línea o a punto de ser restaurado)
			si (mostrar === "ninguno") {
				valores[ índice ] = dataPriv.get( elem, "mostrar") || nulo;
				si (! valores [índice]) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && está oculto dentro del árbol ( elem ) ) {
				valores[índice] = getDefaultDisplay(elem);
			}
		} demás {
			si (mostrar! == "ninguno") {
				valores[índice] = "ninguno";

				// Recuerda lo que estamos sobrescribiendo
				dataPriv.set (elem, "pantalla", pantalla);
			}
		}
	}

	// Establece la visualización de los elementos en un segundo bucle para evitar un reflujo constante
	para (índice = 0; índice < longitud; índice++) {
		si (valores[índice]! = nulo) {
			elementos[índice].estilo.display = valores[índice];
		}
	}

	elementos de retorno;
}

jQuery.fn.extend({
	mostrar: función() {
		devolver mostrarOcultar(esto, verdadero);
	},
	ocultar: función() {
		devolver mostrarOcultar(esto);
	},
	alternar: función (estado) {
		if (tipo de estado === "booleano") {
			estado de retorno? this.show() : this.hide();
		}

		devolver esto.cada uno (función() {
			si (está oculto dentro del árbol (esto)) {
				jQuery(este).show();
			} demás {
				jQuery(esto).ocultar();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:casilla|radio)$/i );

var rtagName = ( /<([az][^\/\0>\x20\t\r\n\f]*)/i );

var rscriptType = ( /^$|^módulo$|\/(?:java|ecma)script/i );



( función() {
	fragmento var = document.createDocumentFragment(),
		div = fragmento.appendChild( document.createElement( "div") ),
		entrada = document.createElement ("entrada");

	// Soporte: Android 4.0 - 4.3 solamente
	// Verificar estado perdido si el nombre está configurado (trac-11217)
	// Soporte: Aplicaciones web de Windows (WWA)
	// `nombre` y `tipo` deben usar .setAttribute para WWA (trac-14901)
	input.setAttribute ("tipo", "radio");
	input.setAttribute( "marcado", "marcado");
	input.setAttribute( "nombre", "t" );

	div.appendChild(entrada);

	// Soporte: Android <=4.1 solamente
	// WebKit anterior no clona correctamente el estado marcado en fragmentos
	support.checkClone = div.cloneNode(verdadero).cloneNode(verdadero).lastChild.checked;

	// Soporte: IE <=11 solamente
	// Asegúrate de que el área de texto (y la casilla de verificación) defaultValue estén clonados correctamente
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// Soporte: IE <=9 solamente
	// IE <=9 reemplaza las etiquetas <option> con su contenido cuando se insertan fuera de
	// el elemento seleccionado.
	div.innerHTML = "<opción></opción>";
	soporte.opción = !!div.lastChild;
} )();


// Tenemos que cerrar estas etiquetas para soportar XHTML (trac-13200)
var envolverMapa = {

	// Los analizadores XHTML no insertan mágicamente elementos en el
	// de la misma manera que lo hacen los analizadores de sopa de etiquetas. Entonces no podemos acortar
	// esto omitiendo <tbody> u otros elementos requeridos.
	encabezado: [ 1, "<table>", "</table>" ],
	col: [ 2, "<tabla><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_predeterminado: [0, "", "" ]
};

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Soporte: IE <=9 solamente
si (!opción.soporte) {
	wrapMap.optgroup = wrapMap.option = [ 1, "<select multiple='multiple'>", "</select>" ];
}


función getAll (contexto, etiqueta) {

	// Soporte: IE <=9 - 11 solamente
	// Utilice typeof para evitar la invocación de métodos sin argumentos en objetos host (trac-15151)
	var ret;

	if (tipo de contexto.getElementsByTagName! == "indefinido") {
		ret = contexto.getElementsByTagName( etiqueta || "*" );

	} else if (tipo de contexto.querySelectorAll! == "indefinido") {
		ret = contexto.querySelectorAll( etiqueta || "*" );

	} demás {
		retiro = [];
	}

	if (etiqueta === indefinido || etiqueta && nombredenodo(contexto, etiqueta)) {
		devolver jQuery.merge([contexto], ret);
	}

	volver atrás;
}


// Marcar scripts como si ya hubieran sido evaluados
función setGlobalEval(elementos, refElements) {
	var i = 0,
		l = elementos.longitud;

	para (; yo < l; yo++) {
		datosPriv.set(
			elementos[i],
			"evalglobal",
			!refElementos || dataPriv.get( refElements[ i ], "globalEval")
		);
	}
}


var rhtml = /<|&#?\w+;/;

función buildFragment(elementos, contexto, scripts, selección, ignorado) {
	var elem, tmp, etiqueta, envoltura, adjunto, j,
		fragmento = contexto.createDocumentFragment(),
		nodos = [],
		yo = 0,
		l = elementos.longitud;

	para (; yo < l; yo++) {
		elem = elementos[i];

		si (elem || elem === 0) {

			// Agregar nodos directamente
			if (toType(elem) === "objeto") {

				// Soporte: Android <=4.0 únicamente, PhantomJS 1 únicamente
				// push.apply(_, arraylike) lanza el antiguo WebKit
				jQuery.merge(nodos, elem.nodeType? [elem]: elem);

			// Convertir no html en un nodo de texto
			} si no (!rhtml.test(elem)) {
				nodos.push( contexto.createTextNode( elem ) );

			// Convertir html en nodos DOM
			} demás {
				tmp = tmp || fragment.appendChild( contexto.createElement( "div" ) );

				// Deserializar una representación estándar
				etiqueta = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ etiqueta ] || wrapMap._default;
				tmp.innerHTML = envolver[ 1 ] + jQuery.htmlPrefilter( elem ) + envolver[ 2 ];

				// Desciende a través de contenedores hasta el contenido correcto
				j = ajustar[ 0 ];
				mientras (j--) {
					tmp = tmp.lastChild;
				}

				// Soporte: Android <=4.0 únicamente, PhantomJS 1 únicamente
				// push.apply(_, arraylike) lanza el antiguo WebKit
				jQuery.merge(nodos, tmp.childNodes);

				// Recuerda el contenedor de nivel superior
				tmp = fragmento.firstChild;

				// Garantizar que los nodos creados estén huérfanos (trac-12392)
				tmp.textContent = "";
			}
		}
	}

	// Quitar envoltorio del fragmento
	fragmento.textContent = "";

	yo = 0;
	mientras (( elem = nodos[ i++ ] ) ) {

		// Saltar elementos que ya están en la colección de contexto (trac-4087)
		if (selección && jQuery.inArray(elem, selección) > -1) {
			si (ignorado) {
				ignorado.push(elem);
			}
			continuar;
		}

		adjunto = está adjunto (elem);

		// Agregar al fragmento
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preservar el historial de evaluación del script
		si (adjunto) {
			setGlobalEval(tmp);
		}

		// Capturar ejecutables
		si (guiones) {
			j = 0;
			mientras (( elem = tmp[ j++ ] ) ) {
				if (rscriptType.test( elem.type || "" ) ) {
					scripts.push(elem);
				}
			}
		}
	}

	fragmento de retorno;
}


var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

función retornoVerdadero() {
	devolver verdadero;
}

función retornoFalso() {
	falso retorno;
}

función en (elem, tipos, selector, datos, fn, uno) {
	var origen, tipo;

	// Los tipos pueden ser un mapa de tipos/controladores
	if (tipo de tipos === "objeto") {

		// (tipos-Objeto, selector, datos)
		if (tipo de selector! == "cadena") {

			// (tipos-Objeto, datos)
			datos = datos || selector;
			selector = indefinido;
		}
		para (escriba tipos) {
			on(elem, tipo, selector, datos, tipos[tipo], uno);
		}
		elemento de retorno;
	}

	si (datos == nulo && fn == nulo) {

		// (tipos, fn)
		fn = selector;
		datos = selector = indefinido;
	} más si (fn == nulo) {
		if (tipo de selector === "cadena") {

			// (tipos, selector, fn)
			fn = datos;
			datos = indefinido;
		} demás {

			// (tipos, datos, fn)
			fn = datos;
			datos = selector;
			selector = indefinido;
		}
	}
	si ( fn === falso ) {
		fn = retornoFalso;
	} si no (!fn) {
		elemento de retorno;
	}

	si (uno === 1) {
		origenFn = fn;
		fn = función (evento) {

			// Se puede usar un conjunto vacío, ya que el evento contiene la información
			jQuery().off(evento);
			return origFn.apply (esto, argumentos);
		};

		// Usa el mismo guid para que la persona que llama pueda eliminar usando origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	devolver elem.cada uno (función() {
		jQuery.event.add (esto, tipos, fn, datos, selector);
	} );
}

/*
 * Funciones auxiliares para gestionar eventos, que no forman parte de la interfaz pública.
 * Accesorios para la biblioteca addEvent de Dean Edwards para muchas de las ideas.
 */
jQuery.evento = {

	global: {},

	agregar: función (elemento, tipos, controlador, datos, selector) {

		var handleObjIn, eventHandle, tmp,
			eventos, t, handleObj,
			especial, controladores, tipo, espacios de nombres, origType,
			elemData = datosPriv.get( elem );

		// Sólo adjunta eventos a objetos que aceptan datos
		si (!acceptData(elem)) {
			devolver;
		}

		// La persona que llama puede pasar un objeto de datos personalizados en lugar del controlador
		si (controlador.controlador) {
			handleObjIn = controlador;
			controlador = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Garantizar que los selectores no válidos generen excepciones en el momento de la conexión
		// Evaluar contra documentElement en caso de que elem sea un nodo que no sea un elemento (por ejemplo, documento)
		si (selector) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Asegúrate de que el controlador tenga una identificación única, que se usará para encontrarlo o eliminarlo más adelante
		si (! handler.guid) {
			controlador.guid = jQuery.guid++;
		}

		// Inicia la estructura de eventos del elemento y el controlador principal, si este es el primero
		if (!(eventos = elemData.events)) {
			eventos = elemData.events = Object.create(nulo);
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = función (e) {

				// Descarta el segundo evento de jQuery.event.trigger() y
				// cuando se llama a un evento después de que se haya descargado una página
				tipo de retorno de jQuery! == "indefinido" && jQuery.event.triggered! == e.type?
					jQuery.event.dispatch.apply (elem, argumentos): indefinido;
			};
		}

		// Maneja múltiples eventos separados por un espacio
		tipos = ( tipos || "" ).match( rnothtmlwhite ) || [""];
		t = tipos.longitud;
		mientras (t--) {
			tmp = rtypenamespace.exec( tipos[ t ] ) || [];
			tipo = tipo original = tmp[ 1 ];
			espacios de nombres = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// *debe* haber un tipo, no se pueden adjuntar controladores de solo espacio de nombres
			si (!tipo) {
				continuar;
			}

			// Si el evento cambia de tipo, utilice los controladores de eventos especiales para el tipo modificado
			especial = jQuery.event.special[ tipo ] || {};

			// Si se define el selector, determina el tipo de API de evento especial; de lo contrario, se especifica el tipo
			tipo = (selector? especial.delegateType: especial.bindType) || tipo;

			// Actualización especial basada en el tipo recién reiniciado
			especial = jQuery.event.special[ tipo ] || {};

			// handleObj se pasa a todos los controladores de eventos
			handleObj = jQuery.extend ({
				tipo: tipo,
				tipo original: tipo original,
				datos: datos,
				manejador: manejador,
				guid: controlador.guid,
				selector: selector,
				needContext: selector && jQuery.expr.match.needsContext.test (selector),
				espacio de nombres: espacios de nombres.join( "." )
			}, manejarObjIn);

			// Iniciamos la cola del controlador de eventos si somos los primeros
			if (!( manejadores = eventos[ tipo ] ) ) {
				controladores = eventos [tipo] = [];
				controladores.delegateCount = 0;

				// Solo usa addEventListener si el controlador de eventos especiales devuelve falso
				si (! configuración.especial ||
					especial.setup.call (elem, datos, espacios de nombres, eventHandle) === falso) {

					si (elem.addEventListener) {
						elem.addEventListener(tipo, eventHandle);
					}
				}
			}

			si (especial.agregar) {
				especial.add.call (elem, handleObj);

				si (!handleObj.handler.guid) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Agregar a la lista de controladores del elemento, delegados al frente
			si (selector) {
				handlers.splice( handlers.delegateCount++, 0, handleObj);
			} demás {
				controladores.push( handleObj );
			}

			// Realice un seguimiento de qué eventos se han utilizado alguna vez para optimizarlos
			jQuery.event.global[tipo] = verdadero;
		}

	},

	// Separar un evento o conjunto de eventos de un elemento
	eliminar: función (elemento, tipos, controlador, selector, tipos mapeados) {

		var j, origCount, tmp,
			eventos, t, handleObj,
			especial, controladores, tipo, espacios de nombres, origType,
			elemData = datosPriv.hasData( elem ) && datosPriv.get( elem );

		if (!elemData ||!(eventos = elemData.events)) {
			devolver;
		}

		// Una vez para cada tipo.espacio de nombres en tipos; se puede omitir el tipo
		tipos = ( tipos || "" ).match( rnothtmlwhite ) || [""];
		t = tipos.longitud;
		mientras (t--) {
			tmp = rtypenamespace.exec( tipos[ t ] ) || [];
			tipo = tipo original = tmp[ 1 ];
			espacios de nombres = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Desvincula todos los eventos (en este espacio de nombres, si se proporciona) para el elemento
			si (!tipo) {
				para (escriba eventos) {
					jQuery.event.remove (elem, tipo + tipos [t], controlador, selector, verdadero);
				}
				continuar;
			}

			especial = jQuery.event.special[ tipo ] || {};
			tipo = (selector? especial.delegateType: especial.bindType) || tipo;
			controladores = eventos [tipo] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Eliminar eventos coincidentes
			origCount = j = controladores.longitud;
			mientras (j--) {
				handleObj = controladores [j];

				if ((mappedTypes || origType === handleObj.origType) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					controladores.splice( j, 1 );

					si (handleObj.selector) {
						handlers.delegateCount--;
					}
					si (especial.eliminar) {
						especial.remove.call( elem, handleObj );
					}
				}
			}

			// Elimina el controlador de eventos genérico si eliminamos algo y no existen más controladores
			// (evita la posibilidad de una recursividad interminable durante la eliminación de controladores de eventos especiales)
			if (origCount &&! handlers.length) {
				if (!especial.desmontaje ||
					especial.teardown.call( elem, espacios de nombres, elemData.handle ) === false ) {

					jQuery.removeEvent(elem, tipo, elemData.handle);
				}

				eliminar eventos [tipo];
			}
		}

		// Elimina datos y el expando si ya no se usa
		si (jQuery.isEmptyObject (eventos)) {
			dataPriv.remove( elem, "manejar eventos" );
		}
	},

	envío: función (evento nativo) {

		var i, j, ret, emparejado, handleObj, handlerQueue,
			args = nueva matriz (argumentos.longitud),

			// Crea un jQuery.Event grabable a partir del objeto de evento nativo
			evento = jQuery.event.fix(nativeEvent),

			manejadores = (
				dataPriv.get(esto, "eventos") || Objeto.create(nulo)
			)[ tipo.evento ] || [],
			especial = jQuery.event.special[ evento.tipo ] || {};

		// Usa el jQuery.Event corregido en lugar del evento nativo (de solo lectura)
		argumentos[ 0 ] = evento;

		para (i = 1; i <argumentos.longitud; i++) {
			argumentos[i] = argumentos[i];
		}

		event.delegateTarget = esto;

		// Llame al gancho preDispatch para el tipo asignado y déjelo rescatar si lo desea
		if (especial.preDispatch && especial.preDispatch.call (este, evento) === falso) {
			devolver;
		}

		// Determinar los controladores
		handlerQueue = jQuery.event.handlers.call (este, evento, controladores);

		// Ejecute los delegados primero; Es posible que quieran detener la propagación debajo de nosotros.
		yo = 0;
		while ( ( emparejado = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = coincidente.elem;

			j = 0;
			mientras (( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Si el evento tiene un espacio de nombres, entonces cada controlador solo se invoca si es
				// especialmente universal o sus espacios de nombres son un superconjunto de los del evento.
				if (!event.rnamespace || handleObj.namespace === false ||
					evento.rnamespace.test( handleObj.namespace ) ) {

					evento.handleObj = handleObj;
					evento.datos = handleObj.datos;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler). Aplicar (matched.elem, args);

					si (ret! == indefinido) {
						si ((evento.resultado = ret) === falso) {
							evento.preventDefault();
							evento.stopPropagation();
						}
					}
				}
			}
		}

		// Llama al gancho postDispatch para el tipo mapeado
		si (especial.postDispatch) {
			special.postDispatch.call (este, evento);
		}

		devolver evento.resultado;
	},

	controladores: función (evento, controladores) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			controladorQueue = [],
			delegadoCount = controladores.delegateCount,
			cur = evento.objetivo;

		// Encuentra controladores de delegados
		si (delegadoCount &&

			// Soporte: IE <=9
			// Árboles de instancias SVG <use> de agujero negro (trac-13180)
			tipo.nodocur.&&

			// Soporte: Firefox <=42
			// Suprime los clics que violan las especificaciones y que indican un botón de puntero no principal (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Soporte: IE 11 solamente
			// ...pero no los "clics" de las teclas de flecha de las entradas de radio, que pueden tener el `botón` -1 (gh-2343)
			!( tipo.evento === "hacer clic" && botón.evento >= 1 ) ) {

			para (; cur! == esto; cur = cur.parentNode || esto) {

				// No marcar elementos que no sean (trac-13208)
				// No procesar clics en elementos deshabilitados (trac-6911, trac-8165, trac-11382, trac-11764)
				if (cur.nodeType === 1 &&!( event.type === "hacer clic" && cur.disabled === verdadero)) {
					manejadores emparejados = [];
					selectores coincidentes = {};
					para (i = 0; i <delegadoCount; i++) {
						handleObj = controladores [i];

						// No entra en conflicto con las propiedades de Object.prototype (trac-13203)
						sel = handleObj.selector + " ";

						if (matchedSelectors[sel] === indefinido) {
							matchedSelectors[sel] = handleObj.needsContext?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find(sel, this, null, [cur]).length;
						}
						if (selectores coincidentes [sel]) {
							matchedHandlers.push( handleObj );
						}
					}
					si (matchedHandlers.length) {
						handlerQueue.push ({elem: cur, controladores: matchedHandlers});
					}
				}
			}
		}

		// Agregar los controladores restantes (directamente vinculados)
		cur = esto;
		if (delegadoCount < controladores.longitud) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegadoCount ) } );
		}

		devolver handlerQueue;
	},

	addProp: función (nombre, gancho) {
		Object.defineProperty (jQuery.Event.prototype, nombre, {
			enumerable: verdadero,
			configurable: verdadero,

			obtener: isFunction(gancho)?
				función() {
					si (this.originalEvent) {
						gancho de retorno (this.originalEvent);
					}
				} :
				función() {
					si (this.originalEvent) {
						devolver this.originalEvent[nombre];
					}
				},

			conjunto: función (valor) {
				Object.defineProperty (esto, nombre, {
					enumerable: verdadero,
					configurable: verdadero,
					grabable: verdadero,
					valor: valor
				} );
			}
		} );
	},

	corrección: función (Evento original) {
		devolver evento original [jQuery.expando]?
			evento original:
			nuevo jQuery.Event (evento original);
	},

	especial: {
		carga: {

			// Evitar que los eventos image.load activados se transmitan a window.load
			noBubble: verdadero
		},
		haga clic en: {

			// Utilizar eventos nativos para garantizar el estado correcto de las entradas verificables
			configuración: función (datos) {

				// Para una compresibilidad mutua con _default, reemplace el acceso `this` con una var local.
				// `|| data` es un código inactivo destinado únicamente a preservar la variable mediante la minificación.
				var el = esto || datos;

				// Reclama el primer controlador
				si (rcheckableType.test( el.type ) &&
					el.click && nombrenodo( el, "entrada") ) {

					// dataPriv.set( el, "hacer clic", ... )
					apalancamientoNativo( el, "clic", verdadero );
				}

				// Devuelve falso para permitir el procesamiento normal en la persona que llama
				falso retorno;
			},
			disparador: función (datos) {

				// Para una compresibilidad mutua con _default, reemplace el acceso `this` con una var local.
				// `|| data` es un código inactivo destinado únicamente a preservar la variable mediante la minificación.
				var el = esto || datos;

				// Forzar la configuración antes de activar un clic
				si (rcheckableType.test( el.type ) &&
					el.click && nombrenodo( el, "entrada") ) {

					apalancamientoNativo( el, "hacer clic" );
				}

				// Devuelve un valor distinto de falso para permitir la propagación normal de la ruta de eventos
				devolver verdadero;
			},

			// Para lograr coherencia en todos los navegadores, suprima el .click() nativo en los enlaces
			// También evitarlo si actualmente estamos dentro de una pila de eventos nativos aprovechados
			_predeterminado: función (evento) {
				var objetivo = evento.objetivo;
				devolver rcheckableType.test (tipo.destino) &&
					destino.hacer clic && nombredenodo(destino, "entrada") &&
					dataPriv.get(destino, "hacer clic") ||
					nombredenodo(destino, "a");
			}
		},

		antes de descargar: {
			postDispatch: función (evento) {

				// Soporte: Firefox 20+
				// Firefox no alerta si el campo returnValue no está configurado.
				if (evento.resultado! == indefinido && evento.originalEvent) {
					evento.originalEvent.returnValue = evento.resultado;
				}
			}
		}
	}
};

// Garantizar la presencia de un detector de eventos que maneje los eventos activados manualmente.
// eventos sintéticos interrumpiendo el progreso hasta que se reinvoquen en respuesta a
// eventos *nativos* que activa directamente, asegurando que los cambios de estado se realicen
// ya ocurrió antes de que se invocaran otros oyentes.
función apalancamientoNativo( el, tipo, isSetup ) {

	// La falta de `isSetup` indica una llamada de activación, que debe forzar la configuración a través de jQuery.event.add
	si (!isSetup) {
		if (dataPriv.get(el, tipo) === indefinido) {
			jQuery.event.add( el, tipo, returnTrue );
		}
		devolver;
	}

	// Registra el controlador como un controlador universal especial para todos los espacios de nombres de eventos
	dataPriv.set (el, tipo, falso);
	jQuery.event.add( el, tipo, {
		espacio de nombres: falso,
		controlador: función (evento) {
			resultado variable,
				guardado = dataPriv.get (esto, escriba);

			if (( event.isTrigger & 1 ) && este[ tipo ] ) {

				// Interrumpir el procesamiento del evento sintético externo .trigger()ed
				si (! guardado) {

					// Almacena argumentos para usar cuando se maneja el evento nativo interno
					// Siempre habrá al menos un argumento (un objeto de evento), por lo que esta matriz
					// no se confundirá con un objeto de captura sobrante.
					guardado = segmento.call (argumentos);
					dataPriv.set (esto, tipo, guardado);

					// Activa el evento nativo y captura su resultado
					este tipo ]();
					resultado = dataPriv.get (esto, tipo);
					dataPriv.set (este, tipo, falso);

					si (guardado! == resultado) {

						// Cancelar el evento sintético externo
						event.stopImmediatePropagation();
						evento.preventDefault();

						resultado de devolución;
					}

				// Si este es un evento sintético interno para un evento con un sustituto burbujeante
				// (enfoque o desenfoque), suponemos que el sustituto ya se propagó desde el desencadenamiento
				// el evento nativo y evitar que vuelva a suceder aquí.
				// Esto técnicamente hace que el orden sea incorrecto en `.trigger()` (en el que el
				// el sustituto burbujeante se propaga *después* de la base no burbujeante), pero eso parece
				// menos malo que la duplicación.
				} else if (( jQuery.event.special[ tipo ] || {} ).delegateType ) {
					evento.stopPropagation();
				}

			// Si se trata de un evento nativo activado anteriormente, ahora todo está en orden
			// Lanza un evento sintético interno con los argumentos originales
			} más si (guardado) {

				// ...y capturamos el resultado
				dataPriv.set (esto, tipo, jQuery.event.trigger (
					guardado [0],
					rebanada.guardada( 1 ),
					este
				) );

				// Cancelar el manejo del evento nativo por parte de todos los controladores jQuery mientras se permite
				// controladores nativos en el mismo elemento a ejecutar. En el objetivo, esto se logra
				// deteniendo la propagación inmediata justo en el evento jQuery. Sin embargo,
				// el evento nativo se vuelve a empaquetar mediante jQuery en cada nivel del
				// propagación, por lo que la única forma de detenerla para jQuery es detenerla para
				// todos a través de `stopPropagation()` nativo. Esto no es un problema para
				// enfoque/desenfoque que no burbujea, pero también deja de hacer clic en las casillas de verificación
				// y radios. Aceptamos esta limitación.
				evento.stopPropagation();
				event.isImmediatePropagationStopped = returnTrue;
			}
		}
	} );
}

jQuery.removeEvent = función (elemento, tipo, identificador) {

	// Este "si" es necesario para objetos simples
	si (elem.removeEventListener) {
		elem.removeEventListener(tipo, identificador);
	}
};

jQuery.Event = función (src, accesorios) {

	// Permitir creación de instancias sin la palabra clave 'nueva'
	if (!(esta instancia de jQuery.Event)) {
		devolver nuevo jQuery.Event (src, accesorios);
	}

	// objeto de evento
	si (src && src.tipo) {
		this.originalEvent = src;
		este.tipo = src.tipo;

		// Es posible que los eventos que aparecen en el documento se hayan marcado como evitados
		// por un controlador que se encuentra más abajo en el árbol; reflejar el valor correcto.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === indefinido &&

				// Soporte: Android <=2.3 solamente
				src.returnValue === falso?
			retornoVerdadero:
			falso retorno;

		// Crear propiedades de destino
		// Soporte: Safari <=6 - 7 solamente
		// El destino no debe ser un nodo de texto (trac-504, trac-13143)
		this.target = (src.target && src.target.nodeType === 3)?
			src.target.parentNode:
			src.destino;

		this.currentTarget = src.currentTarget;
		this.relacionadoTarget = src.relacionadoTarget;

	// Tipo de evento
	} demás {
		este.tipo = src;
	}

	// Poner propiedades proporcionadas explícitamente en el objeto del evento
	si (accesorios) {
		jQuery.extend (esto, accesorios);
	}

	// Crea una marca de tiempo si el evento entrante no tiene una
	this.timeStamp = src && src.timeStamp || Fecha.ahora();

	// Marcarlo como arreglado
	esto[ jQuery.expando ] = verdadero;
};

// jQuery.Event se basa en eventos DOM3 según lo especificado por el enlace del lenguaje ECMAScript
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototipo = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	es simulado: falso,

	prevenirDefault: función() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		si (e &&! this.isSimulated) {
			e.preventDefault();
		}
	},
	detenerPropagación: función() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		si (e &&! this.isSimulated) {
			e.stopPropagation();
		}
	},
	detenerPropagaciónInmediata: función() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		si (e &&! this.isSimulated) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Incluye todos los accesorios de eventos comunes, incluidos los accesorios específicos de KeyEvent y MouseEvent
jQuery.cada uno ({
	tecla alt: verdadera,
	burbujas: cierto,
	cancelable: verdadero,
	Toques cambiados: verdadero,
	tecla Ctrl: verdadero,
	detalle: verdadero,
	fase de evento: verdadero,
	metaClave: verdadero,
	páginaX: verdadero,
	páginaY: verdadero,
	tecla shift: verdadero,
	ver: verdadero,
	"carbón": verdadero,
	código: verdadero,
	código de caracteres: verdadero,
	clave: verdadero,
	Código clave: verdadero,
	botón: verdadero,
	botones: verdadero,
	clienteX: verdadero,
	clienteY: verdadero,
	compensaciónX: verdadero,
	compensaciónY: verdadero,
	ID del puntero: verdadero,
	Tipo de puntero: verdadero,
	pantallaX: verdadero,
	pantallaY: verdadero,
	targetTouches: verdadero,
	aElement: verdadero,
	toques: cierto,
	cual: cierto
}, jQuery.event.addProp);

jQuery.each ({enfoque: "enfoque", desenfoque: "enfoque" }, función (tipo, tipo de delegado) {

	función focusMappedHandler (nativeEvent) {
		si (documento.documentMode) {

			// Soporte: IE 11+
			// Adjunte un único controlador de enfoque/enfoque en el documento mientras alguien quiera
			// enfoque/desenfoque. Esto se debe a que los primeros son sincrónicos en IE mientras que los segundos
			// son asíncronos. En otros navegadores, todos esos controladores se invocan de forma sincrónica.

			// `handle` de datos privados ya incluiría el evento, pero necesitamos
			// para cambiar el `tipo` aquí.
			var identificador = dataPriv.get (esto, "identificador"),
				evento = jQuery.event.fix(nativeEvent);
			event.type = nativoEvent.type === "focusin"? "enfoque": "desenfoque";
			event.isSimulated = verdadero;

			// Primero, maneja el enfoque/enfoque
			manejar (nativoEvento);

			// ...luego, maneja el enfoque/desenfoque
			//
			// enfocar/desenfocar no burbujea mientras que enfocar/enfocar sí lo hace; simular el primero por sólo
			// invocando al controlador en el nivel inferior.
			si (evento.objetivo === evento.actualobjetivo) {

				// La parte de configuración llama a `leverageNative`, que, a su vez, llama
				// `jQuery.event.add`, por lo que el identificador del evento ya habrá sido configurado
				// por este punto.
				manejar( evento );
			}
		} demás {

			// Para navegadores que no sean IE, adjunte un único controlador de captura en el documento
			// mientras alguien quiere enfocarse/centrarse.
			jQuery.event.simulate (tipo de delegado, evento nativo.objetivo,
				jQuery.event.fix(nativeEvent));
		}
	}

	jQuery.event.especial[ tipo ] = {

		// Utilice el evento nativo si es posible para que la secuencia de desenfoque/enfoque sea correcta
		configuración: función() {

			var adjunta;

			// Reclama el primer controlador
			// dataPriv.set (esto, "enfoque", ...)
			// dataPriv.set( esto, "desenfoque", ... )
			apalancamientoNativo(este, tipo, verdadero);

			si (documento.documentMode) {

				// Soporte: IE 9 - 11+
				// Usamos el mismo controlador nativo para enfocar y enfocar (y enfocar y desenfocar)
				// entonces necesitamos coordinar las partes de instalación y desmontaje entre esos eventos.
				// Utilice `delegateType` como clave, ya que `type` ya lo utiliza `leverageNative`.
				adjunta = dataPriv.get (esto, tipo de delegado);
				si (! adjunta) {
					this.addEventListener (tipo de delegado, focusMappedHandler);
				}
				dataPriv.set (este, tipo de delegado, (se adjunta || 0) + 1);
			} demás {

				// Devuelve falso para permitir el procesamiento normal en la persona que llama
				falso retorno;
			}
		},
		disparador: función() {

			// Forzar la configuración antes del disparo
			apalancamientoNativo( esto, escriba );

			// Devuelve un valor distinto de falso para permitir la propagación normal de la ruta de eventos
			devolver verdadero;
		},

		desmontaje: función() {
			var adjunta;

			si (documento.documentMode) {
				adjunta = dataPriv.get (esto, tipo de delegado) - 1;
				si (! adjunta) {
					this.removeEventListener (tipo de delegado, focusMappedHandler);
					dataPriv.remove (esto, tipo de delegado);
				} demás {
					dataPriv.set (este, tipo de delegado, se adjunta);
				}
			} demás {

				// Devuelve falso para indicar que se debe aplicar el desmontaje estándar
				falso retorno;
			}
		},

		// Suprime el enfoque nativo o el desenfoque si actualmente estamos dentro
		// una pila de eventos nativos aprovechada
		_predeterminado: función (evento) {
			devolver datosPriv.get (evento.objetivo, tipo);
		},

		tipo de delegado: tipo de delegado
	};

	// Soporte: Firefox <=44
	// Firefox no tiene eventos de enfoque (entrada | salida)
	// Ticket relacionado: https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Soporte: Chrome <=48 - 49, Safari <=9.0 - 9.1
	// los eventos de enfoque (in | out) se activan después de los eventos de enfoque y desenfoque,
	// que es una violación de especificaciones - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Ticket relacionado: https://bugs.chromium.org/p/chromium/issues/detail?id=449857
	//
	// Soporte: IE 9 - 11+
	// Para preservar el orden relativo de los eventos focusin/focus & focusout/blur garantizado en la rama 3.x,
	// adjunta un único controlador para ambos eventos en IE.
	jQuery.event.special[tipodelegado] = {
		configuración: función() {

			// Identificador: nodos regulares (a través de `this.ownerDocument`), ventana
			// (a través de `this.document`) & documento (a través de `this`).
			var doc = this.ownerDocument || este.documento || este,
				titular de datos = documento.documentMode? esto: doctor,
				adjunta = dataPriv.get (titular de datos, tipo de delegado);

			// Soporte: IE 9 - 11+
			// Usamos el mismo controlador nativo para enfocar y enfocar (y enfocar y desenfocar)
			// entonces necesitamos coordinar las partes de instalación y desmontaje entre esos eventos.
			// Utilice `delegateType` como clave, ya que `type` ya lo utiliza `leverageNative`.
			si (! adjunta) {
				si (documento.documentMode) {
					this.addEventListener (tipo de delegado, focusMappedHandler);
				} demás {
					doc.addEventListener (tipo, focusMappedHandler, verdadero);
				}
			}
			dataPriv.set (titular de datos, tipo de delegado, (adjunta || 0) + 1);
		},
		desmontaje: función() {
			var doc = this.ownerDocument || este.documento || este,
				titular de datos = documento.documentMode? esto: doctor,
				adjunta = dataPriv.get (dataHolder, delegadoType) - 1;

			si (! adjunta) {
				si (documento.documentMode) {
					this.removeEventListener (tipo de delegado, focusMappedHandler);
				} demás {
					doc.removeEventListener (tipo, focusMappedHandler, verdadero);
				}
				dataPriv.remove (titular de datos, tipo de delegado);
			} demás {
				dataPriv.set (titular de datos, tipo de delegado, archivos adjuntos);
			}
		}
	};
} );

// Crea eventos de entrada/salida mediante mouseover/out y comprobaciones de tiempo de evento
// para que la delegación de eventos funcione en jQuery.
// Haz lo mismo para pointerenter/pointerleave y pointerover/pointerout
//
// Soporte: Safari 7 solamente
// Safari envía mouseenter con demasiada frecuencia; ver:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// para ver la descripción del error (también existía en versiones anteriores de Chrome).
jQuery.cada uno ({
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "puntero",
	pointerleave: "puntero"
}, función (origen, arreglar) {
	jQuery.event.especial[ origen ] = {
		tipo de delegado: arreglar,
		tipo de enlace: arreglar,

		manejar: función (evento) {
			var ret,
				objetivo = esto,
				relacionado = evento.objetivorelacionado,
				handleObj = evento.handleObj;

			// Para mouseenter/leave llama al controlador si la relación está fuera del objetivo.
			// NB: No relatedTarget si el mouse salió/ingresó a la ventana del navegador
			if ( !relacionado || ( relacionado !== objetivo && !jQuery.contains( objetivo, relacionado ) ) ) {
				evento.tipo = handleObj.origType;
				ret = handleObj.handler.apply (esto, argumentos);
				evento.tipo = arreglar;
			}
			volver atrás;
		}
	};
} );

jQuery.fn.extend({

	en: función (tipos, selector, datos, fn) {
		volver a activar (esto, tipos, selector, datos, fn);
	},
	uno: función (tipos, selector, datos, fn) {
		volver a (esto, tipos, selector, datos, fn, 1);
	},
	apagado: función (tipos, selector, fn) {
		var handleObj, tipo;
		si (tipos && tipos.preventDefault && tipos.handleObj) {

			// (evento) enviado jQuery.Event
			handleObj = tipos.handleObj;
			jQuery( tipos.delegateTarget ).off(
				handleObj.espacio de nombres?
					handleObj.origType + "." + handleObj.espacio de nombres:
					manejarObj.origType,
				manejarObj.selector,
				manejarObj.handler
			);
			devolver esto;
		}
		if (tipo de tipos === "objeto") {

			// (tipos-objeto [, selector])
			para (escriba tipos) {
				this.off(tipo, selector, tipos[tipo]);
			}
			devolver esto;
		}
		if (selector === falso || tipo de selector === "función") {

			// (tipos [, fn])
			fn = selector;
			selector = indefinido;
		}
		si ( fn === falso ) {
			fn = retornoFalso;
		}
		devolver esto.cada uno (función() {
			jQuery.event.remove (esto, tipos, fn, selector);
		} );
	}
} );


var

	// Soporte: IE <=10 - 11, Edge 12 - 13 únicamente
	// En IE/Edge, el uso de grupos de expresiones regulares aquí provoca graves ralentizaciones.
	// Ver https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<estilo|<enlace/i,

	// marcado = "marcado" o marcado
	rmarcado = /marcado\s*(?:[^=]|=\s*.marcado.)/i,

	rcleanScript = /^\s*<!\[CDATA\[|\]\]>\s*$/g;

// Prefiero un tbody a su tabla principal para contener nuevas filas
función manipulaciónObjetivo(elem, contenido) {
	si (nombrenodo(elem, "tabla") &&
		nodeName( content.nodeType !== 11 ? contenido : content.firstChild, "tr" ) ) {

		devolver jQuery( elem ).children( "tbody")[ 0 ] || elemento;
	}

	elemento de retorno;
}

// Reemplazar/restaurar el atributo de tipo de los elementos del script para una manipulación DOM segura
función desactivarScript (elemento) {
	elem.type = ( elem.getAttribute( "tipo") !== nulo ) + "/" + elem.type;
	elemento de retorno;
}
función restaurarScript (elemento) {
	if (( elem.type || "" ).slice( 0, 5 ) === "verdadero/" ) {
		elem.tipo = elem.tipo.slice( 5 );
	} demás {
		elem.removeAttribute( "tipo" );
	}

	elemento de retorno;
}

función clonCopyEvent( origen, destino ) {
	var i, l, tipo, pdataOld, udataOld, udataCur, eventos;

	if (destino.tipodenodo!== 1) {
		devolver;
	}

	// 1. Copiar datos privados: eventos, controladores, etc.
	si (datosPriv.hasData(src)) {
		pdataOld = datosPriv.get( src );
		eventos = pdataOld.events;

		si (eventos) {
			dataPriv.remove(destino, "manejar eventos");

			para (escriba eventos) {
				para (i = 0, l = eventos[tipo].longitud; i <l; i++) {
					jQuery.event.add(destino, tipo, eventos[tipo][i]);
				}
			}
		}
	}

	// 2. Copiar datos del usuario
	si (datosUsuario.hasData(src)) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld);

		dataUser.set( destino, udataCur );
	}
}

// Corregir errores de IE, ver pruebas de soporte
función arreglarInput( origen, destino ) {
	var nombrenodo = destino.nombrenodo.toLowerCase();

	// No logra conservar el estado marcado de una casilla de verificación o botón de opción clonado.
	if (nodeName === "entrada" && rcheckableType.test( src.type ) ) {
		destino.marcado = src.marcado;

	// No se puede devolver la opción seleccionada al estado seleccionado predeterminado al clonar opciones
	} else if (nombrenodo === "entrada" || nombrenodo === "área de texto") {
		destino.defaultValue = src.defaultValue;
	}
}

función domManip (colección, argumentos, devolución de llamada, ignorada) {

	// Aplana cualquier matriz anidada
	argumentos = plano (argumentos);

	fragmento var, primero, scripts, hasScripts, nodo, doc,
		yo = 0,
		l = colección.longitud,
		iNoClón = l - 1,
		valor = argumentos [0],
		valorEsFunción = esFunción( valor );

	// No podemos clonar fragmentos de Nodo que contengan marcado, en WebKit
	si (valorEsFunción ||
			( l > 1 && tipo de valor === "cadena" &&
				!support.checkClone && rchecked.test( valor ) ) ) {
		devolver colección.cada uno (función (índice) {
			var self = colección.eq(índice);
			si (valorEsFunción) {
				args[ 0 ] = valor.call( esto, índice, self.html() );
			}
			domManip(self, argumentos, devolución de llamada, ignorado);
		} );
	}

	si ( l ) {
		fragmento = buildFragment( args, colección[ 0 ].ownerDocument, false, colección, ignorado );
		primero = fragmento.firstChild;

		si (fragmento.childNodes.length === 1) {
			fragmento = primero;
		}

		// Requerir contenido nuevo o interés en elementos ignorados para invocar la devolución de llamada
		si (primero || ignorado) {
			scripts = jQuery.map (getAll (fragmento, "script"), desactivarScript);
			tieneScripts = scripts.length;

			// Usa el fragmento original para el último elemento.
			// en lugar del primero porque puede terminar
			// se vacía incorrectamente en determinadas situaciones (trac-8070).
			para (; yo < l; yo++) {
				nodo = fragmento;

				si (yo! == iNoClone) {
					nodo = jQuery.clone (nodo, verdadero, verdadero);

					// Mantener referencias a scripts clonados para su posterior restauración
					si (tieneScripts) {

						// Soporte: Android <=4.0 únicamente, PhantomJS 1 únicamente
						// push.apply(_, arraylike) lanza el antiguo WebKit
						jQuery.merge( scripts, getAll( nodo, "script" ) );
					}
				}

				callback.call(colección[i], nodo,i);
			}

			si (tieneScripts) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				//Volver a habilitar los scripts
				jQuery.map (scripts, restaurarScript);

				// Evaluar scripts ejecutables en la inserción del primer documento
				para (i = 0; i <hasScripts; i++) {
					nodo = scripts[i];
					si (rscriptType.test(nodo.tipo || "") &&
						!dataPriv.access(nodo, "globalEval") &&
						jQuery.contiene (doc, nodo)) {

						if ( nodo.src && ( nodo.tipo || "" ).toLowerCase() !== "módulo" ) {

							// Dependencia AJAX opcional, pero no ejecutará scripts si no está presente
							si (jQuery._evalUrl &&!node.noModule) {
								jQuery._evalUrl (nodo.src, {
									nonce: nodo.nonce || nodo.getAttribute( "nonce")
								}, doc );
							}
						} demás {

							// Desenvuelve una sección CDATA que contiene el contenido del script. Esto no debería ser
							// necesario ya que en los documentos XML ya no son visibles cuando
							// inspeccionando el contenido de los elementos y en los documentos HTML no tienen
							// significa, pero estamos preservando esa lógica para la compatibilidad con versiones anteriores.
							// Esto se eliminará por completo en 4.0. Ver gh-4904.
							DOMEval( nodo.textContent.replace( rcleanScript, "" ), nodo, doc );
						}
					}
				}
			}
		}
	}

	recogida de devolución;
}

función eliminar (elemento, selector, mantenerDatos) {
	nodo var,
		nodos = selector? jQuery.filter(selector, elem): elem,
		yo = 0;

	para (; (nodo = nodos[i])!= nulo; i++) {
		if (!keepData && nodo.nodeType === 1) {
			jQuery.cleanData( getAll( nodo ) );
		}

		si (nodo.parentNode) {
			if ( keepData && está adjunto (nodo)) {
				setGlobalEval( getAll( nodo, "script" ) );
			}
			nodo.parentNode.removeChild( nodo );
		}
	}

	elemento de retorno;
}

jQuery.extender ({
	htmlPrefiltro: función (html) {
		devolver html;
	},

	clonar: función (elem, datosAndEvents, deepDataAndEvents) {
		var i, l, srcElements, destElements,
			clon = elem.cloneNode (verdadero),
			en la página = está adjunto (elem);

		// Solucionar problemas de clonación de IE
		if (!support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc(elem) ) {

			// Evitamos jQuery#find aquí por razones de rendimiento:
			// https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll(clonar);
			srcElements = getAll(elem);

			para (i = 0, l = srcElements.length; i < l; i++) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copia los eventos del original al clon
		si (datos y eventos) {
			si (datosprofundosyeventos) {
				srcElementos = srcElementos || obtenerTodos(elemento);
				elementosdestino = elementosdestino || obtenerTodo(clonar);

				para (i = 0, l = srcElements.length; i < l; i++) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} demás {
				cloneCopyEvent( elem, clon );
			}
		}

		// Preservar el historial de evaluación del script
		destElements = getAll( clonar, "script" );
		if (destinoElementos.longitud > 0) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Devuelve el conjunto clonado
		clon de retorno;
	},

	cleanData: función (elementos) {
		datos var, elem, tipo,
			especial = jQuery.event.especial,
			yo = 0;

		para (; (elem = elems[i])!== indefinido; i++) {
			si (aceptarDatos(elem)) {
				if ((datos = elem[datosPriv.expando])) {
					si (datos.eventos) {
						para (escriba datos.eventos) {
							si (especial[tipo]) {
								jQuery.event.remove(elem, tipo);

							// Este es un atajo para evitar la sobrecarga de jQuery.event.remove
							} demás {
								jQuery.removeEvent(elem, tipo, datos.handle);
							}
						}
					}

					// Soporte: Chrome <=35 - 45+
					// Asignar indefinido en lugar de usar eliminar, ver Datos#remove
					elem[ dataPriv.expando ] = indefinido;
				}
				if (elem[datosUsuario.expando]) {

					// Soporte: Chrome <=35 - 45+
					// Asignar indefinido en lugar de usar eliminar, ver Datos#remove
					elem[datosUsuario.expando] = indefinido;
				}
			}
		}
	}
} );

jQuery.fn.extend({
	separar: función (selector) {
		devolver eliminar (esto, selector, verdadero);
	},

	eliminar: función (selector) {
		devolver eliminar (esto, selector);
	},

	texto: función (valor) {
		devolver acceso (esto, función (valor) {
			valor de retorno === indefinido?
				jQuery.text (esto):
				this.empty().cada uno( función() {
					if (este.nodoType === 1 || este.nodoType === 11 || este.nodeType === 9 ) {
						this.textContent = valor;
					}
				} );
		}, nulo, valor, argumentos.longitud);
	},

	agregar: función() {
		return domManip(esto, argumentos, función(elem) {
			if (este.nodoType === 1 || este.nodoType === 11 || este.nodeType === 9 ) {
				var objetivo = objetivo de manipulación (esto, elem);
				target.appendChild(elem);
			}
		} );
	},

	anteponer: función() {
		return domManip(esto, argumentos, función(elem) {
			if (este.nodoType === 1 || este.nodoType === 11 || este.nodeType === 9 ) {
				var objetivo = objetivo de manipulación (esto, elem);
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	antes: función() {
		return domManip(esto, argumentos, función(elem) {
			si (este.parentNode) {
				this.parentNode.insertBefore (elem, este);
			}
		} );
	},

	después: función() {
		return domManip(esto, argumentos, función(elem) {
			si (este.parentNode) {
				this.parentNode.insertBefore(elem, this.nextSibling);
			}
		} );
	},

	vacío: función() {
		elemento var,
			yo = 0;

		para (; (elem = esto[i])!= nulo; i++) {
			si (elem.nodeType === 1) {

				// Prevenir pérdidas de memoria
				jQuery.cleanData( getAll( elem, false ) );

				// Elimina los nodos restantes
				elem.textContent = "";
			}
		}

		devolver esto;
	},

	clonar: función (datosAndEvents, deepDataAndEvents) {
		datosAndEvents = datosAndEvents == nulo? falso: datos y eventos;
		deepDataAndEvents = deepDataAndEvents == nulo? datos y eventos: datos y eventos profundos;

		devolver this.map( función() {
			devolver jQuery.clone (esto, datosAndEvents, deepDataAndEvents);
		} );
	},

	html: función (valor) {
		devolver acceso (esto, función (valor) {
			var elem = esto[ 0 ] || {},
				yo = 0,
				l = esta.longitud;

			if (valor === indefinido && elem.nodeType === 1) {
				devolver elem.innerHTML;
			}

			// Veamos si podemos tomar un atajo y simplemente usar InnerHTML
			if (tipo de valor === "cadena" &&! rnoInnerhtml.test(valor) &&
				!wrapMap[ ( rtagName.exec( valor ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				valor = jQuery.htmlPrefilter( valor );

				intentar {
					para (; yo < l; yo++) {
						elem = esto[i] || {};

						// Elimina nodos de elementos y evita pérdidas de memoria
						si (elem.nodeType === 1) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = valor;
						}
					}

					elemento = 0;

				// Si el uso de InnerHTML genera una excepción, use el método alternativo
				} atrapar (e) {}
			}

			si (elemento) {
				this.empty().append( valor );
			}
		}, nulo, valor, argumentos.longitud);
	},

	reemplazar con: función() {
		var ignorado = [];

		// Realiza los cambios, reemplazando cada elemento de contexto no ignorado con el nuevo contenido
		return domManip(esto, argumentos, función(elem) {
			var padre = this.parentNode;

			if (jQuery.inArray(esto, ignorado) <0) {
				jQuery.cleanData( getAll( this ) );
				si (padre) {
					parent.replaceChild(elem, esto);
				}
			}

		// Forzar la invocación de devolución de llamada
		}, ignorado);
	}
} );

jQuery.cada uno ({
	appendTo: "añadir",
	anteponerA: "anteponer",
	insertarAntes: "antes",
	insertarDespués: "después",
	reemplazarTodo: "reemplazarCon"
}, función (nombre, original) {
	jQuery.fn[nombre] = función(selector) {
		elementos var,
			ret = [],
			insertar = jQuery (selector),
			último = insertar.longitud - 1,
			yo = 0;

		para (; i <= último; i++) {
			elems = i === último? esto: este.clon (verdadero);
			jQuery( insertar[ i ] )[ original ]( elementos );

			// Soporte: Android <=4.0 únicamente, PhantomJS 1 únicamente
			// .get() porque push.apply(_, arraylike) lanza WebKit antiguo
			push.apply(ret, elems.get());
		}

		devolver this.pushStack(ret);
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[az%]+$", "i" );

var rcustomProp = /^--/;


var getStyles = función (elemento) {

		// Soporte: IE <=11 solamente, Firefox <=30 (trac-15098, trac-14150)
		// IE lanza elementos creados en ventanas emergentes
		// Mientras tanto, FF lanza elementos del marco a través de "defaultView.getComputedStyle"
		var vista = elem.ownerDocument.defaultView;

		si (!ver || !ver.opener) {
			vista = ventana;
		}

		devolver view.getComputedStyle (elem);
	};

var swap = función (elemento, opciones, devolución de llamada) {
	var ret, nombre,
		viejo = {};

	// Recuerda los valores antiguos e inserta los nuevos.
	para (nombre en opciones) {
		antiguo[ nombre ] = elem.style[ nombre ];
		elem.style[nombre] = opciones[nombre];
	}

	ret = devolución de llamada.llamada (elem);

	// Revertir los valores antiguos
	para (nombre en opciones) {
		elem.style[nombre] = antiguo[nombre];
	}

	volver atrás;
};


var rboxStyle = nueva RegExp( cssExpand.join( "|" ), "i" );



( función() {

	// La ejecución de las pruebas pixelPosition y boxSizingReliable requiere solo un diseño
	// para que se ejecuten al mismo tiempo para guardar el segundo cálculo.
	función calcularEstiloPruebas() {

		// Este es un singleton, necesitamos ejecutarlo solo una vez
		si (!div) {
			devolver;
		}

		contenedor.style.cssText = "posición:absoluta;izquierda:-11111px;ancho:60px;" +
			"margen superior:1px;relleno:0;borde:0";
		div.estilo.cssText =
			"posición: relativa; pantalla: bloque; tamaño de caja: caja de borde; desbordamiento: desplazamiento;" +
			"margen:automático;borde:1px;relleno:1px;" +
			"ancho:60%;arriba:1%";
		documentElement.appendChild( contenedor ).appendChild( div );

		var divStyle = ventana.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Soporte: Android 4.0 - 4.3 solamente, Firefox <=3 - 44
		confiableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Compatibilidad: Android 4.0 - 4.3 únicamente, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Algunos estilos regresan con valores porcentuales, aunque no deberían
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Soporte: IE 9 - 11 solamente
		// Detectar informes erróneos de dimensiones de contenido para elementos box-sizing:border-box
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Soporte: IE 9 solamente
		// Detectar desbordamiento: desplazamiento desordenado (gh-3699)
		// Soporte: Chrome <=64
		// No te dejes engañar cuando el zoom afecte al ancho de desplazamiento (gh-4029)
		div.style.position = "absoluto";
		scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

		documentElement.removeChild( contenedor );

		// Anula el div para que no se almacene en la memoria y
		// también será una señal de que ya se han realizado comprobaciones
		div = nulo;
	}

	función roundPixelMeasures (medida) {
		return Math.round(parseFloat(medida));
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		confiableTrDimensionsVal, confiableMarginLeftVal,
		contenedor = documento.createElement ("div"),
		div = documento.createElement( "div" );

	// Terminar temprano en entornos limitados (sin navegador)
	si (!div.estilo) {
		devolver;
	}

	// Soporte: IE <=9 - 11 solamente
	// El estilo del elemento clonado afecta al elemento fuente clonado (trac-8908)
	div.style.backgroundClip = "cuadro de contenido";
	div.cloneNode(verdadero).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "cuadro de contenido";

	jQuery.extend( soporte, {
		tamaño de cajaReliable: función() {
			ComputeStyleTests();
			cuadro de retornoTamañoReliableVal;
		},
		pixelBoxStyles: función() {
			ComputeStyleTests();
			devolver pixelBoxStylesVal;
		},
		Posición de píxel: función() {
			ComputeStyleTests();
			devolver pixelPositionVal;
		},
		margenIzquierdo confiable: función() {
			ComputeStyleTests();
			devolver confiableMarginLeftVal;
		},
		tamaño del cuadro de desplazamiento: función() {
			ComputeStyleTests();
			devolver cuadro de desplazamientoSizeVal;
		},

		// Soporte: IE 9 - 11+, Edge 15 - 18+
		// IE/Edge informa erróneamente `getComputedStyle` de las filas de la tabla con ancho/alto
		// establecido en CSS mientras que las propiedades `offset*` informan valores correctos.
		// El comportamiento en IE 9 es más sutil que en las versiones más nuevas y pasa
		// algunas versiones de esta prueba; ¡Asegúrate de no hacerlo pasar allí!
		//
		// Soporte: Firefox 70+
		// Sólo Firefox incluye anchos de borde
		// en dimensiones calculadas. (gh-4529)
		DimensionesTr confiables: función() {
			tabla var, tr, trChild, trStyle;
			if (confiableTrDimensionsVal == nulo) {
				tabla = document.createElement( "tabla" );
				tr = documento.createElement( "tr" );
				trChild = document.createElement( "div" );

				table.style.cssText = "posición:absoluta;izquierda:-11111px;border-collapse:separate";
				tr.style.cssText = "tamaño de caja: caja de contenido; borde: 1 px sólido";

				// Soporte: Chrome 86+
				// La altura establecida mediante cssText no se aplica.
				// La altura calculada luego vuelve a ser 0.
				tr.style.height = "1px";
				trChild.style.height = "9px";

				// Soporte: Android 8 Chrome 86+
				// En nuestro iframe bodyBackground.html,
				// la visualización de todos los elementos div está configurada en "inline",
				// lo que causa un problema sólo en Android 8 Chrome 86.
				// Garantizar que el div sea `display: block`
				// soluciona este problema.
				trChild.style.display = "bloquear";

				elementodocumento
					.appendChild( tabla )
					.appendChild(tr)
					.appendChild(trChild);

				trStyle = ventana.getComputedStyle( tr );
				confiableTrDimensionsVal = (parseInt(trStyle.height, 10) +
					parseInt(trStyle.borderTopWidth, 10) +
					parseInt(trStyle.borderBottomWidth, 10) ) === tr.offsetHeight;

				documentElement.removeChild( tabla );
			}
			devolver confiableTrDimensionsVal;
		}
	} );
} )();


función curCSS(elem, nombre, calculado) {
	var ancho, minWidth, maxWidth, ret,
		isCustomProp = rcustomProp.test( nombre ),

		// Soporte: Firefox 51+
		// Recuperando el estilo antes de calcularlo de alguna manera
		// soluciona un problema por obtener valores incorrectos
		// en elementos separados
		estilo = elemento.estilo;

	calculado = calculado || getStyles(elemento);

	// getPropertyValue es necesario para:
	// .css('filtro') (solo IE 9, trac-12537)
	// .css('--propiedad personalizada) (gh-3144)
	si (calculado) {

		// Soporte: IE <=9 - 11+
		// IE sólo admite `"float"` en `getPropertyValue`; en estilos calculados
		// sólo está disponible como `"cssFloat"`. Ya no modificamos propiedades
		// enviado a `.css()` aparte de camelCasing, por lo que debemos verificar ambos.
		// Normalmente, esto crearía una diferencia en el comportamiento: si
		// `getPropertyValue` devuelve una cadena vacía, el valor devuelto
		// por `.css()` sería `indefinido`. Este suele ser el caso de
		// elementos desconectados. Sin embargo, en IE incluso los elementos desconectados
		// sin estilos devuelve `"none"` para `getPropertyValue( "float")`
		ret = calculado.getPropertyValue( nombre ) || calculado[ nombre ];

		si (isCustomProp && ret) {

			// Soporte: Firefox 105+, Chrome <=105+
			// La especificación requiere recortar espacios en blanco para propiedades personalizadas (gh-4926).
			// Firefox solo recorta los espacios en blanco iniciales. Chrome simplemente colapsa
			// espacios en blanco iniciales y finales en un solo espacio.
			//
			// Recurrir a `indefinido` si se devuelve una cadena vacía.
			// Esto colapsa una definición faltante con propiedad definida
			// y se establece en una cadena vacía pero no hay una API estándar
			// permitiéndonos diferenciarlos sin penalizar el rendimiento
			// y devolver `indefinido` se alinea con jQuery anterior.
			//
			// rtrimCSS trata U+000D CARRIAGE RETORNO y U+000C FORM FEED
			// como espacios en blanco mientras que CSS no, pero esto no es un problema
			// porque el preprocesamiento de CSS los reemplaza con U+000A LINE FEED
			// (que *es* espacios en blanco CSS)
			// https://www.w3.org/TR/css-syntax-3/#input-preprocessing
			ret = ret.replace( rtrimCSS, "$1" ) || indefinido;
		}

		si (ret === "" &&! Está adjunto (elem)) {
			ret = jQuery.style(elem, nombre);
		}

		// Un homenaje al "increíble truco de Dean Edwards"
		// El navegador de Android devuelve el porcentaje para algunos valores,
		// pero el ancho parece ser confiablemente píxeles.
		// Esto va en contra del borrador de especificación CSSOM:
		// https://drafts.csswg.org/cssom/#resolved-values
		if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(nombre)) {

			// Recuerda los valores originales
			ancho = estilo.ancho;
			minWidth = estilo.minWidth;
			maxWidth = estilo.maxWidth;

			// Introduce los nuevos valores para obtener un valor calculado
			style.minWidth = style.maxWidth = style.width = ret;
			ret = ancho.calculado;

			// Revertir los valores cambiados
			estilo.ancho = ancho;
			estilo.minWidth = minWidth;
			estilo.maxWidth = maxWidth;
		}
	}

	devolver ret! == indefinido?

		// Soporte: IE <=9 - 11 solamente
		// IE devuelve el valor zIndex como un número entero.
		ret + "" :
		retirado;
}


función agregarGetHookIf( condiciónFn, ganchoFn ) {

	// Defina el gancho, comprobaremos en la primera ejecución si es realmente necesario.
	devolver {
		obtener: función() {
			si (condiciónFn()) {

				// No se necesita el gancho (o no es posible usarlo debido
				// a la dependencia que falta), elimínela.
				eliminar this.get;
				devolver;
			}

			// Se necesita gancho; redefinirlo para que la prueba de soporte no se vuelva a ejecutar.
			return (this.get = ganchoFn). Aplicar (esto, argumentos);
		}
	};
}


var cssPrefixes = [ "Webkit", "Moz", "ms" ],
	estilovacío = document.createElement( "div").estilo,
	propiedades del proveedor = {};

// Devuelve una propiedad con prefijo del proveedor o indefinida
función proveedorPropName (nombre) {

	// Comprobar nombres con prefijo de proveedor
	var capName = nombre[ 0 ].toUpperCase() + nombre.slice( 1 ),
		i = cssPrefixes.length;

	mientras yo-- ) {
		nombre = cssPrefixes[ i ] + capName;
		si (nombre en estilo vacío) {
			nombre de retorno;
		}
	}
}

// Devuelve un jQuery.cssProps potencialmente asignado o una propiedad con prefijo de proveedor
función finalPropName (nombre) {
	var final = jQuery.cssProps[ nombre ] || sellerProps[ nombre ];

	si (final) {
		regreso definitivo;
	}
	si (nombre en estilo vacío) {
		nombre de retorno;
	}
	devolver sellerProps[ nombre ] = proveedorPropName( nombre ) || nombre;
}


var

	// Intercambiable si la visualización no es ninguna o comienza con la tabla
	// excepto "tabla", "celda de tabla" o "título de tabla"
	// Consulte aquí los valores de visualización: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	cssShow = { posición: "absoluta", visibilidad: "oculta", visualización: "bloque" },
	cssNormalTransform = {
		Espacio entre letras: "0",
		fuentePeso: "400"
	};

función setPositiveNumber (_elem, valor, restar) {

	// Cualquier valor relativo (+/-) ya ha sido
	// normalizado en este punto
	var coincide = rcssNum.exec (valor);
	¿volver partidos?

		// Protege contra "resta" indefinida, por ejemplo, cuando se usa como en cssHooks
		Math.max( 0, coincide[ 2 ] - ( resta || 0 ) ) + ( coincide[ 3 ] || "px") :
		valor;
}

función boxModelAdjustment (elemento, dimensión, cuadro, isBorderBox, estilos, valor calculado) {
	var i = dimensión === "ancho"? 1: 0,
		adicional = 0,
		delta = 0,
		margenDelta = 0;

	// Puede que no sea necesario realizar ajustes
	if (cuadro === (isBorderBox? "borde": "contenido")) {
		devolver 0;
	}

	para (; yo < 4; yo += 2) {

		// Ambos modelos de caja excluyen el margen
		// Cuente el delta del margen por separado para agregarlo solo después del ajuste del margen de desplazamiento.
		// Esto es necesario para que los márgenes negativos funcionen con `outerHeight(true)` (gh-3982).
		si (cuadro === "margen") {
			marginDelta += jQuery.css( elem, box + cssExpand[ i ], true, estilos );
		}

		// Si llegamos aquí con un cuadro de contenido, buscamos "relleno" o "borde" o "margen"
		si (! esBorderBox) {

			// Agregar relleno
			delta += jQuery.css( elem, "relleno" + cssExpand[ i ], verdadero, estilos );

			// Para "borde" o "margen", agregue borde
			si (cuadro! == "relleno") {
				delta += jQuery.css( elem, "borde" + cssExpand[ i ] + "Ancho", verdadero, estilos);

			// Pero, de lo contrario, haz un seguimiento
			} demás {
				extra += jQuery.css( elem, "borde" + cssExpand[ i ] + "Ancho", verdadero, estilos);
			}

		// Si llegamos aquí con un cuadro de borde (contenido + relleno + borde), estamos buscando "contenido" o
		// "relleno" o "margen"
		} demás {

			// Para "contenido", resta el relleno
			si (cuadro === "contenido") {
				delta -= jQuery.css( elem, "relleno" + cssExpand[ i ], verdadero, estilos );
			}

			// Para "contenido" o "relleno", resta el borde
			si (cuadro! == "margen") {
				delta -= jQuery.css( elem, "borde" + cssExpand[ i ] + "Ancho", verdadero, estilos);
			}
		}
	}

	// Cuenta para el canal de desplazamiento del cuadro de contenido positivo cuando se solicita proporcionando el valor calculado
	si (!isBorderBox && valorcalculado >= 0) {

		// offsetWidth/offsetHeight es una suma redondeada de contenido, relleno, margen de desplazamiento y borde
		// Suponiendo un margen de desplazamiento de número entero, restamos el resto y redondeamos hacia abajo
		delta += Math.max( 0, Math.ceil(
			elem[ "desplazamiento" + dimensión[ 0 ].toUpperCase() + dimensión.slice( 1 ) ] -
			valorcalculado -
			delta -
			extra -
			0,5

		// Si se desconoce offsetWidth/offsetHeight, entonces no podemos determinar el margen de desplazamiento del cuadro de contenido
		// Usa un cero explícito para evitar NaN (gh-3964)
		) ) || 0;
	}

	devolver delta + margenDelta;
}

función getWidthOrHeight( elemento, dimensión, extra ) {

	//Comenzar con estilo calculado
	var estilos = getStyles (elem),

		// Para evitar forzar un reflujo, solo recupera boxSizing si lo necesitamos (gh-4322).
		// Cuadro de contenido falso hasta que sepamos que es necesario para conocer el valor real.
		boxSizingNeeded = !support.boxSizingReliable() || extra,
		isBorderBox = tamaño de cajaNeeded &&
			jQuery.css( elem, "boxSizing", false, estilos ) === "border-box",
		valorIsBorderBox = esBorderBox,

		val = curCSS (elemento, dimensión, estilos),
		offsetProp = "desplazamiento" + dimensión[ 0 ].toUpperCase() + dimensión.slice( 1 );

	// Soporte: Firefox <=54
	// Devuelve un valor confuso que no sea un píxel o finge ignorancia, según corresponda.
	si (rnumnonpx.test(val)) {
		si (!extra) {
			valor de retorno;
		}
		val = "automático";
	}


	// Soporte: IE 9 - 11 solamente
	// Utilice offsetWidth/offsetHeight cuando el tamaño de la caja no sea confiable.
	// En esos casos, se puede confiar en que el valor calculado sea border-box.
	if ( ( !support.boxSizingReliable() && esBorderBox ||

		// Soporte: IE 10 - 11+, Edge 15 - 18+
		// IE/Edge informa erróneamente `getComputedStyle` de las filas de la tabla con ancho/alto
		// establecido en CSS mientras que las propiedades `offset*` informan valores correctos.
		// Curiosamente, en algunos casos IE 9 no sufre este problema.
		!support.reliableTrDimensions() && nombredenodo( elem, "tr") ||

		// Recurrir a offsetWidth/offsetHeight cuando el valor es "auto"
		// Esto sucede para elementos en línea sin configuración explícita (gh-3571)
		valor === "automático" ||

		// Soporte: Android <=4.1 - 4.3 solamente
		// Utilice también offsetWidth/offsetHeight para dimensiones en línea mal informadas (gh-3602)
		!parseFloat( val ) && jQuery.css( elem, "display", false, estilos ) === "en línea") &&

		//Asegúrate de que el elemento esté visible y conectado
		elem.getClientRects().longitud) {

		isBorderBox = jQuery.css( elem, "boxSizing", false, estilos ) === "border-box";

		// Cuando esté disponible, offsetWidth/offsetHeight dimensiones aproximadas del cuadro de borde.
		// Cuando no esté disponible (por ejemplo, SVG), suponga que el tamaño de la caja no es confiable e interprete el
		// valor recuperado como dimensión del cuadro de contenido.
		valueIsBorderBox = offsetProp en elem;
		si (valorIsBorderBox) {
			val = elem[ offsetProp ];
		}
	}

	// Normalizar "" y auto
	val = analizarFloat( val ) || 0;

	//Ajustar para el modelo de caja del elemento
	retorno (val +
		ajuste del modelo de caja (
			elemento,
			dimensión,
			adicional || (isBorderBox? "borde": "contenido"),
			valor es borderbox,
			estilos,

			// Proporciona el tamaño calculado actual para solicitar el cálculo del margen de desplazamiento (gh-3589)
			vale
		)
	) + "px";
}

jQuery.extender ({

	// Agregar ganchos de propiedad de estilo para anular el valor predeterminado
	// comportamiento de obtener y establecer una propiedad de estilo
	cssHooks: {
		opacidad: {
			obtener: función (elemento, calculado) {
				si (calculado) {

					// Siempre deberíamos recuperar un número de la opacidad
					var ret = curCSS( elem, "opacidad" );
					devolver ret === "" ? "1" : retirado;
				}
			}
		}
	},

	// No agregue automáticamente "px" a estas propiedades posiblemente sin unidades
	númerocss: {
		animaciónIterationCount: verdadero,
		relación de aspecto: verdadero,
		borderImageSlice: verdadero,
		recuento de columnas: verdadero,
		flexGrow: verdadero,
		flexShrink: verdadero,
		peso de fuente: verdadero,
		área de cuadrícula: verdadero,
		columna de cuadrícula: verdadero,
		gridColumnEnd: verdadero,
		gridColumnStart: verdadero,
		gridRow: verdadero,
		gridRowEnd: verdadero,
		gridRowStart: verdadero,
		altura de línea: verdadero,
		opacidad: verdadera,
		orden: verdadero,
		huérfanos: cierto,
		escala: verdadero,
		viudas: cierto,
		Índice z: verdadero,
		zoom: verdadero,

		// relacionado con SVG
		fillOpacity: verdadero,
		FloodOpacity: verdadero,
		detenerOpacidad: verdadero,
		trazoMiterlimit: verdadero,
		trazoOpacidad: verdadero
	},

	// Agrega propiedades cuyos nombres deseas corregir antes
	// estableciendo u obteniendo el valor
	cssProps: {},

	// Obtener y establecer la propiedad de estilo en un nodo DOM
	estilo: función (elemento, nombre, valor, extra) {

		// No establezcas estilos en texto y nodos de comentarios
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			devolver;
		}

		//Asegúrate de que estamos trabajando con el nombre correcto
		var ret, tipo, ganchos,
			nombreorigen = casocamello( nombre ),
			isCustomProp = rcustomProp.test( nombre ),
			estilo = elemento.estilo;

		// Asegúrate de que estamos trabajando con el nombre correcto. nosotros no
		// quiero consultar el valor si es una propiedad personalizada de CSS
		// ya que están definidos por el usuario.
		si (! esPropPersonalizada) {
			nombre = nombrePropfinal(nombreorigen);
		}

		// Obtiene el enlace para la versión con prefijo y luego la versión sin prefijo
		ganchos = jQuery.cssHooks[ nombre ] || jQuery.cssHooks[nombreorigen];

		// Comprobamos si estamos estableciendo un valor
		si (valor! == indefinido) {
			tipo = tipo de valor;

			// Convierte "+=" o "-=" a números relativos (trac-7345)
			if ( tipo === "cadena" && ( ret = rcssNum.exec( valor ) ) && ret[ 1 ] ) {
				valor = ajustarCSS(elem, nombre, ret);

				// Corrige el error trac-9237
				tipo = "número";
			}

			// Asegúrate de que los valores nulos y NaN no estén establecidos (trac-7116)
			si (valor == nulo || valor! == valor) {
				devolver;
			}

			// Si se pasó un número, agrega la unidad (excepto para ciertas propiedades CSS)
			// La verificación isCustomProp se puede eliminar en jQuery 4.0 cuando solo agregamos automáticamente
			// "px" a algunos valores codificados.
			if ( escriba === "número" && !isCustomProp ) {
				valor += ret && ret[ 3 ] || (jQuery.cssNumber[nombreorigen]? "": "px");
			}

			// los accesorios background-* afectan los valores del clon original
			if (!support.clearCloneStyle && valor === "" && nombre.indexOf( "fondo") === 0) {
				estilo[ nombre ] = "heredar";
			}

			// Si se proporcionó un gancho, use ese valor; de lo contrario, simplemente establezca el valor especificado
			if (!hooks || !( "establecer" en ganchos ) ||
				(valor = ganchos.set(elem, valor, extra))!== indefinido) {

				si (isCustomProp) {
					style.setProperty( nombre, valor );
				} demás {
					estilo[ nombre ] = valor;
				}
			}

		} demás {

			// Si se proporcionó un gancho, obtenemos el valor no calculado desde allí
			if (ganchos && "obtener" en ganchos &&
				(ret = ganchos.get (elem, falso, extra))! == indefinido) {

				volver atrás;
			}

			// De lo contrario, simplemente obtenemos el valor del objeto de estilo.
			estilo de retorno [nombre];
		}
	},

	css: función (elemento, nombre, extra, estilos) {
		var val, num, ganchos,
			nombreorigen = casocamello( nombre ),
			isCustomProp = rcustomProp.test( nombre );

		// Asegúrate de que estamos trabajando con el nombre correcto. nosotros no
		// quiero modificar el valor si es una propiedad personalizada de CSS
		// ya que están definidos por el usuario.
		si (! esPropPersonalizada) {
			nombre = nombrePropfinal(nombreorigen);
		}

		// Pruebe con el nombre con prefijo seguido del nombre sin prefijo
		ganchos = jQuery.cssHooks[ nombre ] || jQuery.cssHooks[nombreorigen];

		// Si se proporcionó un gancho, obtenemos el valor calculado desde allí
		if (ganchos && "obtener" en ganchos) {
			val = ganchos.get(elem, verdadero, extra);
		}

		// De lo contrario, si existe una forma de obtener el valor calculado, úsela
		si (val === indefinido) {
			val = curCSS(elem, nombre, estilos);
		}

		// Convertir "normal" a valor calculado
		if (val === "normal" && nombre en cssNormalTransform) {
			val = cssNormalTransform[ nombre ];
		}

		// Convertirlo en numérico si es forzado o si se proporcionó un calificador y val parece numérico
		si (adicional === "" || adicional) {
			número = parseFloat( val );
			devolver extra === verdadero || ¿Es finito (núm)? número || 0: valor;
		}

		valor de retorno;
	}
} );

jQuery.each( [ "alto", "ancho" ], función( _i, dimensión ) {
	jQuery.cssHooks[ dimensión ] = {
		obtener: función (elemento, calculado, extra) {
			si (calculado) {

				// Ciertos elementos pueden tener información de dimensiones si los mostramos de forma invisible
				// pero debe tener un estilo de visualización actual que beneficie
				devolver rdisplayswap.test( jQuery.css( elem, "display") ) &&

					// Soporte: Safari 8+
					// Las columnas de la tabla en Safari tienen un ancho de desplazamiento distinto de cero y cero
					// getBoundingClientRect().width a menos que se cambie la visualización.
					// Soporte: IE <=11 solamente
					// Ejecutando getBoundingClientRect en un nodo desconectado
					// en IE arroja un error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width )?
					intercambiar (elem, cssShow, función () {
						devuelve getWidthOrHeight(elem, dimensión, extra);
					} ):
					getWidthOrHeight(elem,dimensión,extra);
			}
		},

		conjunto: función (elemento, valor, extra) {
			coincidencias de var,
				estilos = obtenerEstilos(elem),

				// Solo lee estilos.posición si la prueba tiene posibilidades de fallar
				// para evitar forzar un reflujo.
				scrollboxSizeBuggy = !support.scrollboxSize() &&
					estilos.posición === "absoluta",

				// Para evitar forzar un reflujo, solo busca boxSizing si lo necesitamos (gh-3991)
				boxSizingNeeded = scrollboxSizeBuggy || extra,
				isBorderBox = tamaño de cajaNeeded &&
					jQuery.css( elem, "boxSizing", false, estilos ) === "border-box",
				restar = extra ?
					ajuste del modelo de caja (
						elemento,
						dimensión,
						extra,
						esBorderBox,
						estilos
					) :
					0;

			// Tenga en cuenta las dimensiones del cuadro de borde no confiables comparando el desplazamiento* con el calculado y
			// falsificar un cuadro de contenido para obtener borde y relleno (gh-3699)
			si (isBorderBox && scrollboxSizeBuggy) {
				restar -= Math.ceil(
					elem[ "desplazamiento" + dimensión[ 0 ].toUpperCase() + dimensión.slice( 1 ) ] -
					parseFloat (estilos [dimensión]) -
					boxModelAdjustment (elemento, dimensión, "borde", falso, estilos) -
					0,5
				);
			}

			// Convertir a píxeles si es necesario ajustar el valor
			si (resta && (coincidencias = rcssNum.exec(valor)) &&
				( coincide con [ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimensión ] = valor;
				valor = jQuery.css (elem, dimensión);
			}

			devolver setPositiveNumber(elem, valor, restar);
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	función (elem, calculado) {
		si (calculado) {
			return ( parseFloat( curCSS( elem, "marginLeft") ) ||
				elem.getBoundingClientRect().izquierda -
					intercambiar (elemento, {margenIzquierdo: 0}, función() {
						devolver elem.getBoundingClientRect().left;
					} )
			) + "px";
		}
	}
);

// Animate utiliza estos ganchos para expandir las propiedades
jQuery.cada uno ({
	margen: "",
	relleno: "",
	ancho del borde"
}, función (prefijo, sufijo) {
	jQuery.cssHooks[ prefijo + sufijo ] = {
		expandir: función (valor) {
			var i = 0,
				expandido = {},

				// Asume un solo número si no es una cadena
				partes = tipo de valor === "cadena"? valor.split( " " ): [ valor ];

			para (; yo < 4; yo++) {
				expandido[ prefijo + cssExpand[ i ] + sufijo ] =
					partes[ i ] || partes[ i - 2 ] || partes[ 0 ];
			}

			retorno ampliado;
		}
	};

	si (prefijo! == "margen") {
		jQuery.cssHooks[ prefijo + sufijo ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend({
	css: función (nombre, valor) {
		acceso de retorno (esto, función (elemento, nombre, valor) {
			estilos var, len,
				mapa = {},
				yo = 0;

			si (Array.isArray (nombre)) {
				estilos = getStyles( elem );
				len = nombre.longitud;

				para (; yo < len; yo++) {
					mapa[nombre[i]] = jQuery.css(elem, nombre[i], falso, estilos);
				}

				mapa de regreso;
			}

			valor de retorno! == indefinido?
				jQuery.style (elemento, nombre, valor):
				jQuery.css(elem, nombre);
		}, nombre, valor, argumentos.longitud > 1);
	}
} );


función Interpolación (elemento, opciones, prop, fin, facilitación) {
	devolver nuevo Tween.prototype.init (elem, opciones, prop, fin, facilitación);
}
jQuery.Tween = Interpolación;

Interpolación.prototipo = {
	constructor: interpolación,
	init: función (elemento, opciones, prop, fin, flexibilización, unidad) {
		this.elem = elem;
		this.prop = prop;
		this.easing = flexibilización || jQuery.easing._default;
		this.opciones = opciones;
		this.start = this.now = this.cur();
		this.end = fin;
		esta.unidad = unidad || (jQuery.cssNumber[prop]? "": "px");
	},
	cur: función() {
		var ganchos = Tween.propHooks[ this.prop ];

		devolver ganchos && ganchos.get?
			ganchos.get (esto):
			Tween.propHooks._default.get (esto);
	},
	ejecutar: función (porcentaje) {
		var aliviado,
			ganchos = Tween.propHooks[ this.prop ];

		si (esta.opciones.duración) {
			this.pos = facilitado = jQuery.easing[ this.easing ](
				por ciento, esta.opciones.duración * por ciento, 0, 1, esta.opciones.duración
			);
		} demás {
			this.pos = facilitado = porcentaje;
		}
		this.now = (this.end - this.start) * facilitado + this.start;

		si (este.opciones.paso) {
			this.options.step.call (este.elem, este.ahora, este);
		}

		if (ganchos && ganchos.set) {
			ganchos.set (esto);
		} demás {
			Tween.propHooks._default.set (esto);
		}
		devolver esto;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Interpolación.propHooks = {
	_por defecto: {
		obtener: función (entre) {
			resultado de la variable;

			// Usa una propiedad en el elemento directamente cuando no es un elemento DOM,
			// o cuando no existe ninguna propiedad de estilo coincidente.
			si (tween.elem.nodeType! == 1 ||
				tween.elem[ tween.prop ] != nulo && tween.elem.style[ tween.prop ] == nulo ) {
				devolver interpolación.elem[ interpolación.prop ];
			}

			// Pasar una cadena vacía como tercer parámetro a .css automáticamente
			// intenta un parseFloat y recurre a una cadena si el análisis falla.
			// Valores simples como "10px" se analizan en Float;
			// los valores complejos como "rotate(1rad)" se devuelven tal cual.
			resultado = jQuery.css(tween.elem, tween.prop, "");

			// Las cadenas vacías, nulas, indefinidas y "auto" se convierten a 0.
			devolver !resultado || resultado === "automático"? 0: resultado;
		},
		conjunto: función (entre) {

			// Utilice el gancho de paso para la compatibilidad con la parte posterior.
			// Usa cssHook si está ahí.
			// Utilice .style si está disponible y utilice propiedades simples cuando estén disponibles.
			si (jQuery.fx.step[ interpolación.prop]) {
				jQuery.fx.step[ interpolación.prop ]( interpolación );
			} más si (tween.elem.nodeType === 1 && (
				jQuery.cssHooks[ interpolación.prop ] ||
					tween.elem.style[ finalPropName( tween.prop ) ] != nulo ) ) {
				jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
			} demás {
				interpolación.elem[ interpolación.prop ] = interpolación.ahora;
			}
		}
	}
};

// Soporte: IE <=9 solamente
// Enfoque basado en pánico para configurar cosas en nodos desconectados
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	conjunto: función (entre) {
		si (tween.elem.nodeType && tween.elem.parentNode) {
			interpolación.elem[ interpolación.prop ] = interpolación.ahora;
		}
	}
};

jQuery.facilitación = {
	lineal: función (p) {
		devolver p;
	},
	oscilación: función (p) {
		devolver 0,5 - Math.cos(p * Math.PI) / 2;
	},
	_default: "columpio"
};

jQuery.fx = Tween.prototype.init;

// Compatibilidad con versiones anteriores <1.8 punto de extensión
jQuery.fx.paso = {};




var
	fxAhora, en progreso,
	rfxtypes = /^(?:alternar|mostrar|ocultar)$/,
	rrun = /queueHooks$/;

programación de funciones() {
	si (en progreso) {
		if (document.hidden === false && ventana.requestAnimationFrame) {
			ventana.requestAnimationFrame(horario);
		} demás {
			window.setTimeout(horario, jQuery.fx.interval);
		}

		jQuery.fx.tick();
	}
}

// Las animaciones creadas sincrónicamente se ejecutarán sincrónicamente
función crearFxNow() {
	ventana.setTimeout( función() {
		fxNow = indefinido;
	} );
	retorno (fxNow = Fecha.now());
}

// Genera parámetros para crear una animación estándar.
función genFx (tipo, incluirAncho) {
	var cual,
		yo = 0,
		atributos = {altura: tipo};

	// Si incluimos el ancho, el valor del paso es 1 para hacer todos los valores de cssExpand,
	// de lo contrario, el valor del paso es 2 para omitir izquierda y derecha
	incluirAncho = incluirAncho? 1: 0;
	para (; i < 4; i += 2 - incluirAncho) {
		cual = cssExpand[ i ];
		atributos[ "margen" + cuál ] = atributos[ "relleno" + cuál ] = tipo;
	}

	si (incluye ancho) {
		atributos.opacidad = atributos.ancho = tipo;
	}

	atributos de retorno;
}

función createTween (valor, accesorio, animación) {
	interpolación de variables,
		colección = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		índice = 0,
		longitud = colección.longitud;
	para (; índice < longitud; índice++) {
		if ((interpolación = colección[índice].llamada(animación, prop, valor))) {

			// Hemos terminado con esta propiedad
			regresar entre;
		}
	}
}

función defaultPrefilter( elem, props, opts ) {
	var prop, valor, alternar, ganchos, oldfire, propTween, restaurarDisplay, mostrar,
		isBox = "ancho" en accesorios || "altura" en accesorios,
		anima = esto,
		origen = {},
		estilo = elemento.estilo,
		oculto = elem.nodeType && está oculto dentro del árbol (elem),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Las animaciones de salto de cola secuestran los ganchos fx
	si (!opts.cola) {
		ganchos = jQuery._queueHooks( elem, "fx" );
		si (hooks.unqueued == nulo) {
			ganchos.sin cola = 0;
			oldfire = ganchos.empty.fire;
			ganchos.empty.fire = función() {
				si (! ganchos.sin cola) {
					fuego viejo();
				}
			};
		}
		ganchos.unqueued++;

		anim.siempre (función() {

			// Asegúrese de que se llame al controlador completo antes de que esto se complete
			anim.siempre (función() {
				ganchos.unqueued--;
				si (!jQuer y.queue( elem, "fx").length) {
					ganchos.empty.fire();
				}
			} );
		} );
	}

	// Detectar mostrar/ocultar animaciones
	para (apoyo en accesorios) {
		valor = accesorios [propiedad];
		si (rfxtypes.test(valor)) {
			eliminar accesorios [prop];
			alternar = alternar || valor === "alternar";
			if (valor === (oculto? "ocultar": "mostrar")) {

				// Finge estar oculto si se trata de un "espectáculo" y
				// todavía hay datos de un mostrar/ocultar detenido
				if (valor === "mostrar" && mostrar datos && mostrar datos[ prop ] !== indefinido ) {
					oculto = verdadero;

				// Ignora todos los demás datos de mostrar/ocultar no operativos
				} demás {
					continuar;
				}
			}
			orig[ prop ] = mostrar datos && mostrar datos [ prop ] || jQuery.style(elem, prop);
		}
	}

	// Rescate si esto no es operativo como .hide().hide()
	propTween = !jQuery.isEmptyObject( accesorios );
	if (!propTween && jQuery.isEmptyObject(orig)) {
		devolver;
	}

	// Restringir los estilos "desbordamiento" y "visualización" durante las animaciones del cuadro
	si (isBox && elem.nodeType === 1) {

		// Soporte: IE <=9 - 11, Edge 12 - 15
		// Registra los 3 atributos de desbordamiento porque IE no infiere la taquigrafía
		// de overflowX y overflowY con valores idénticos y Edge simplemente refleja
		// el valor overflowX allí.
		opts.overflow = [estilo.overflow, estilo.overflowX, estilo.overflowY];

		// Identifique un tipo de visualización, prefiriendo mostrar/ocultar datos antiguos a la cascada CSS
		restaurarDisplay = dataShow && dataShow.display;
		si (restoreDisplay == nulo) {
			restaurarDisplay = dataPriv.get( elem, "mostrar" );
		}
		mostrar = jQuery.css( elem, "mostrar" );
		si (mostrar === "ninguno") {
			si (restaurar pantalla) {
				mostrar = restaurarPantalla;
			} demás {

				// Obtener valores no vacíos forzando temporalmente la visibilidad
				mostrarOcultar([elem], verdadero);
				restaurarDisplay = elem.style.display || restaurar pantalla;
				mostrar = jQuery.css( elem, "mostrar" );
				mostrarOcultar([elem]);
			}
		}

		// Animar elementos en línea como bloque en línea
		if ( mostrar === "en línea" || mostrar === "bloque en línea" && restaurarDisplay! = nulo) {
			if (jQuery.css( elem, "flotante") === "ninguno") {

				// Restaura el valor de visualización original al final de las animaciones puras de mostrar/ocultar
				si (!propTween) {
					anim.hecho( función() {
						estilo.display = restaurarPantalla;
					} );
					si (restoreDisplay == nulo) {
						mostrar = estilo.mostrar;
						restaurarDisplay = mostrar === "ninguno"? "" : mostrar;
					}
				}
				style.display = "bloque en línea";
			}
		}
	}

	si (opts.overflow) {
		style.overflow = "oculto";
		anim.siempre (función() {
			estilo.overflow = opts.overflow[ 0 ];
			estilo.overflowX = opts.overflow[ 1 ];
			estilo.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implementar mostrar/ocultar animaciones
	propTween = falso;
	para (apoyo en origen) {

		// Configuración general de mostrar/ocultar para la animación de este elemento
		si (!propTween) {
			si (mostrar datos) {
				if ("oculto" en dataShow) {
					oculto = dataShow.hidden;
				}
			} demás {
				dataShow = dataPriv.access( elem, "fxshow", { display: restaurarDisplay } );
			}

			// Almacenar oculto/visible para alternar de modo que `.stop().toggle()` "se invierta"
			si (alternar) {
				dataShow.hidden = !oculto;
			}

			// Mostrar elementos antes de animarlos
			si (oculto) {
				mostrarOcultar([elem], verdadero);
			}

			/* eslint-deshabilita la función sin bucle */

			anim.hecho( función() {

				/* eslint-enable no-loop-func */

				// El último paso de una animación "ocultar" es en realidad ocultar el elemento
				si (! oculto) {
					mostrarOcultar([elem]);
				}
				dataPriv.remove(elem, "fxshow");
				para (apoyo en origen) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Configuración por propiedad
		propTween = createTween( oculto ? dataShow[ prop ] : 0, prop, anim );
		if (!(prop en dataShow)) {
			dataShow[ prop ] = propTween.start;
			si (oculto) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

función propFilter (accesorios, facilitación especial) {
	índice var, nombre, flexibilización, valor, ganchos;

	// camelCase, especialEasing y expandir cssHook pase
	para (índice en accesorios) {
		nombre = camelCase( índice );
		flexibilización = flexibilización especial[ nombre ];
		valor = accesorios[índice];
		si (Array.isArray (valor)) {
			flexibilización = valor[ 1 ];
			valor = accesorios[ índice ] = valor[ 0 ];
		}

		si (índice! == nombre) {
			accesorios[ nombre ] = valor;
			eliminar accesorios [índice];
		}

		ganchos = jQuery.cssHooks[ nombre ];
		if (ganchos && "expandir" en ganchos) {
			valor = ganchos.expandir (valor);
			eliminar accesorios [nombre];

			// No del todo $.extend, esto no sobrescribirá las claves existentes.
			// Reutilizando 'índice' porque tenemos el "nombre" correcto
			para (índice en valor) {
				if (!(índice en accesorios)) {
					accesorios[índice] = valor[índice];
					especialEasing[ índice ] = flexibilización;
				}
			}
		} demás {
			flexibilización especial[ nombre ] = flexibilización;
		}
	}
}

función Animación (elemento, propiedades, opciones) {
	resultado variable,
		interrumpido,
		índice = 0,
		longitud = Animación.prefiltros.longitud,
		diferido = jQuery.Diferido().always( función() {

			// No coincide con elem en el selector animado
			eliminar tick.elem;
		} ),
		marca = función() {
			si (detenido) {
				falso retorno;
			}
			var horaActual = fxAhora || crearFxNow(),
				restante = Math.max (0, animación.startTime + animación.duración - currentTime),

				// Soporte: Android 2.3 solamente
				// El error de bloqueo arcaico no nos permitirá usar `1 - ( 0.5 || 0 )` (trac-12497)
				temp = restante / animación.duración || 0,
				porcentaje = 1 - temperatura,
				índice = 0,
				longitud = animación.interpolaciones.longitud;

			para (; índice < longitud; índice++) {
				animación.tweens[ índice ].run( porcentaje );
			}

			deferred.notifyWith( elem, [animación, porcentaje, restante]);

			// Si hay más por hacer, cede
			if (porcentaje <1 && longitud) {
				retorno restante;
			}

			// Si se trata de una animación vacía, sintetiza una notificación de progreso final
			si (! longitud) {
				diferido.notifyWith( elem, [animación, 1, 0]);
			}

			// Resolver la animación e informar su conclusión.
			diferido.resolveWith (elem, [animación]);
			falso retorno;
		},
		animación = promesa diferida ({
			elemento: elemento,
			accesorios: jQuery.extend ({}, propiedades),
			opta: jQuery.extend (verdadero, {
				Facilitación especial: {},
				flexibilización: jQuery.easing._default
			}, opciones ),
			Propiedades originales: propiedades,
			Opciones originales: opciones,
			hora de inicio: fxNow || crearFxNow(),
			duración: opciones.duración,
			preadolescentes: [],
			crear entre: función (prop, fin) {
				var tween = jQuery.Tween( elem, animación.opts, prop, end,
					animación.opts.specialEasing[ prop ] || animación.opts.easing);
				animación.tweens.push( interpolación );
				regresar entre;
			},
			detener: función (gotoEnd) {
				índice var = 0,

					// Si vamos al final, queremos ejecutar todas las interpolaciones
					// de lo contrario nos saltamos esta parte
					longitud = ir al final? animación.interpolaciones.longitud: 0;
				si (detenido) {
					devolver esto;
				}
				detenido = verdadero;
				para (; índice < longitud; índice++) {
					animación.tweens[ índice ].run( 1 );
				}

				// Resolver cuando jugamos el último fotograma; de lo contrario, rechazar
				si (ir al final) {
					diferido.notifyWith( elem, [animación, 1, 0]);
					diferido.resolveWith( elem, [animación, gotoEnd]);
				} demás {
					diferido.rejectWith (elem, [animación, gotoEnd]);
				}
				devolver esto;
			}
		} ),
		accesorios = animación.props;

	propFilter (accesorios, animación.opts.specialEasing);

	para (; índice < longitud; índice++) {
		resultado = Animación.prefilters[índice].call(animación, elemento, accesorios, animación.opts);
		si (resultado) {
			if (isFunction(resultado.parar) ) {
				jQuery._queueHooks(animación.elem, animación.opts.queue).stop =
					resultado.stop.bind( resultado );
			}
			resultado de devolución;
		}
	}

	jQuery.map (accesorios, createTween, animación);

	si (isFunction(animación.opts.start)) {
		animación.opts.start.call(elem, animación);
	}

	// Adjuntar devoluciones de llamada desde opciones
	animación
		.progreso (animación.opts.progreso)
		.done( animación.opts.done, animación.opts.completa )
		.fail(animación.opts.fail)
		.always(animación.opts.always);

	jQuery.fx.temporizador(
		jQuery.extend(marca, {
			elemento: elemento,
			anime: animación,
			cola: animación.opts.queue
		} )
	);

	animación de retorno;
}

jQuery.Animación = jQuery.extend( Animación, {

	interpolaciones: {
		"*": [ función (propiedad, valor) {
			var interpolación = this.createTween(prop, valor);
			ajustarCSS( interpolación.elem, prop, rcssNum.exec( valor ), interpolación );
			regresar entre;
		} ]
	},

	interpolación: función (accesorios, devolución de llamada) {
		si (isFunction (accesorios)) {
			devolución de llamada = accesorios;
			accesorios = [ "*" ];
		} demás {
			accesorios = accesorios.match(rnothtmlwhite);
		}

		apoyo var,
			índice = 0,
			longitud = accesorios.longitud;

		para (; índice < longitud; índice++) {
			prop = props[ índice ];
			Animación.tweeners[ prop ] = Animación.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( devolución de llamada );
		}
	},

	prefiltros: [prefiltro predeterminado],

	prefiltro: función (devolución de llamada, anteponer) {
		si (anteponer) {
			Animation.prefilters.unshift(devolución de llamada);
		} demás {
			Animation.prefilters.push(devolución de llamada);
		}
	}
} );

jQuery.speed = función (velocidad, flexibilización, fn) {
	var opt = velocidad && tipo de velocidad === "objeto"? jQuery.extend ({}, velocidad): {
		completo: fn || !fn && flexibilización ||
			isFunction (velocidad) && velocidad,
		duración: velocidad,
		flexibilización: fn && flexibilización || flexibilización && !isFunction( flexibilización ) && flexibilización
	};

	// Ir al estado final si los fx están desactivados
	si (jQuery.fx.off) {
		duración opt = 0;

	} demás {
		if (tipo de opción.duración! == "número") {
			si (opt.duration en jQuery.fx.speeds) {
				opt.duración = jQuery.fx.speeds[opt.duración];

			} demás {
				opt.duración = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalizar opt.queue - verdadero/indefinido/null -> "fx"
	si (opt.queue == nulo || opt.queue === verdadero) {
		opt.queue = "fx";
	}

	// Cola
	opt.old = opt.completo;

	opt.completo = función() {
		si (isFunction(opt.old)) {
			opt.old.call (esto);
		}

		si (opt.cola) {
			jQuery.dequeue (esto, opt.queue);
		}
	};

	opción de retorno;
};

jQuery.fn.extend({
	fadeTo: función (velocidad, a, suavización, devolución de llamada) {

		// Muestra los elementos ocultos después de establecer la opacidad en 0
		devuelve this.filter( isHiddenWithinTree ).css( "opacidad", 0 ).show()

			// Animar al valor especificado
			.end().animate( {opacidad: a }, velocidad, suavización, devolución de llamada);
	},
	animar: función (prop, velocidad, aceleración, devolución de llamada) {
		var vacío = jQuery.isEmptyObject(prop),
			optall = jQuery.speed (velocidad, facilitación, devolución de llamada),
			hacerAnimación = función() {

				// Operar con una copia de prop para que no se pierda la flexibilización por propiedad
				var anim = Animación (esto, jQuery.extend ({}, prop), optall);

				// Animaciones vacías o el acabado se resuelve inmediatamente.
				if (vacío || dataPriv.get(esto, "finalizar")) {
					anim.stop(verdadero);
				}
			};

		hacerAnimación.finish = hacerAnimación;

		regresar vacío || optall.queue === falso?
			this.each(hacerAnimación):
			this.queue( optall.queue, doAnimation );
	},
	detener: función (tipo, clearQueue, gotoEnd) {
		var stopQueue = función (enganches) {
			var parada = ganchos.parada;
			eliminar ganchos.stop;
			detener( ir aFin );
		};

		if (tipo de tipo! == "cadena") {
			gotoEnd = clearQueue;
			clearQueue = tipo;
			tipo = indefinido;
		}
		si (borrar cola) {
			this.queue( tipo || "fx", [] );
		}

		devolver esto.cada uno (función() {
			var de cola = verdadero,
				índice = tipo! = nulo && tipo + "queueHooks",
				temporizadores = jQuery.temporizadores,
				datos = dataPriv.get (esto);

			si (índice) {
				si (datos[índice] && datos[índice].parar) {
					stopQueue(datos[índice]);
				}
			} demás {
				para (índice en datos) {
					if (datos[índice] && datos[índice].stop && rrun.test(índice)) {
						stopQueue(datos[índice]);
					}
				}
			}

			para (índice = temporizadores.longitud; índice--;) {
				if (temporizadores[índice].elem === esto &&
					(tipo == nulo || temporizadores[índice].cola === tipo)) {

					temporizadores[índice].anim.stop(gotoEnd);
					sacar de cola = falso;
					temporizadores.splice( índice, 1 );
				}
			}

			// Inicia el siguiente en la cola si el último paso no fue forzado.
			// Los temporizadores actualmente llamarán a sus devoluciones de llamada completas, lo que
			// quitará la cola pero solo si fueran gotoEnd.
			if (quitar de la cola ||!gotoEnd) {
				jQuery.dequeue (esto, tipo);
			}
		} );
	},
	finalizar: función (tipo) {
		si (escriba! == falso) {
			tipo = tipo || "fx";
		}
		devolver esto.cada uno (función() {
			índice var,
				datos = dataPriv.get (esto),
				cola = datos [tipo + "cola"],
				ganchos = datos [tipo + "colaHooks"],
				temporizadores = jQuery.temporizadores,
				longitud = cola? cola.longitud: 0;

			// Habilitar el indicador de finalización en datos privados
			datos.finish = verdadero;

			// Primero vacía la cola
			jQuery.queue (este, tipo, []);

			if (ganchos && ganchos.parar) {
				ganchos.stop.call (esto, verdadero);
			}

			// Busca cualquier animación activa y finalízala.
			para (índice = temporizadores.longitud; índice--;) {
				if (temporizadores[índice].elem === este && temporizadores[índice].queue === tipo) {
					temporizadores[índice].anim.stop(verdadero);
					temporizadores.splice( índice, 1 );
				}
			}

			// Busca animaciones en la cola anterior y termínalas
			para (índice = 0; índice < longitud; índice++) {
				if (cola[índice] && cola[índice].finish) {
					cola[índice].finish.call(esto);
				}
			}

			// Desactivar la bandera de llegada
			eliminar datos.finish;
		} );
	}
} );

jQuery.each( [ "alternar", "mostrar", "ocultar" ], función( _i, nombre ) {
	var cssFn = jQuery.fn[ nombre ];
	jQuery.fn[nombre] = función(velocidad, facilitación, devolución de llamada) {
		velocidad de retorno == nulo || tipo de velocidad === "booleano"?
			cssFn.apply (esto, argumentos):
			this.animate( genFx( nombre, verdadero ), velocidad, facilitación, devolución de llamada );
	};
} );

// Generar atajos para animaciones personalizadas
jQuery.cada uno ({
	slideDown: genFx( "mostrar"),
	slideUp: genFx( "ocultar"),
	slideToggle: genFx( "alternar"),
	desvanecerse: {opacidad: "mostrar" },
	desvanecerse: {opacidad: "ocultar" },
	fadeToggle: {opacidad: "alternar" }
}, función (nombre, accesorios) {
	jQuery.fn[nombre] = función(velocidad, facilitación, devolución de llamada) {
		devuelve this.animate (accesorios, velocidad, aceleración, devolución de llamada);
	};
} );

jQuery.timers = [];
jQuery.fx.tick = función() {
	temporizador var,
		yo = 0,
		temporizadores = jQuery.temporizadores;

	fxNow = Fecha.ahora();

	para (; i < temporizadores.longitud; i++) {
		temporizador = temporizadores [i];

		// Ejecute el temporizador y retírelo de forma segura cuando haya terminado (lo que permite la eliminación externa)
		if (! temporizador() && temporizadores[ i ] === temporizador) {
			temporizadores.splice( i--, 1 );
		}
	}

	si (! temporizadores.longitud) {
		jQuery.fx.stop();
	}
	fxNow = indefinido;
};

jQuery.fx.timer = función (temporizador) {
	jQuery.timers.push( temporizador );
	jQuery.fx.start();
};

jQuery.fx.intervalo = 13;
jQuery.fx.start = función() {
	si (en progreso) {
		devolver;
	}

	en progreso = verdadero;
	cronograma();
};

jQuery.fx.stop = función() {
	en progreso = nulo;
};

jQuery.fx.velocidades = {
	lento: 600,
	rápido: 200,

	// velocidad predeterminada
	_predeterminado: 400
};


// Basado en el complemento de Clint Helfers, con permiso.
jQuery.fn.delay = función (hora, tipo) {
	tiempo = jQuery.fx? jQuery.fx.speeds[ tiempo ] || tiempo tiempo;
	tipo = tipo || "fx";

	devolver this.queue (tipo, función (siguiente, ganchos) {
		var tiempo de espera = ventana.setTimeout (siguiente, hora);
		ganchos.parada = función() {
			ventana.clearTimeout(tiempo de espera);
		};
	} );
};


( función() {
	var entrada = document.createElement ("entrada"),
		seleccionar = documento.createElement( "seleccionar"),
		opt = select.appendChild( document.createElement( "opción" ) );

	input.type = "casilla de verificación";

	// Soporte: Android <=4.3 solamente
	// El valor predeterminado para una casilla de verificación debe estar "activado"
	support.checkOn = input.value !== "";

	// Soporte: IE <=11 solamente
	// Debe acceder a selectedIndex para seleccionar las opciones predeterminadas
	support.optSelected = opt.seleccionado;

	// Soporte: IE <=11 solamente
	// Una entrada pierde su valor después de convertirse en radio
	entrada = document.createElement ("entrada");
	entrada.valor = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend({
	atributo: función (nombre, valor) {
		acceso de retorno (esto, jQuery.attr, nombre, valor, argumentos.longitud > 1);
	},

	eliminarAttr: función (nombre) {
		devolver esto.cada uno (función() {
			jQuery.removeAttr (esto, nombre);
		} );
	}
} );

jQuery.extender ({
	atributo: función (elemento, nombre, valor) {
		var ret, ganchos,
			nType = elem.nodeType;

		// No obtener/establecer atributos en nodos de texto, comentarios y atributos
		si (nTipo === 3 || nTipo === 8 || nTipo === 2 ) {
			devolver;
		}

		// Recurrir a la propiedad cuando los atributos no son compatibles
		si (tipo de elem.getAttribute === "indefinido") {
			devolver jQuery.prop(elem, nombre, valor);
		}

		// Los enlaces de atributos están determinados por la versión en minúsculas
		// Toma el gancho necesario si hay uno definido
		if (nType!== 1 ||!jQuery.isXMLDoc(elem)) {
			ganchos = jQuery.attrHooks[ nombre.toLowerCase() ] ||
				(jQuery.expr.match.bool.test(nombre)? boolHook: indefinido);
		}

		si (valor! == indefinido) {
			si (valor === nulo) {
				jQuery.removeAttr(elem, nombre);
				devolver;
			}

			if (ganchos && "establecido" en ganchos &&
				(ret = ganchos.set (elem, valor, nombre))! == indefinido) {
				volver atrás;
			}

			elem.setAttribute( nombre, valor + "" );
			valor de retorno;
		}

		if (ganchos && "obtener" en ganchos && (ret = ganchos.get(elem, nombre))!== nulo) {
			volver atrás;
		}

		ret = jQuery.find.attr(elem, nombre);

		// Los atributos inexistentes devuelven nulo, lo normalizamos a indefinido
		devolver ret == nulo? indefinido: retirado;
	},

	atributosHooks: {
		tipo: {
			conjunto: función (elemento, valor) {
				if (!support.radioValue && valor === "radio" &&
					nombrenodo( elem, "entrada") ) {
					var val = elem.valor;
					elem.setAttribute ("tipo", valor);
					si (valor) {
						elem.valor = val;
					}
					valor de retorno;
				}
			}
		}
	},

	removeAttr: función (elemento, valor) {
		nombre de la variable,
			yo = 0,

			// Los nombres de los atributos pueden contener espacios en blanco que no sean HTML
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = valor && valor.match(rnothtmlwhite);

		if (attrNames && elem.nodeType === 1) {
			while ((nombre = nombresDeAtributos[i++])) {
				elem.removeAttribute( nombre );
			}
		}
	}
} );

// Ganchos para atributos booleanos
boolHook = {
	conjunto: función (elemento, valor, nombre) {
		si (valor === falso) {

			// Elimina los atributos booleanos cuando se establece en falso
			jQuery.removeAttr(elem, nombre);
		} demás {
			elem.setAttribute( nombre, nombre );
		}
		nombre de retorno;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), función( _i, nombre ) {
	var getter = attrHandle[ nombre ] || jQuery.find.attr;

	attrHandle[ nombre ] = función( elem, nombre, isXML ) {
		var ret, mango,
			nombreenminúsculas = nombre.toLowerCase();

		si (! es XML) {

			// Evite un bucle infinito eliminando temporalmente esta función del getter
			handle = attrHandle[nombreenminúsculas];
			attrHandle[nombreenminúsculas] = ret;
			ret = getter (elem, nombre, isXML)! = nulo?
				Nombre en minúsculas:
				nulo;
			attrHandle[nombreenminúsculas] = identificador;
		}
		volver atrás;
	};
} );




var rfocusable = /^(?:entrada|seleccionar|área de texto|botón)$/i,
	rclickable = /^(?:a|área)$/i;

jQuery.fn.extend({
	prop: función (nombre, valor) {
		acceso de retorno (esto, jQuery.prop, nombre, valor, argumentos.longitud > 1);
	},

	eliminarProp: función (nombre) {
		devolver esto.cada uno (función() {
			eliminar esto[ jQuery.propFix[ nombre ] || nombre ];
		} );
	}
} );

jQuery.extender ({
	prop: función (elemento, nombre, valor) {
		var ret, ganchos,
			nType = elem.nodeType;

		// No obtener/establecer propiedades en nodos de texto, comentarios y atributos
		si (nTipo === 3 || nTipo === 8 || nTipo === 2 ) {
			devolver;
		}

		if (nType!== 1 ||!jQuery.isXMLDoc(elem)) {

			// Corregir nombre y adjuntar ganchos
			nombre = jQuery.propFix[ nombre ] || nombre;
			ganchos = jQuery.propHooks[ nombre ];
		}

		si (valor! == indefinido) {
			if (ganchos && "establecido" en ganchos &&
				(ret = ganchos.set (elem, valor, nombre))! == indefinido) {
				volver atrás;
			}

			retorno (elem[nombre] = valor);
		}

		if (ganchos && "obtener" en ganchos && (ret = ganchos.get(elem, nombre))!== nulo) {
			volver atrás;
		}

		devolver elemento[nombre];
	},

	propHooks: {
		índice de pestaña: {
			obtener: función (elemento) {

				// Soporte: IE <=9 - 11 solamente
				// elem.tabIndex no siempre devuelve el
				// valor correcto cuando no se ha establecido explícitamente
				// Utilice la recuperación de atributos adecuada (trac-12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				si (índice de tabulación) {
					return parseInt( tabindex, 10 );
				}

				si (
					rfocusable.test( elem.nombrenodo ) ||
					rclickable.test (elem.nodeName) &&
					elem.href
				) {
					devolver 0;
				}

				devolver -1;
			}
		}
	},

	propFix: {
		"para": "htmlPara",
		"clase": "nombre de clase"
	}
} );

// Soporte: IE <=11 solamente
// Accediendo a la propiedad selectedIndex
// obliga al navegador a respetar la configuración seleccionada
// en la opción
// El captador garantiza que se seleccione una opción predeterminada
// cuando estamos en un grupo de opciones
// la regla eslint "no-unused-expressions" está deshabilitada para este código
// ya que considera dichas adhesiones noop
si (!support.optSelected) {
	jQuery.propHooks.seleccionado = {
		obtener: función (elemento) {

			/* eslint no-expresiones-no-usadas: "apagado" */

			var padre = elem.parentNode;
			si (padre && padre.parentNode) {
				parent.parentNode.selectedIndex;
			}
			devolver nulo;
		},
		conjunto: función (elemento) {

			/* eslint no-expresiones-no-usadas: "apagado" */

			var padre = elem.parentNode;
			si (padre) {
				padre.selectedIndex;

				si (padre.parentNode) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.cada uno ([
	"tabIndex",
	"solo lectura",
	"longitud máxima",
	"espacio entre celdas",
	"relleno de celda",
	"intervalo de filas",
	"colSpan",
	"utilizarMapa",
	"Frontera del marco",
	"contenidoEditable"
], función() {
	jQuery.propFix[ this.toLowerCase() ] = esto;
} );




	// Elimina y contrae espacios en blanco según las especificaciones HTML
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	función stripAndCollapse (valor) {
		var tokens = value.match(rnothtmlwhite) || [];
		devolver tokens.join( " " );
	}


función obtenerClase(elemento) {
	devolver elem.getAttribute && elem.getAttribute( "clase") || "";
}

función clasesToArray (valor) {
	si (Array.isArray (valor)) {
		valor de retorno;
	}
	if (tipo de valor === "cadena") {
		valor de retorno.match(rnothtmlwhite) || [];
	}
	devolver [];
}

jQuery.fn.extend({
	agregarClase: función (valor) {
		var nombres de clase, cur, valorcur, nombre de clase, i, valor final;

		si (isFunction( valor ) ) {
			devolver this.each( función( j ) {
				jQuery(esto).addClass(value.call(esto, j, getClass(esto)));
			} );
		}

		nombres de clases = clasesAArray( valor );

		if (nombresdeclase.longitud) {
			devolver esto.cada uno (función() {
				curValue = getClass( esto );
				cur = this.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				si (cur) {
					para (i = 0; i <nombresdeclase.longitud; i++) {
						nombre de clase = nombres de clase [i];
						if ( cur.indexOf( " " + nombre de clase + " " ) < 0 ) {
							cur += nombreclase + " ";
						}
					}

					// Asigne solo si es diferente para evitar renderizaciones innecesarias.
					valor final = stripAndCollapse( cur );
					si (valorcur!==valorfinal) {
						this.setAttribute ("clase", valor final);
					}
				}
			} );
		}

		devolver esto;
	},

	eliminarClase: función (valor) {
		var nombres de clase, cur, valorcur, nombre de clase, i, valor final;

		si (isFunction( valor ) ) {
			devolver this.each( función( j ) {
				jQuery(esto).removeClass(value.call(esto, j, getClass(esto)));
			} );
		}

		si (!argumentos.longitud) {
			devolver this.attr( "clase", "" );
		}

		nombres de clases = clasesAArray( valor );

		if (nombresdeclase.longitud) {
			devolver esto.cada uno (función() {
				curValue = getClass( esto );

				// Esta expresión está aquí para una mejor compresibilidad (ver addClass)
				cur = this.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					for ( i = 0; i < classNames.length; i++ ) {
						className = classNames[ i ];

						// Remove *all* instances
						while ( cur.indexOf( " " + className + " " ) > -1 ) {
							cur = cur.replace( " " + className + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						this.setAttribute( "class", finalValue );
					}
				}
			} );
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var classNames, className, i, self,
			type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		classNames = classesToArray( value );

		return this.each( function() {
			if ( isValidValue ) {

				// Toggle individual class names
				self = jQuery( this );

				for ( i = 0; i < classNames.length; i++ ) {
					className = classNames[ i ];

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
				return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (trac-14686, trac-14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (trac-2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion
var location = window.location;

var nonce = { guid: Date.now() };

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, parserErrorElem;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {}

	parserErrorElem = xml && xml.getElementsByTagName( "parsererror" )[ 0 ];
	if ( !xml || parserErrorElem ) {
		jQuery.error( "Invalid XML: " + (
			parserErrorElem ?
				jQuery.map( parserErrorElem.childNodes, function( el ) {
					return el.textContent;
				} ).join( "\n" ) :
				data
		) );
	}
	return xml;
};


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (trac-9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (trac-9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || Object.create( null ) )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (trac-6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	if ( a == null ) {
		return "";
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} ).filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} ).map( function( _i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// trac-7653, trac-8125, trac-8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (trac-10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );

originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes trac-9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
									( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
										.concat( match[ 2 ] );
							}
						}
						match = responseHeaders[ key.toLowerCase() + " " ];
					}
					return match == null ? null : match.join( ", " );
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (trac-10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket trac-12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (trac-15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// trac-9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce.guid++ ) +
					uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Use a noop converter for missing script but not if jsonp
			if ( !isSuccess &&
				jQuery.inArray( "script", s.dataTypes ) > -1 &&
				jQuery.inArray( "json", s.dataTypes ) < 0 ) {
				s.converters[ "text script" ] = function() {};
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( _i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );

jQuery.ajaxPrefilter( function( s ) {
	var i;
	for ( i in s.headers ) {
		if ( i.toLowerCase() === "content-type" ) {
			s.contentType = s.headers[ i ] || "";
		}
	}
} );


jQuery._evalUrl = function( url, options, doc ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (trac-11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,

		// Only evaluate the response if it is successful (gh-4126)
		// dataFilter is not invoked for failure responses, so using it instead
		// of the default converter is kludgy but it works.
		converters: {
			"text script": function() {}
		},
		dataFilter: function( response ) {
			jQuery.globalEval( response, options, doc );
		}
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// trac-1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see trac-8605, trac-14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// trac-14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain or forced-by-attrs requests
	if ( s.crossDomain || s.scriptAttrs ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" )
					.attr( s.scriptAttrs || {} )
					.prop( { charset: s.scriptCharset, src: s.url } )
					.on( "load error", callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					} );

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce.guid++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		devolución de llamada = parámetros;
		parámetros = indefinido;

	// De lo contrario, construye una cadena de parámetros
	} else if (parámetros && tipo de parámetros === "objeto") {
		tipo = "POST";
	}

	// Si tenemos elementos para modificar realizamos la solicitud
	si (auto.longitud > 0) {
		jQuery.ajax ({
			URL: URL,

			// Si la variable "tipo" no está definida, se utilizará el método "GET".
			//Hacer explícito el valor de este campo ya que
			// el usuario puede anularlo mediante el método ajaxSetup
			tipo: tipo || "CONSEGUIR",
			tipo de datos: "html",
			datos: parámetros
		} ).done( función( textorespuesta ) {

			// Guarda la respuesta para usarla en una devolución de llamada completa
			respuesta = argumentos;

			self.html(selector?

				// Si se especificó un selector, localiza los elementos correctos en un div ficticio
				// Excluye scripts para evitar errores de 'Permiso denegado' de IE
				jQuery( "<div>" ).append( jQuery.parseHTML( textorespuesta ) ).find( selector ) :

				// De lo contrario usa el resultado completo
				texto de respuesta);

		// Si la solicitud tiene éxito, esta función obtiene "datos", "estado", "jqXHR"
		// pero se ignoran porque la respuesta se estableció arriba.
		// Si falla, esta función obtiene "jqXHR", "status", "error"
		} ).always( función de devolución de llamada &&( jqXHR, estado ) {
			self.cada uno (función() {
				callback.apply(esto, respuesta || [jqXHR.responseText, estado, jqXHR]);
			} );
		} );
	}

	devolver esto;
};




jQuery.expr.pseudos.animated = función (elem) {
	devolver jQuery.grep( jQuery.timers, función( fn ) {
		devolver elem === fn.elem;
	} ).longitud;
};




jQuery.offset = {
	setOffset: función (elemento, opciones, i) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calcularPosition,
			posición = jQuery.css (elem, "posición"),
			curElem = jQuery(elem),
			accesorios = {};

		// Establece la posición primero, en caso de que arriba/izquierda estén configuradas incluso en elementos estáticos
		si (posición === "estática") {
			elem.style.position = "relativo";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "arriba" );
		curCSSLeft = jQuery.css( elem, "izquierda" );
		calcularPosición = (posición === "absoluta" || posición === "fija") &&
			( curCSSTop + curCSSLeft ).indexOf( "auto") > -1;

		// Necesita poder calcular la posición si
		// arriba o izquierda es automático y la posición es absoluta o fija
		si (calcularPosición) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.izquierda;

		} demás {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		si (isFunction(opciones)) {

			// Utilice jQuery.extend aquí para permitir la modificación del argumento de coordenadas (gh-1848)
			opciones = opciones.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		si (opciones.arriba! = nulo) {
			props.top = (opciones.top - curOffset.top) + curTop;
		}
		si (opciones.izquierda! = nulo) {
			props.left = (opciones.izquierda - curOffset.left) + curLeft;
		}

		if ("usando" en opciones) {
			opciones.usando.call(elem, props);

		} demás {
			curElem.css(accesorios);
		}
	}
};

jQuery.fn.extend({

	// offset() relaciona el cuadro de borde de un elemento con el origen del documento
	desplazamiento: función (opciones) {

		// Preservar el encadenamiento para el setter
		si (argumentos.longitud) {
			opciones de retorno === indefinido?
				este :
				this.each( función( i ) {
					jQuery.offset.setOffset (esto, opciones, i);
				} );
		}

		var recta, ganar,
			elem = esto[ 0 ];

		si (!elem) {
			devolver;
		}

		// Devuelve ceros para elementos desconectados y ocultos (mostrar: ninguno) (gh-2310)
		// Soporte: IE <=11 solamente
		// Ejecutando getBoundingClientRect en un
		// el nodo desconectado en IE arroja un error
		si (!elem.getClientRects().longitud) {
			return {arriba: 0, izquierda: 0};
		}

		// Obtenga la posición relativa al documento agregando desplazamiento de la ventana gráfica al gBCR relativo a la ventana gráfica
		rect = elem.getBoundingClientRect();
		ganar = elem.ownerDocument.defaultView;
		devolver {
			arriba: rect.top + win.pageYOffset,
			izquierda: rect.left + win.pageXOffset
		};
	},

	// position() relaciona el cuadro de margen de un elemento con el cuadro de relleno de su padre desplazado
	// Esto corresponde al comportamiento del posicionamiento absoluto de CSS
	posición: función() {
		si (!este[ 0 ] ) {
			devolver;
		}

		var offsetParent, offset, doc,
			elemento = esto [0],
			parentOffset = {arriba: 0, izquierda: 0};

		// posición: los elementos fijos están desplazados de la ventana gráfica, que a su vez siempre tiene un desplazamiento cero
		if ( jQuery.css( elem, "posición") === "fijo" ) {

			// Asumir posición: fija implica disponibilidad de getBoundingClientRect
			desplazamiento = elem.getBoundingClientRect();

		} demás {
			desplazamiento = this.offset();

			// Cuenta para el padre de compensación *real*, que puede ser el documento o su elemento raíz
			// cuando se identifica un elemento posicionado estáticamente
			doc = elem.propietarioDocumento;
			offsetParent = elem.offsetParent || doc.documentElement;
			mientras (compensarPadre &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css(offsetParent, "posición") === "estático" ) {

				offsetParent = offsetParent.parentNode;
			}
			if (offsetParent && offsetParent!== elem && offsetParent.nodeType === 1) {

				// Incorporamos bordes en su desplazamiento, ya que están fuera de su origen de contenido
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", verdadero);
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", verdadero);
			}
		}

		// Restar compensaciones principales y márgenes de elementos
		devolver {
			arriba: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", verdadero),
			izquierda: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// Este método devolverá documentElement en los siguientes casos:
	// 1) Para el elemento dentro del iframe sin offsetParent, este método devolverá
	// elemento de documento de la ventana principal
	// 2) Para el elemento oculto o separado
	// 3) Para el cuerpo o elemento html, es decir, en el caso del nodo html, regresará solo
	//
	// pero esas excepciones nunca se presentaron como casos de uso de la vida real
	// y podrían considerarse resultados más preferibles.
	//
	// Esta lógica, sin embargo, no está garantizada y puede cambiar en cualquier momento en el futuro.
	offsetParent: función() {
		devolver this.map( función() {
			var offsetParent = this.offsetParent;

			while (offsetParent && jQuery.css(offsetParent, "posición") === "estático" ) {
				offsetParent = offsetParent.offsetParent;
			}

			devolver offsetParent || elementodocumento;
		} );
	}
} );

// Crea los métodos scrollLeft y scrollTop
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, función (método, prop) {
	var top = "pageYOffset" === prop;

	jQuery.fn[método] = función(val) {
		acceso de retorno (esto, función (elem, método, val) {

			// Fusionar documentos y ventanas
			var ganar;
			si (esVentana(elem)) {
				ganar = elem;
			} más si (elem.nodeType === 9) {
				ganar = elem.defaultView;
			}

			si (val === indefinido) {
				volver ganar? ganar[ prop ] : elem [ método ];
			}

			si (ganar) {
				ganar.scrollTo(
					!arriba ? valor: win.pageXOffset,
					arriba ? valor: win.pageYOffset
				);

			} demás {
				elemento[ método ] = val;
			}
		}, método, valor, argumentos.longitud);
	};
} );

// Soporte: Safari <=7 - 9.1, Chrome <=37 - 49
// Agrega los cssHooks superior/izquierdo usando jQuery.fn.position
// Error de Webkit: https://bugs.webkit.org/show_bug.cgi?id=29084
// Error de parpadeo: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle devuelve el porcentaje cuando se especifica para arriba/izquierda/abajo/derecha;
// en lugar de hacer que el módulo css dependa del módulo offset, simplemente compruébalo aquí
jQuery.each( [ "arriba", "izquierda" ], función( _i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		función (elem, calculado) {
			si (calculado) {
				calculado = curCSS( elem, prop );

				// Si curCSS devuelve un porcentaje, recurra al desplazamiento
				devolver rnumnonpx.test (calculado)?
					jQuery( elem ).position()[ prop ] + "px":
					calculado;
			}
		}
	);
} );


// Crea los métodos InnerHeight, InnerWidth, Height, Ancho, OuterHeight y OuterWidth
jQuery.each ({ Alto: "alto", Ancho: "ancho" }, función (nombre, tipo) {
	jQuery.cada uno ({
		relleno: "interior" + nombre,
		tipo de contenido,
		"": "exterior" + nombre
	}, función (extra predeterminada, nombrefunción) {

		// El margen es sólo para altura exterior, ancho exterior
		jQuery.fn[nombrefunción] = función(margen, valor) {
			var encadenable = argumentos.longitud && (predeterminadoExtra || tipo de margen!== "booleano"),
				extra = predeterminadoExtra || (margen === verdadero || valor === verdadero? "margen": "borde");

			acceso de retorno (esto, función (elemento, tipo, valor) {
				vardoc;

				si (esVentana(elem)) {

					// $( ventana ).outerWidth/Height regresa con/h incluidas las barras de desplazamiento (gh-1729)
					devolver funcName.indexOf( "exterior") === 0?
						elemento[ "interior" + nombre ] :
						elem.document.documentElement[ "cliente" + nombre ];
				}

				// Obtener el ancho o alto del documento
				si (elem.nodeType === 9) {
					doc = elem.documentElement;

					// Ya sea desplazarse[Ancho/Alto] o desplazarse[Ancho/Alto] o cliente[Ancho/Alto],
					// lo que sea mayor
					devolver Math.max(
						elem.body[ "desplazamiento" + nombre ], doc[ "desplazamiento" + nombre ],
						elem.body[ "desplazamiento" + nombre ], doc[ "desplazamiento" + nombre ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( _i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	},

	hover: function( fnOver, fnOut ) {
		return this
			.on( "mouseenter", fnOver )
			.on( "mouseleave", fnOut || fnOver );
	}
} );

jQuery.each(
	( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( _i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	}
);




// Support: Android <=4.0 only
// Make sure we trim BOM and NBSP
// Require that the "whitespace run" starts from a non-whitespace
// to avoid O(N^2) behavior when the engine would try matching "\s+$" at each space position.
var rtrim = /^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};

jQuery.trim = function( text ) {
	return text == null ?
		"" :
		( text + "" ).replace( rtrim, "$1" );
};



// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (trac-7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (trac-13566)
if ( typeof noGlobal === "undefined" ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} )